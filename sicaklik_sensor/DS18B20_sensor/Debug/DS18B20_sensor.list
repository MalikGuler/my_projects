
DS18B20_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004974  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad0  08004ad0  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004ad0  08004ad0  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004ad0  08004ad0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004ad8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  20000010  08004ae8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  08004ae8  00006090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc7b  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c14  00000000  00000000  00013cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000168c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8c  00000000  00000000  000177e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011166  00000000  00000000  00018374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001172e  00000000  00000000  000294da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068ba4  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a37ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000362c  00000000  00000000  000a37f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a6e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a1c 	.word	0x08004a1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004a1c 	.word	0x08004a1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fa95 	bl	8000758 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fa1d 	bl	8000678 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fa87 	bl	8000758 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fa7d 	bl	8000758 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fa2b 	bl	80006c8 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fa21 	bl	80006c8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fadd>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	024b      	lsls	r3, r1, #9
 8000298:	0a5a      	lsrs	r2, r3, #9
 800029a:	4694      	mov	ip, r2
 800029c:	004a      	lsls	r2, r1, #1
 800029e:	0fc9      	lsrs	r1, r1, #31
 80002a0:	46ce      	mov	lr, r9
 80002a2:	4647      	mov	r7, r8
 80002a4:	4689      	mov	r9, r1
 80002a6:	0045      	lsls	r5, r0, #1
 80002a8:	0246      	lsls	r6, r0, #9
 80002aa:	0e2d      	lsrs	r5, r5, #24
 80002ac:	0e12      	lsrs	r2, r2, #24
 80002ae:	b580      	push	{r7, lr}
 80002b0:	0999      	lsrs	r1, r3, #6
 80002b2:	0a77      	lsrs	r7, r6, #9
 80002b4:	0fc4      	lsrs	r4, r0, #31
 80002b6:	09b6      	lsrs	r6, r6, #6
 80002b8:	1aab      	subs	r3, r5, r2
 80002ba:	454c      	cmp	r4, r9
 80002bc:	d020      	beq.n	8000300 <__aeabi_fadd+0x6c>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd0c      	ble.n	80002dc <__aeabi_fadd+0x48>
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d134      	bne.n	8000330 <__aeabi_fadd+0x9c>
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d02a      	beq.n	8000320 <__aeabi_fadd+0x8c>
 80002ca:	1e5a      	subs	r2, r3, #1
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fadd+0x3e>
 80002d0:	e08f      	b.n	80003f2 <__aeabi_fadd+0x15e>
 80002d2:	2bff      	cmp	r3, #255	@ 0xff
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fadd+0x44>
 80002d6:	e0cd      	b.n	8000474 <__aeabi_fadd+0x1e0>
 80002d8:	0013      	movs	r3, r2
 80002da:	e02f      	b.n	800033c <__aeabi_fadd+0xa8>
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d060      	beq.n	80003a2 <__aeabi_fadd+0x10e>
 80002e0:	1b53      	subs	r3, r2, r5
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d000      	beq.n	80002e8 <__aeabi_fadd+0x54>
 80002e6:	e0ee      	b.n	80004c6 <__aeabi_fadd+0x232>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d100      	bne.n	80002ee <__aeabi_fadd+0x5a>
 80002ec:	e13e      	b.n	800056c <__aeabi_fadd+0x2d8>
 80002ee:	1e5c      	subs	r4, r3, #1
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fadd+0x62>
 80002f4:	e16b      	b.n	80005ce <__aeabi_fadd+0x33a>
 80002f6:	2bff      	cmp	r3, #255	@ 0xff
 80002f8:	d100      	bne.n	80002fc <__aeabi_fadd+0x68>
 80002fa:	e0b9      	b.n	8000470 <__aeabi_fadd+0x1dc>
 80002fc:	0023      	movs	r3, r4
 80002fe:	e0e7      	b.n	80004d0 <__aeabi_fadd+0x23c>
 8000300:	2b00      	cmp	r3, #0
 8000302:	dc00      	bgt.n	8000306 <__aeabi_fadd+0x72>
 8000304:	e0a4      	b.n	8000450 <__aeabi_fadd+0x1bc>
 8000306:	2a00      	cmp	r2, #0
 8000308:	d069      	beq.n	80003de <__aeabi_fadd+0x14a>
 800030a:	2dff      	cmp	r5, #255	@ 0xff
 800030c:	d100      	bne.n	8000310 <__aeabi_fadd+0x7c>
 800030e:	e0b1      	b.n	8000474 <__aeabi_fadd+0x1e0>
 8000310:	2280      	movs	r2, #128	@ 0x80
 8000312:	04d2      	lsls	r2, r2, #19
 8000314:	4311      	orrs	r1, r2
 8000316:	2b1b      	cmp	r3, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0x88>
 800031a:	e0e9      	b.n	80004f0 <__aeabi_fadd+0x25c>
 800031c:	002b      	movs	r3, r5
 800031e:	3605      	adds	r6, #5
 8000320:	08f7      	lsrs	r7, r6, #3
 8000322:	2bff      	cmp	r3, #255	@ 0xff
 8000324:	d100      	bne.n	8000328 <__aeabi_fadd+0x94>
 8000326:	e0a5      	b.n	8000474 <__aeabi_fadd+0x1e0>
 8000328:	027a      	lsls	r2, r7, #9
 800032a:	0a52      	lsrs	r2, r2, #9
 800032c:	b2d8      	uxtb	r0, r3
 800032e:	e030      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000330:	2dff      	cmp	r5, #255	@ 0xff
 8000332:	d100      	bne.n	8000336 <__aeabi_fadd+0xa2>
 8000334:	e09e      	b.n	8000474 <__aeabi_fadd+0x1e0>
 8000336:	2280      	movs	r2, #128	@ 0x80
 8000338:	04d2      	lsls	r2, r2, #19
 800033a:	4311      	orrs	r1, r2
 800033c:	2001      	movs	r0, #1
 800033e:	2b1b      	cmp	r3, #27
 8000340:	dc08      	bgt.n	8000354 <__aeabi_fadd+0xc0>
 8000342:	0008      	movs	r0, r1
 8000344:	2220      	movs	r2, #32
 8000346:	40d8      	lsrs	r0, r3
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	4099      	lsls	r1, r3
 800034c:	000b      	movs	r3, r1
 800034e:	1e5a      	subs	r2, r3, #1
 8000350:	4193      	sbcs	r3, r2
 8000352:	4318      	orrs	r0, r3
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	0173      	lsls	r3, r6, #5
 8000358:	d400      	bmi.n	800035c <__aeabi_fadd+0xc8>
 800035a:	e071      	b.n	8000440 <__aeabi_fadd+0x1ac>
 800035c:	01b6      	lsls	r6, r6, #6
 800035e:	09b7      	lsrs	r7, r6, #6
 8000360:	0038      	movs	r0, r7
 8000362:	f000 fe4f 	bl	8001004 <__clzsi2>
 8000366:	003b      	movs	r3, r7
 8000368:	3805      	subs	r0, #5
 800036a:	4083      	lsls	r3, r0
 800036c:	4285      	cmp	r5, r0
 800036e:	dd4d      	ble.n	800040c <__aeabi_fadd+0x178>
 8000370:	4eb4      	ldr	r6, [pc, #720]	@ (8000644 <__aeabi_fadd+0x3b0>)
 8000372:	1a2d      	subs	r5, r5, r0
 8000374:	401e      	ands	r6, r3
 8000376:	075a      	lsls	r2, r3, #29
 8000378:	d068      	beq.n	800044c <__aeabi_fadd+0x1b8>
 800037a:	220f      	movs	r2, #15
 800037c:	4013      	ands	r3, r2
 800037e:	2b04      	cmp	r3, #4
 8000380:	d064      	beq.n	800044c <__aeabi_fadd+0x1b8>
 8000382:	3604      	adds	r6, #4
 8000384:	0173      	lsls	r3, r6, #5
 8000386:	d561      	bpl.n	800044c <__aeabi_fadd+0x1b8>
 8000388:	1c68      	adds	r0, r5, #1
 800038a:	2dfe      	cmp	r5, #254	@ 0xfe
 800038c:	d154      	bne.n	8000438 <__aeabi_fadd+0x1a4>
 800038e:	20ff      	movs	r0, #255	@ 0xff
 8000390:	2200      	movs	r2, #0
 8000392:	05c0      	lsls	r0, r0, #23
 8000394:	4310      	orrs	r0, r2
 8000396:	07e4      	lsls	r4, r4, #31
 8000398:	4320      	orrs	r0, r4
 800039a:	bcc0      	pop	{r6, r7}
 800039c:	46b9      	mov	r9, r7
 800039e:	46b0      	mov	r8, r6
 80003a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a2:	22fe      	movs	r2, #254	@ 0xfe
 80003a4:	4690      	mov	r8, r2
 80003a6:	1c68      	adds	r0, r5, #1
 80003a8:	0002      	movs	r2, r0
 80003aa:	4640      	mov	r0, r8
 80003ac:	4210      	tst	r0, r2
 80003ae:	d16b      	bne.n	8000488 <__aeabi_fadd+0x1f4>
 80003b0:	2d00      	cmp	r5, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0x122>
 80003b4:	e0dd      	b.n	8000572 <__aeabi_fadd+0x2de>
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d100      	bne.n	80003bc <__aeabi_fadd+0x128>
 80003ba:	e102      	b.n	80005c2 <__aeabi_fadd+0x32e>
 80003bc:	2900      	cmp	r1, #0
 80003be:	d0b3      	beq.n	8000328 <__aeabi_fadd+0x94>
 80003c0:	2280      	movs	r2, #128	@ 0x80
 80003c2:	1a77      	subs	r7, r6, r1
 80003c4:	04d2      	lsls	r2, r2, #19
 80003c6:	4217      	tst	r7, r2
 80003c8:	d100      	bne.n	80003cc <__aeabi_fadd+0x138>
 80003ca:	e136      	b.n	800063a <__aeabi_fadd+0x3a6>
 80003cc:	464c      	mov	r4, r9
 80003ce:	1b8e      	subs	r6, r1, r6
 80003d0:	d061      	beq.n	8000496 <__aeabi_fadd+0x202>
 80003d2:	2001      	movs	r0, #1
 80003d4:	4216      	tst	r6, r2
 80003d6:	d130      	bne.n	800043a <__aeabi_fadd+0x1a6>
 80003d8:	2300      	movs	r3, #0
 80003da:	08f7      	lsrs	r7, r6, #3
 80003dc:	e7a4      	b.n	8000328 <__aeabi_fadd+0x94>
 80003de:	2900      	cmp	r1, #0
 80003e0:	d09e      	beq.n	8000320 <__aeabi_fadd+0x8c>
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d100      	bne.n	80003ea <__aeabi_fadd+0x156>
 80003e8:	e0ca      	b.n	8000580 <__aeabi_fadd+0x2ec>
 80003ea:	2bff      	cmp	r3, #255	@ 0xff
 80003ec:	d042      	beq.n	8000474 <__aeabi_fadd+0x1e0>
 80003ee:	0013      	movs	r3, r2
 80003f0:	e791      	b.n	8000316 <__aeabi_fadd+0x82>
 80003f2:	1a71      	subs	r1, r6, r1
 80003f4:	014b      	lsls	r3, r1, #5
 80003f6:	d400      	bmi.n	80003fa <__aeabi_fadd+0x166>
 80003f8:	e0d1      	b.n	800059e <__aeabi_fadd+0x30a>
 80003fa:	018f      	lsls	r7, r1, #6
 80003fc:	09bf      	lsrs	r7, r7, #6
 80003fe:	0038      	movs	r0, r7
 8000400:	f000 fe00 	bl	8001004 <__clzsi2>
 8000404:	003b      	movs	r3, r7
 8000406:	3805      	subs	r0, #5
 8000408:	4083      	lsls	r3, r0
 800040a:	2501      	movs	r5, #1
 800040c:	2220      	movs	r2, #32
 800040e:	1b40      	subs	r0, r0, r5
 8000410:	3001      	adds	r0, #1
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	001e      	movs	r6, r3
 8000416:	4093      	lsls	r3, r2
 8000418:	40c6      	lsrs	r6, r0
 800041a:	1e5a      	subs	r2, r3, #1
 800041c:	4193      	sbcs	r3, r2
 800041e:	431e      	orrs	r6, r3
 8000420:	d039      	beq.n	8000496 <__aeabi_fadd+0x202>
 8000422:	0773      	lsls	r3, r6, #29
 8000424:	d100      	bne.n	8000428 <__aeabi_fadd+0x194>
 8000426:	e11b      	b.n	8000660 <__aeabi_fadd+0x3cc>
 8000428:	230f      	movs	r3, #15
 800042a:	2500      	movs	r5, #0
 800042c:	4033      	ands	r3, r6
 800042e:	2b04      	cmp	r3, #4
 8000430:	d1a7      	bne.n	8000382 <__aeabi_fadd+0xee>
 8000432:	2001      	movs	r0, #1
 8000434:	0172      	lsls	r2, r6, #5
 8000436:	d57c      	bpl.n	8000532 <__aeabi_fadd+0x29e>
 8000438:	b2c0      	uxtb	r0, r0
 800043a:	01b2      	lsls	r2, r6, #6
 800043c:	0a52      	lsrs	r2, r2, #9
 800043e:	e7a8      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000440:	0773      	lsls	r3, r6, #29
 8000442:	d003      	beq.n	800044c <__aeabi_fadd+0x1b8>
 8000444:	230f      	movs	r3, #15
 8000446:	4033      	ands	r3, r6
 8000448:	2b04      	cmp	r3, #4
 800044a:	d19a      	bne.n	8000382 <__aeabi_fadd+0xee>
 800044c:	002b      	movs	r3, r5
 800044e:	e767      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000450:	2b00      	cmp	r3, #0
 8000452:	d023      	beq.n	800049c <__aeabi_fadd+0x208>
 8000454:	1b53      	subs	r3, r2, r5
 8000456:	2d00      	cmp	r5, #0
 8000458:	d17b      	bne.n	8000552 <__aeabi_fadd+0x2be>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_fadd+0x1cc>
 800045e:	e086      	b.n	800056e <__aeabi_fadd+0x2da>
 8000460:	1e5d      	subs	r5, r3, #1
 8000462:	2b01      	cmp	r3, #1
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x1d4>
 8000466:	e08b      	b.n	8000580 <__aeabi_fadd+0x2ec>
 8000468:	2bff      	cmp	r3, #255	@ 0xff
 800046a:	d002      	beq.n	8000472 <__aeabi_fadd+0x1de>
 800046c:	002b      	movs	r3, r5
 800046e:	e075      	b.n	800055c <__aeabi_fadd+0x2c8>
 8000470:	464c      	mov	r4, r9
 8000472:	4667      	mov	r7, ip
 8000474:	2f00      	cmp	r7, #0
 8000476:	d100      	bne.n	800047a <__aeabi_fadd+0x1e6>
 8000478:	e789      	b.n	800038e <__aeabi_fadd+0xfa>
 800047a:	2280      	movs	r2, #128	@ 0x80
 800047c:	03d2      	lsls	r2, r2, #15
 800047e:	433a      	orrs	r2, r7
 8000480:	0252      	lsls	r2, r2, #9
 8000482:	20ff      	movs	r0, #255	@ 0xff
 8000484:	0a52      	lsrs	r2, r2, #9
 8000486:	e784      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000488:	1a77      	subs	r7, r6, r1
 800048a:	017b      	lsls	r3, r7, #5
 800048c:	d46b      	bmi.n	8000566 <__aeabi_fadd+0x2d2>
 800048e:	2f00      	cmp	r7, #0
 8000490:	d000      	beq.n	8000494 <__aeabi_fadd+0x200>
 8000492:	e765      	b.n	8000360 <__aeabi_fadd+0xcc>
 8000494:	2400      	movs	r4, #0
 8000496:	2000      	movs	r0, #0
 8000498:	2200      	movs	r2, #0
 800049a:	e77a      	b.n	8000392 <__aeabi_fadd+0xfe>
 800049c:	22fe      	movs	r2, #254	@ 0xfe
 800049e:	1c6b      	adds	r3, r5, #1
 80004a0:	421a      	tst	r2, r3
 80004a2:	d149      	bne.n	8000538 <__aeabi_fadd+0x2a4>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d000      	beq.n	80004aa <__aeabi_fadd+0x216>
 80004a8:	e09f      	b.n	80005ea <__aeabi_fadd+0x356>
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0x21c>
 80004ae:	e0ba      	b.n	8000626 <__aeabi_fadd+0x392>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x222>
 80004b4:	e0cf      	b.n	8000656 <__aeabi_fadd+0x3c2>
 80004b6:	1872      	adds	r2, r6, r1
 80004b8:	0153      	lsls	r3, r2, #5
 80004ba:	d400      	bmi.n	80004be <__aeabi_fadd+0x22a>
 80004bc:	e0cd      	b.n	800065a <__aeabi_fadd+0x3c6>
 80004be:	0192      	lsls	r2, r2, #6
 80004c0:	2001      	movs	r0, #1
 80004c2:	0a52      	lsrs	r2, r2, #9
 80004c4:	e765      	b.n	8000392 <__aeabi_fadd+0xfe>
 80004c6:	2aff      	cmp	r2, #255	@ 0xff
 80004c8:	d0d2      	beq.n	8000470 <__aeabi_fadd+0x1dc>
 80004ca:	2080      	movs	r0, #128	@ 0x80
 80004cc:	04c0      	lsls	r0, r0, #19
 80004ce:	4306      	orrs	r6, r0
 80004d0:	2001      	movs	r0, #1
 80004d2:	2b1b      	cmp	r3, #27
 80004d4:	dc08      	bgt.n	80004e8 <__aeabi_fadd+0x254>
 80004d6:	0030      	movs	r0, r6
 80004d8:	2420      	movs	r4, #32
 80004da:	40d8      	lsrs	r0, r3
 80004dc:	1ae3      	subs	r3, r4, r3
 80004de:	409e      	lsls	r6, r3
 80004e0:	0033      	movs	r3, r6
 80004e2:	1e5c      	subs	r4, r3, #1
 80004e4:	41a3      	sbcs	r3, r4
 80004e6:	4318      	orrs	r0, r3
 80004e8:	464c      	mov	r4, r9
 80004ea:	0015      	movs	r5, r2
 80004ec:	1a0e      	subs	r6, r1, r0
 80004ee:	e732      	b.n	8000356 <__aeabi_fadd+0xc2>
 80004f0:	0008      	movs	r0, r1
 80004f2:	2220      	movs	r2, #32
 80004f4:	40d8      	lsrs	r0, r3
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4099      	lsls	r1, r3
 80004fa:	000b      	movs	r3, r1
 80004fc:	1e5a      	subs	r2, r3, #1
 80004fe:	4193      	sbcs	r3, r2
 8000500:	4303      	orrs	r3, r0
 8000502:	18f6      	adds	r6, r6, r3
 8000504:	0173      	lsls	r3, r6, #5
 8000506:	d59b      	bpl.n	8000440 <__aeabi_fadd+0x1ac>
 8000508:	3501      	adds	r5, #1
 800050a:	2dff      	cmp	r5, #255	@ 0xff
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x27c>
 800050e:	e73e      	b.n	800038e <__aeabi_fadd+0xfa>
 8000510:	2301      	movs	r3, #1
 8000512:	494d      	ldr	r1, [pc, #308]	@ (8000648 <__aeabi_fadd+0x3b4>)
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	4033      	ands	r3, r6
 8000518:	400a      	ands	r2, r1
 800051a:	431a      	orrs	r2, r3
 800051c:	0016      	movs	r6, r2
 800051e:	0753      	lsls	r3, r2, #29
 8000520:	d004      	beq.n	800052c <__aeabi_fadd+0x298>
 8000522:	230f      	movs	r3, #15
 8000524:	4013      	ands	r3, r2
 8000526:	2b04      	cmp	r3, #4
 8000528:	d000      	beq.n	800052c <__aeabi_fadd+0x298>
 800052a:	e72a      	b.n	8000382 <__aeabi_fadd+0xee>
 800052c:	0173      	lsls	r3, r6, #5
 800052e:	d500      	bpl.n	8000532 <__aeabi_fadd+0x29e>
 8000530:	e72a      	b.n	8000388 <__aeabi_fadd+0xf4>
 8000532:	002b      	movs	r3, r5
 8000534:	08f7      	lsrs	r7, r6, #3
 8000536:	e6f7      	b.n	8000328 <__aeabi_fadd+0x94>
 8000538:	2bff      	cmp	r3, #255	@ 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2aa>
 800053c:	e727      	b.n	800038e <__aeabi_fadd+0xfa>
 800053e:	1871      	adds	r1, r6, r1
 8000540:	0849      	lsrs	r1, r1, #1
 8000542:	074a      	lsls	r2, r1, #29
 8000544:	d02f      	beq.n	80005a6 <__aeabi_fadd+0x312>
 8000546:	220f      	movs	r2, #15
 8000548:	400a      	ands	r2, r1
 800054a:	2a04      	cmp	r2, #4
 800054c:	d02b      	beq.n	80005a6 <__aeabi_fadd+0x312>
 800054e:	1d0e      	adds	r6, r1, #4
 8000550:	e6e6      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000552:	2aff      	cmp	r2, #255	@ 0xff
 8000554:	d08d      	beq.n	8000472 <__aeabi_fadd+0x1de>
 8000556:	2080      	movs	r0, #128	@ 0x80
 8000558:	04c0      	lsls	r0, r0, #19
 800055a:	4306      	orrs	r6, r0
 800055c:	2b1b      	cmp	r3, #27
 800055e:	dd24      	ble.n	80005aa <__aeabi_fadd+0x316>
 8000560:	0013      	movs	r3, r2
 8000562:	1d4e      	adds	r6, r1, #5
 8000564:	e6dc      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000566:	464c      	mov	r4, r9
 8000568:	1b8f      	subs	r7, r1, r6
 800056a:	e6f9      	b.n	8000360 <__aeabi_fadd+0xcc>
 800056c:	464c      	mov	r4, r9
 800056e:	000e      	movs	r6, r1
 8000570:	e6d6      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000572:	2e00      	cmp	r6, #0
 8000574:	d149      	bne.n	800060a <__aeabi_fadd+0x376>
 8000576:	2900      	cmp	r1, #0
 8000578:	d068      	beq.n	800064c <__aeabi_fadd+0x3b8>
 800057a:	4667      	mov	r7, ip
 800057c:	464c      	mov	r4, r9
 800057e:	e77c      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000580:	1870      	adds	r0, r6, r1
 8000582:	0143      	lsls	r3, r0, #5
 8000584:	d574      	bpl.n	8000670 <__aeabi_fadd+0x3dc>
 8000586:	4930      	ldr	r1, [pc, #192]	@ (8000648 <__aeabi_fadd+0x3b4>)
 8000588:	0840      	lsrs	r0, r0, #1
 800058a:	4001      	ands	r1, r0
 800058c:	0743      	lsls	r3, r0, #29
 800058e:	d009      	beq.n	80005a4 <__aeabi_fadd+0x310>
 8000590:	230f      	movs	r3, #15
 8000592:	4003      	ands	r3, r0
 8000594:	2b04      	cmp	r3, #4
 8000596:	d005      	beq.n	80005a4 <__aeabi_fadd+0x310>
 8000598:	2302      	movs	r3, #2
 800059a:	1d0e      	adds	r6, r1, #4
 800059c:	e6c0      	b.n	8000320 <__aeabi_fadd+0x8c>
 800059e:	2301      	movs	r3, #1
 80005a0:	08cf      	lsrs	r7, r1, #3
 80005a2:	e6c1      	b.n	8000328 <__aeabi_fadd+0x94>
 80005a4:	2302      	movs	r3, #2
 80005a6:	08cf      	lsrs	r7, r1, #3
 80005a8:	e6be      	b.n	8000328 <__aeabi_fadd+0x94>
 80005aa:	2520      	movs	r5, #32
 80005ac:	0030      	movs	r0, r6
 80005ae:	40d8      	lsrs	r0, r3
 80005b0:	1aeb      	subs	r3, r5, r3
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	1e5d      	subs	r5, r3, #1
 80005b8:	41ab      	sbcs	r3, r5
 80005ba:	4303      	orrs	r3, r0
 80005bc:	0015      	movs	r5, r2
 80005be:	185e      	adds	r6, r3, r1
 80005c0:	e7a0      	b.n	8000504 <__aeabi_fadd+0x270>
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x334>
 80005c6:	e765      	b.n	8000494 <__aeabi_fadd+0x200>
 80005c8:	464c      	mov	r4, r9
 80005ca:	4667      	mov	r7, ip
 80005cc:	e6ac      	b.n	8000328 <__aeabi_fadd+0x94>
 80005ce:	1b8f      	subs	r7, r1, r6
 80005d0:	017b      	lsls	r3, r7, #5
 80005d2:	d52e      	bpl.n	8000632 <__aeabi_fadd+0x39e>
 80005d4:	01bf      	lsls	r7, r7, #6
 80005d6:	09bf      	lsrs	r7, r7, #6
 80005d8:	0038      	movs	r0, r7
 80005da:	f000 fd13 	bl	8001004 <__clzsi2>
 80005de:	003b      	movs	r3, r7
 80005e0:	3805      	subs	r0, #5
 80005e2:	4083      	lsls	r3, r0
 80005e4:	464c      	mov	r4, r9
 80005e6:	3501      	adds	r5, #1
 80005e8:	e710      	b.n	800040c <__aeabi_fadd+0x178>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0x35c>
 80005ee:	e740      	b.n	8000472 <__aeabi_fadd+0x1de>
 80005f0:	2900      	cmp	r1, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x362>
 80005f4:	e741      	b.n	800047a <__aeabi_fadd+0x1e6>
 80005f6:	2380      	movs	r3, #128	@ 0x80
 80005f8:	03db      	lsls	r3, r3, #15
 80005fa:	429f      	cmp	r7, r3
 80005fc:	d200      	bcs.n	8000600 <__aeabi_fadd+0x36c>
 80005fe:	e73c      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000600:	459c      	cmp	ip, r3
 8000602:	d300      	bcc.n	8000606 <__aeabi_fadd+0x372>
 8000604:	e739      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000606:	4667      	mov	r7, ip
 8000608:	e737      	b.n	800047a <__aeabi_fadd+0x1e6>
 800060a:	2900      	cmp	r1, #0
 800060c:	d100      	bne.n	8000610 <__aeabi_fadd+0x37c>
 800060e:	e734      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	03db      	lsls	r3, r3, #15
 8000614:	429f      	cmp	r7, r3
 8000616:	d200      	bcs.n	800061a <__aeabi_fadd+0x386>
 8000618:	e72f      	b.n	800047a <__aeabi_fadd+0x1e6>
 800061a:	459c      	cmp	ip, r3
 800061c:	d300      	bcc.n	8000620 <__aeabi_fadd+0x38c>
 800061e:	e72c      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000620:	464c      	mov	r4, r9
 8000622:	4667      	mov	r7, ip
 8000624:	e729      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000626:	2900      	cmp	r1, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x398>
 800062a:	e734      	b.n	8000496 <__aeabi_fadd+0x202>
 800062c:	2300      	movs	r3, #0
 800062e:	08cf      	lsrs	r7, r1, #3
 8000630:	e67a      	b.n	8000328 <__aeabi_fadd+0x94>
 8000632:	464c      	mov	r4, r9
 8000634:	2301      	movs	r3, #1
 8000636:	08ff      	lsrs	r7, r7, #3
 8000638:	e676      	b.n	8000328 <__aeabi_fadd+0x94>
 800063a:	2f00      	cmp	r7, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x3ac>
 800063e:	e729      	b.n	8000494 <__aeabi_fadd+0x200>
 8000640:	08ff      	lsrs	r7, r7, #3
 8000642:	e671      	b.n	8000328 <__aeabi_fadd+0x94>
 8000644:	fbffffff 	.word	0xfbffffff
 8000648:	7dffffff 	.word	0x7dffffff
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	2400      	movs	r4, #0
 8000650:	20ff      	movs	r0, #255	@ 0xff
 8000652:	03d2      	lsls	r2, r2, #15
 8000654:	e69d      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000656:	2300      	movs	r3, #0
 8000658:	e666      	b.n	8000328 <__aeabi_fadd+0x94>
 800065a:	2300      	movs	r3, #0
 800065c:	08d7      	lsrs	r7, r2, #3
 800065e:	e663      	b.n	8000328 <__aeabi_fadd+0x94>
 8000660:	2001      	movs	r0, #1
 8000662:	0172      	lsls	r2, r6, #5
 8000664:	d500      	bpl.n	8000668 <__aeabi_fadd+0x3d4>
 8000666:	e6e7      	b.n	8000438 <__aeabi_fadd+0x1a4>
 8000668:	0031      	movs	r1, r6
 800066a:	2300      	movs	r3, #0
 800066c:	08cf      	lsrs	r7, r1, #3
 800066e:	e65b      	b.n	8000328 <__aeabi_fadd+0x94>
 8000670:	2301      	movs	r3, #1
 8000672:	08c7      	lsrs	r7, r0, #3
 8000674:	e658      	b.n	8000328 <__aeabi_fadd+0x94>
 8000676:	46c0      	nop			@ (mov r8, r8)

08000678 <__eqsf2>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	0042      	lsls	r2, r0, #1
 800067c:	024e      	lsls	r6, r1, #9
 800067e:	004c      	lsls	r4, r1, #1
 8000680:	0245      	lsls	r5, r0, #9
 8000682:	0a6d      	lsrs	r5, r5, #9
 8000684:	0e12      	lsrs	r2, r2, #24
 8000686:	0fc3      	lsrs	r3, r0, #31
 8000688:	0a76      	lsrs	r6, r6, #9
 800068a:	0e24      	lsrs	r4, r4, #24
 800068c:	0fc9      	lsrs	r1, r1, #31
 800068e:	2aff      	cmp	r2, #255	@ 0xff
 8000690:	d010      	beq.n	80006b4 <__eqsf2+0x3c>
 8000692:	2cff      	cmp	r4, #255	@ 0xff
 8000694:	d00c      	beq.n	80006b0 <__eqsf2+0x38>
 8000696:	2001      	movs	r0, #1
 8000698:	42a2      	cmp	r2, r4
 800069a:	d10a      	bne.n	80006b2 <__eqsf2+0x3a>
 800069c:	42b5      	cmp	r5, r6
 800069e:	d108      	bne.n	80006b2 <__eqsf2+0x3a>
 80006a0:	428b      	cmp	r3, r1
 80006a2:	d00f      	beq.n	80006c4 <__eqsf2+0x4c>
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	d104      	bne.n	80006b2 <__eqsf2+0x3a>
 80006a8:	0028      	movs	r0, r5
 80006aa:	1e43      	subs	r3, r0, #1
 80006ac:	4198      	sbcs	r0, r3
 80006ae:	e000      	b.n	80006b2 <__eqsf2+0x3a>
 80006b0:	2001      	movs	r0, #1
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	2001      	movs	r0, #1
 80006b6:	2cff      	cmp	r4, #255	@ 0xff
 80006b8:	d1fb      	bne.n	80006b2 <__eqsf2+0x3a>
 80006ba:	4335      	orrs	r5, r6
 80006bc:	d1f9      	bne.n	80006b2 <__eqsf2+0x3a>
 80006be:	404b      	eors	r3, r1
 80006c0:	0018      	movs	r0, r3
 80006c2:	e7f6      	b.n	80006b2 <__eqsf2+0x3a>
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7f4      	b.n	80006b2 <__eqsf2+0x3a>

080006c8 <__gesf2>:
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	0042      	lsls	r2, r0, #1
 80006cc:	0244      	lsls	r4, r0, #9
 80006ce:	024d      	lsls	r5, r1, #9
 80006d0:	0fc3      	lsrs	r3, r0, #31
 80006d2:	0048      	lsls	r0, r1, #1
 80006d4:	0a64      	lsrs	r4, r4, #9
 80006d6:	0e12      	lsrs	r2, r2, #24
 80006d8:	0a6d      	lsrs	r5, r5, #9
 80006da:	0e00      	lsrs	r0, r0, #24
 80006dc:	0fc9      	lsrs	r1, r1, #31
 80006de:	2aff      	cmp	r2, #255	@ 0xff
 80006e0:	d018      	beq.n	8000714 <__gesf2+0x4c>
 80006e2:	28ff      	cmp	r0, #255	@ 0xff
 80006e4:	d00a      	beq.n	80006fc <__gesf2+0x34>
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d11e      	bne.n	8000728 <__gesf2+0x60>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d10a      	bne.n	8000704 <__gesf2+0x3c>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d029      	beq.n	8000746 <__gesf2+0x7e>
 80006f2:	2c00      	cmp	r4, #0
 80006f4:	d12d      	bne.n	8000752 <__gesf2+0x8a>
 80006f6:	0048      	lsls	r0, r1, #1
 80006f8:	3801      	subs	r0, #1
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d125      	bne.n	800074c <__gesf2+0x84>
 8000700:	2a00      	cmp	r2, #0
 8000702:	d101      	bne.n	8000708 <__gesf2+0x40>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d0f6      	beq.n	80006f6 <__gesf2+0x2e>
 8000708:	428b      	cmp	r3, r1
 800070a:	d019      	beq.n	8000740 <__gesf2+0x78>
 800070c:	2001      	movs	r0, #1
 800070e:	425b      	negs	r3, r3
 8000710:	4318      	orrs	r0, r3
 8000712:	e7f2      	b.n	80006fa <__gesf2+0x32>
 8000714:	2c00      	cmp	r4, #0
 8000716:	d119      	bne.n	800074c <__gesf2+0x84>
 8000718:	28ff      	cmp	r0, #255	@ 0xff
 800071a:	d1f7      	bne.n	800070c <__gesf2+0x44>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d115      	bne.n	800074c <__gesf2+0x84>
 8000720:	2000      	movs	r0, #0
 8000722:	428b      	cmp	r3, r1
 8000724:	d1f2      	bne.n	800070c <__gesf2+0x44>
 8000726:	e7e8      	b.n	80006fa <__gesf2+0x32>
 8000728:	2800      	cmp	r0, #0
 800072a:	d0ef      	beq.n	800070c <__gesf2+0x44>
 800072c:	428b      	cmp	r3, r1
 800072e:	d1ed      	bne.n	800070c <__gesf2+0x44>
 8000730:	4282      	cmp	r2, r0
 8000732:	dceb      	bgt.n	800070c <__gesf2+0x44>
 8000734:	db04      	blt.n	8000740 <__gesf2+0x78>
 8000736:	42ac      	cmp	r4, r5
 8000738:	d8e8      	bhi.n	800070c <__gesf2+0x44>
 800073a:	2000      	movs	r0, #0
 800073c:	42ac      	cmp	r4, r5
 800073e:	d2dc      	bcs.n	80006fa <__gesf2+0x32>
 8000740:	0058      	lsls	r0, r3, #1
 8000742:	3801      	subs	r0, #1
 8000744:	e7d9      	b.n	80006fa <__gesf2+0x32>
 8000746:	2c00      	cmp	r4, #0
 8000748:	d0d7      	beq.n	80006fa <__gesf2+0x32>
 800074a:	e7df      	b.n	800070c <__gesf2+0x44>
 800074c:	2002      	movs	r0, #2
 800074e:	4240      	negs	r0, r0
 8000750:	e7d3      	b.n	80006fa <__gesf2+0x32>
 8000752:	428b      	cmp	r3, r1
 8000754:	d1da      	bne.n	800070c <__gesf2+0x44>
 8000756:	e7ee      	b.n	8000736 <__gesf2+0x6e>

08000758 <__lesf2>:
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	0042      	lsls	r2, r0, #1
 800075c:	0244      	lsls	r4, r0, #9
 800075e:	024d      	lsls	r5, r1, #9
 8000760:	0fc3      	lsrs	r3, r0, #31
 8000762:	0048      	lsls	r0, r1, #1
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	0e12      	lsrs	r2, r2, #24
 8000768:	0a6d      	lsrs	r5, r5, #9
 800076a:	0e00      	lsrs	r0, r0, #24
 800076c:	0fc9      	lsrs	r1, r1, #31
 800076e:	2aff      	cmp	r2, #255	@ 0xff
 8000770:	d017      	beq.n	80007a2 <__lesf2+0x4a>
 8000772:	28ff      	cmp	r0, #255	@ 0xff
 8000774:	d00a      	beq.n	800078c <__lesf2+0x34>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d11b      	bne.n	80007b2 <__lesf2+0x5a>
 800077a:	2800      	cmp	r0, #0
 800077c:	d10a      	bne.n	8000794 <__lesf2+0x3c>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d01d      	beq.n	80007be <__lesf2+0x66>
 8000782:	2c00      	cmp	r4, #0
 8000784:	d12d      	bne.n	80007e2 <__lesf2+0x8a>
 8000786:	0048      	lsls	r0, r1, #1
 8000788:	3801      	subs	r0, #1
 800078a:	e011      	b.n	80007b0 <__lesf2+0x58>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d10e      	bne.n	80007ae <__lesf2+0x56>
 8000790:	2a00      	cmp	r2, #0
 8000792:	d101      	bne.n	8000798 <__lesf2+0x40>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d0f6      	beq.n	8000786 <__lesf2+0x2e>
 8000798:	428b      	cmp	r3, r1
 800079a:	d10c      	bne.n	80007b6 <__lesf2+0x5e>
 800079c:	0058      	lsls	r0, r3, #1
 800079e:	3801      	subs	r0, #1
 80007a0:	e006      	b.n	80007b0 <__lesf2+0x58>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d103      	bne.n	80007ae <__lesf2+0x56>
 80007a6:	28ff      	cmp	r0, #255	@ 0xff
 80007a8:	d105      	bne.n	80007b6 <__lesf2+0x5e>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d015      	beq.n	80007da <__lesf2+0x82>
 80007ae:	2002      	movs	r0, #2
 80007b0:	bd30      	pop	{r4, r5, pc}
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d106      	bne.n	80007c4 <__lesf2+0x6c>
 80007b6:	2001      	movs	r0, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	4318      	orrs	r0, r3
 80007bc:	e7f8      	b.n	80007b0 <__lesf2+0x58>
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d0f6      	beq.n	80007b0 <__lesf2+0x58>
 80007c2:	e7f8      	b.n	80007b6 <__lesf2+0x5e>
 80007c4:	428b      	cmp	r3, r1
 80007c6:	d1f6      	bne.n	80007b6 <__lesf2+0x5e>
 80007c8:	4282      	cmp	r2, r0
 80007ca:	dcf4      	bgt.n	80007b6 <__lesf2+0x5e>
 80007cc:	dbe6      	blt.n	800079c <__lesf2+0x44>
 80007ce:	42ac      	cmp	r4, r5
 80007d0:	d8f1      	bhi.n	80007b6 <__lesf2+0x5e>
 80007d2:	2000      	movs	r0, #0
 80007d4:	42ac      	cmp	r4, r5
 80007d6:	d2eb      	bcs.n	80007b0 <__lesf2+0x58>
 80007d8:	e7e0      	b.n	800079c <__lesf2+0x44>
 80007da:	2000      	movs	r0, #0
 80007dc:	428b      	cmp	r3, r1
 80007de:	d1ea      	bne.n	80007b6 <__lesf2+0x5e>
 80007e0:	e7e6      	b.n	80007b0 <__lesf2+0x58>
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d1e7      	bne.n	80007b6 <__lesf2+0x5e>
 80007e6:	e7f2      	b.n	80007ce <__lesf2+0x76>

080007e8 <__aeabi_fmul>:
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	464f      	mov	r7, r9
 80007ec:	4646      	mov	r6, r8
 80007ee:	46d6      	mov	lr, sl
 80007f0:	0044      	lsls	r4, r0, #1
 80007f2:	b5c0      	push	{r6, r7, lr}
 80007f4:	0246      	lsls	r6, r0, #9
 80007f6:	1c0f      	adds	r7, r1, #0
 80007f8:	0a76      	lsrs	r6, r6, #9
 80007fa:	0e24      	lsrs	r4, r4, #24
 80007fc:	0fc5      	lsrs	r5, r0, #31
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fmul+0x1c>
 8000802:	e0da      	b.n	80009ba <__aeabi_fmul+0x1d2>
 8000804:	2cff      	cmp	r4, #255	@ 0xff
 8000806:	d074      	beq.n	80008f2 <__aeabi_fmul+0x10a>
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	00f6      	lsls	r6, r6, #3
 800080c:	04db      	lsls	r3, r3, #19
 800080e:	431e      	orrs	r6, r3
 8000810:	2300      	movs	r3, #0
 8000812:	4699      	mov	r9, r3
 8000814:	469a      	mov	sl, r3
 8000816:	3c7f      	subs	r4, #127	@ 0x7f
 8000818:	027b      	lsls	r3, r7, #9
 800081a:	0a5b      	lsrs	r3, r3, #9
 800081c:	4698      	mov	r8, r3
 800081e:	007b      	lsls	r3, r7, #1
 8000820:	0e1b      	lsrs	r3, r3, #24
 8000822:	0fff      	lsrs	r7, r7, #31
 8000824:	2b00      	cmp	r3, #0
 8000826:	d074      	beq.n	8000912 <__aeabi_fmul+0x12a>
 8000828:	2bff      	cmp	r3, #255	@ 0xff
 800082a:	d100      	bne.n	800082e <__aeabi_fmul+0x46>
 800082c:	e08e      	b.n	800094c <__aeabi_fmul+0x164>
 800082e:	4642      	mov	r2, r8
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	00d2      	lsls	r2, r2, #3
 8000834:	04c9      	lsls	r1, r1, #19
 8000836:	4311      	orrs	r1, r2
 8000838:	3b7f      	subs	r3, #127	@ 0x7f
 800083a:	002a      	movs	r2, r5
 800083c:	18e4      	adds	r4, r4, r3
 800083e:	464b      	mov	r3, r9
 8000840:	407a      	eors	r2, r7
 8000842:	4688      	mov	r8, r1
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	2b0a      	cmp	r3, #10
 8000848:	dc75      	bgt.n	8000936 <__aeabi_fmul+0x14e>
 800084a:	464b      	mov	r3, r9
 800084c:	2000      	movs	r0, #0
 800084e:	2b02      	cmp	r3, #2
 8000850:	dd0f      	ble.n	8000872 <__aeabi_fmul+0x8a>
 8000852:	4649      	mov	r1, r9
 8000854:	2301      	movs	r3, #1
 8000856:	408b      	lsls	r3, r1
 8000858:	21a6      	movs	r1, #166	@ 0xa6
 800085a:	00c9      	lsls	r1, r1, #3
 800085c:	420b      	tst	r3, r1
 800085e:	d169      	bne.n	8000934 <__aeabi_fmul+0x14c>
 8000860:	2190      	movs	r1, #144	@ 0x90
 8000862:	0089      	lsls	r1, r1, #2
 8000864:	420b      	tst	r3, r1
 8000866:	d000      	beq.n	800086a <__aeabi_fmul+0x82>
 8000868:	e100      	b.n	8000a6c <__aeabi_fmul+0x284>
 800086a:	2188      	movs	r1, #136	@ 0x88
 800086c:	4219      	tst	r1, r3
 800086e:	d000      	beq.n	8000872 <__aeabi_fmul+0x8a>
 8000870:	e0f5      	b.n	8000a5e <__aeabi_fmul+0x276>
 8000872:	4641      	mov	r1, r8
 8000874:	0409      	lsls	r1, r1, #16
 8000876:	0c09      	lsrs	r1, r1, #16
 8000878:	4643      	mov	r3, r8
 800087a:	0008      	movs	r0, r1
 800087c:	0c35      	lsrs	r5, r6, #16
 800087e:	0436      	lsls	r6, r6, #16
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	0c36      	lsrs	r6, r6, #16
 8000884:	4370      	muls	r0, r6
 8000886:	4369      	muls	r1, r5
 8000888:	435e      	muls	r6, r3
 800088a:	435d      	muls	r5, r3
 800088c:	1876      	adds	r6, r6, r1
 800088e:	0c03      	lsrs	r3, r0, #16
 8000890:	199b      	adds	r3, r3, r6
 8000892:	4299      	cmp	r1, r3
 8000894:	d903      	bls.n	800089e <__aeabi_fmul+0xb6>
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	0249      	lsls	r1, r1, #9
 800089a:	468c      	mov	ip, r1
 800089c:	4465      	add	r5, ip
 800089e:	0400      	lsls	r0, r0, #16
 80008a0:	0419      	lsls	r1, r3, #16
 80008a2:	0c00      	lsrs	r0, r0, #16
 80008a4:	1809      	adds	r1, r1, r0
 80008a6:	018e      	lsls	r6, r1, #6
 80008a8:	1e70      	subs	r0, r6, #1
 80008aa:	4186      	sbcs	r6, r0
 80008ac:	0c1b      	lsrs	r3, r3, #16
 80008ae:	0e89      	lsrs	r1, r1, #26
 80008b0:	195b      	adds	r3, r3, r5
 80008b2:	430e      	orrs	r6, r1
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	431e      	orrs	r6, r3
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	d46c      	bmi.n	8000996 <__aeabi_fmul+0x1ae>
 80008bc:	0023      	movs	r3, r4
 80008be:	337f      	adds	r3, #127	@ 0x7f
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dc00      	bgt.n	80008c6 <__aeabi_fmul+0xde>
 80008c4:	e0b1      	b.n	8000a2a <__aeabi_fmul+0x242>
 80008c6:	0015      	movs	r5, r2
 80008c8:	0771      	lsls	r1, r6, #29
 80008ca:	d00b      	beq.n	80008e4 <__aeabi_fmul+0xfc>
 80008cc:	200f      	movs	r0, #15
 80008ce:	0021      	movs	r1, r4
 80008d0:	4030      	ands	r0, r6
 80008d2:	2804      	cmp	r0, #4
 80008d4:	d006      	beq.n	80008e4 <__aeabi_fmul+0xfc>
 80008d6:	3604      	adds	r6, #4
 80008d8:	0132      	lsls	r2, r6, #4
 80008da:	d503      	bpl.n	80008e4 <__aeabi_fmul+0xfc>
 80008dc:	4b6e      	ldr	r3, [pc, #440]	@ (8000a98 <__aeabi_fmul+0x2b0>)
 80008de:	401e      	ands	r6, r3
 80008e0:	000b      	movs	r3, r1
 80008e2:	3380      	adds	r3, #128	@ 0x80
 80008e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80008e6:	dd00      	ble.n	80008ea <__aeabi_fmul+0x102>
 80008e8:	e0bd      	b.n	8000a66 <__aeabi_fmul+0x27e>
 80008ea:	01b2      	lsls	r2, r6, #6
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	e048      	b.n	8000984 <__aeabi_fmul+0x19c>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x110>
 80008f6:	e092      	b.n	8000a1e <__aeabi_fmul+0x236>
 80008f8:	2308      	movs	r3, #8
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b06      	subs	r3, #6
 80008fe:	469a      	mov	sl, r3
 8000900:	027b      	lsls	r3, r7, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	4698      	mov	r8, r3
 8000906:	007b      	lsls	r3, r7, #1
 8000908:	24ff      	movs	r4, #255	@ 0xff
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	0fff      	lsrs	r7, r7, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d18a      	bne.n	8000828 <__aeabi_fmul+0x40>
 8000912:	4642      	mov	r2, r8
 8000914:	2a00      	cmp	r2, #0
 8000916:	d164      	bne.n	80009e2 <__aeabi_fmul+0x1fa>
 8000918:	4649      	mov	r1, r9
 800091a:	3201      	adds	r2, #1
 800091c:	4311      	orrs	r1, r2
 800091e:	4689      	mov	r9, r1
 8000920:	290a      	cmp	r1, #10
 8000922:	dc08      	bgt.n	8000936 <__aeabi_fmul+0x14e>
 8000924:	407d      	eors	r5, r7
 8000926:	2001      	movs	r0, #1
 8000928:	b2ea      	uxtb	r2, r5
 800092a:	2902      	cmp	r1, #2
 800092c:	dc91      	bgt.n	8000852 <__aeabi_fmul+0x6a>
 800092e:	0015      	movs	r5, r2
 8000930:	2200      	movs	r2, #0
 8000932:	e027      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000934:	0015      	movs	r5, r2
 8000936:	4653      	mov	r3, sl
 8000938:	2b02      	cmp	r3, #2
 800093a:	d100      	bne.n	800093e <__aeabi_fmul+0x156>
 800093c:	e093      	b.n	8000a66 <__aeabi_fmul+0x27e>
 800093e:	2b03      	cmp	r3, #3
 8000940:	d01a      	beq.n	8000978 <__aeabi_fmul+0x190>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d12c      	bne.n	80009a0 <__aeabi_fmul+0x1b8>
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	e01b      	b.n	8000984 <__aeabi_fmul+0x19c>
 800094c:	4643      	mov	r3, r8
 800094e:	34ff      	adds	r4, #255	@ 0xff
 8000950:	2b00      	cmp	r3, #0
 8000952:	d055      	beq.n	8000a00 <__aeabi_fmul+0x218>
 8000954:	2103      	movs	r1, #3
 8000956:	464b      	mov	r3, r9
 8000958:	430b      	orrs	r3, r1
 800095a:	0019      	movs	r1, r3
 800095c:	2b0a      	cmp	r3, #10
 800095e:	dc00      	bgt.n	8000962 <__aeabi_fmul+0x17a>
 8000960:	e092      	b.n	8000a88 <__aeabi_fmul+0x2a0>
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d000      	beq.n	8000968 <__aeabi_fmul+0x180>
 8000966:	e08c      	b.n	8000a82 <__aeabi_fmul+0x29a>
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	03d2      	lsls	r2, r2, #15
 800096c:	4216      	tst	r6, r2
 800096e:	d003      	beq.n	8000978 <__aeabi_fmul+0x190>
 8000970:	4643      	mov	r3, r8
 8000972:	4213      	tst	r3, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_fmul+0x190>
 8000976:	e07d      	b.n	8000a74 <__aeabi_fmul+0x28c>
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	03d2      	lsls	r2, r2, #15
 800097c:	4332      	orrs	r2, r6
 800097e:	0252      	lsls	r2, r2, #9
 8000980:	0a52      	lsrs	r2, r2, #9
 8000982:	23ff      	movs	r3, #255	@ 0xff
 8000984:	05d8      	lsls	r0, r3, #23
 8000986:	07ed      	lsls	r5, r5, #31
 8000988:	4310      	orrs	r0, r2
 800098a:	4328      	orrs	r0, r5
 800098c:	bce0      	pop	{r5, r6, r7}
 800098e:	46ba      	mov	sl, r7
 8000990:	46b1      	mov	r9, r6
 8000992:	46a8      	mov	r8, r5
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	2301      	movs	r3, #1
 8000998:	0015      	movs	r5, r2
 800099a:	0871      	lsrs	r1, r6, #1
 800099c:	401e      	ands	r6, r3
 800099e:	430e      	orrs	r6, r1
 80009a0:	0023      	movs	r3, r4
 80009a2:	3380      	adds	r3, #128	@ 0x80
 80009a4:	1c61      	adds	r1, r4, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dd41      	ble.n	8000a2e <__aeabi_fmul+0x246>
 80009aa:	0772      	lsls	r2, r6, #29
 80009ac:	d094      	beq.n	80008d8 <__aeabi_fmul+0xf0>
 80009ae:	220f      	movs	r2, #15
 80009b0:	4032      	ands	r2, r6
 80009b2:	2a04      	cmp	r2, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fmul+0x1d0>
 80009b6:	e78e      	b.n	80008d6 <__aeabi_fmul+0xee>
 80009b8:	e78e      	b.n	80008d8 <__aeabi_fmul+0xf0>
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d105      	bne.n	80009ca <__aeabi_fmul+0x1e2>
 80009be:	2304      	movs	r3, #4
 80009c0:	4699      	mov	r9, r3
 80009c2:	3b03      	subs	r3, #3
 80009c4:	2400      	movs	r4, #0
 80009c6:	469a      	mov	sl, r3
 80009c8:	e726      	b.n	8000818 <__aeabi_fmul+0x30>
 80009ca:	0030      	movs	r0, r6
 80009cc:	f000 fb1a 	bl	8001004 <__clzsi2>
 80009d0:	2476      	movs	r4, #118	@ 0x76
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	409e      	lsls	r6, r3
 80009d6:	2300      	movs	r3, #0
 80009d8:	4264      	negs	r4, r4
 80009da:	4699      	mov	r9, r3
 80009dc:	469a      	mov	sl, r3
 80009de:	1a24      	subs	r4, r4, r0
 80009e0:	e71a      	b.n	8000818 <__aeabi_fmul+0x30>
 80009e2:	4640      	mov	r0, r8
 80009e4:	f000 fb0e 	bl	8001004 <__clzsi2>
 80009e8:	464b      	mov	r3, r9
 80009ea:	1a24      	subs	r4, r4, r0
 80009ec:	3c76      	subs	r4, #118	@ 0x76
 80009ee:	2b0a      	cmp	r3, #10
 80009f0:	dca1      	bgt.n	8000936 <__aeabi_fmul+0x14e>
 80009f2:	4643      	mov	r3, r8
 80009f4:	3805      	subs	r0, #5
 80009f6:	4083      	lsls	r3, r0
 80009f8:	407d      	eors	r5, r7
 80009fa:	4698      	mov	r8, r3
 80009fc:	b2ea      	uxtb	r2, r5
 80009fe:	e724      	b.n	800084a <__aeabi_fmul+0x62>
 8000a00:	464a      	mov	r2, r9
 8000a02:	3302      	adds	r3, #2
 8000a04:	4313      	orrs	r3, r2
 8000a06:	002a      	movs	r2, r5
 8000a08:	407a      	eors	r2, r7
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	2b0a      	cmp	r3, #10
 8000a0e:	dc92      	bgt.n	8000936 <__aeabi_fmul+0x14e>
 8000a10:	4649      	mov	r1, r9
 8000a12:	0015      	movs	r5, r2
 8000a14:	2900      	cmp	r1, #0
 8000a16:	d026      	beq.n	8000a66 <__aeabi_fmul+0x27e>
 8000a18:	4699      	mov	r9, r3
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	e719      	b.n	8000852 <__aeabi_fmul+0x6a>
 8000a1e:	230c      	movs	r3, #12
 8000a20:	4699      	mov	r9, r3
 8000a22:	3b09      	subs	r3, #9
 8000a24:	24ff      	movs	r4, #255	@ 0xff
 8000a26:	469a      	mov	sl, r3
 8000a28:	e6f6      	b.n	8000818 <__aeabi_fmul+0x30>
 8000a2a:	0015      	movs	r5, r2
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	2b1b      	cmp	r3, #27
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_fmul+0x250>
 8000a36:	e786      	b.n	8000946 <__aeabi_fmul+0x15e>
 8000a38:	319e      	adds	r1, #158	@ 0x9e
 8000a3a:	0032      	movs	r2, r6
 8000a3c:	408e      	lsls	r6, r1
 8000a3e:	40da      	lsrs	r2, r3
 8000a40:	1e73      	subs	r3, r6, #1
 8000a42:	419e      	sbcs	r6, r3
 8000a44:	4332      	orrs	r2, r6
 8000a46:	0753      	lsls	r3, r2, #29
 8000a48:	d004      	beq.n	8000a54 <__aeabi_fmul+0x26c>
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fmul+0x26c>
 8000a52:	3204      	adds	r2, #4
 8000a54:	0153      	lsls	r3, r2, #5
 8000a56:	d510      	bpl.n	8000a7a <__aeabi_fmul+0x292>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	e792      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000a5e:	003d      	movs	r5, r7
 8000a60:	4646      	mov	r6, r8
 8000a62:	4682      	mov	sl, r0
 8000a64:	e767      	b.n	8000936 <__aeabi_fmul+0x14e>
 8000a66:	23ff      	movs	r3, #255	@ 0xff
 8000a68:	2200      	movs	r2, #0
 8000a6a:	e78b      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000a6c:	2280      	movs	r2, #128	@ 0x80
 8000a6e:	2500      	movs	r5, #0
 8000a70:	03d2      	lsls	r2, r2, #15
 8000a72:	e786      	b.n	8000982 <__aeabi_fmul+0x19a>
 8000a74:	003d      	movs	r5, r7
 8000a76:	431a      	orrs	r2, r3
 8000a78:	e783      	b.n	8000982 <__aeabi_fmul+0x19a>
 8000a7a:	0192      	lsls	r2, r2, #6
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	0a52      	lsrs	r2, r2, #9
 8000a80:	e780      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000a82:	003d      	movs	r5, r7
 8000a84:	4646      	mov	r6, r8
 8000a86:	e777      	b.n	8000978 <__aeabi_fmul+0x190>
 8000a88:	002a      	movs	r2, r5
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	407a      	eors	r2, r7
 8000a8e:	408b      	lsls	r3, r1
 8000a90:	2003      	movs	r0, #3
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	e6e9      	b.n	800086a <__aeabi_fmul+0x82>
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	f7ffffff 	.word	0xf7ffffff

08000a9c <__aeabi_fsub>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	46ce      	mov	lr, r9
 8000aa2:	0243      	lsls	r3, r0, #9
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	0a5f      	lsrs	r7, r3, #9
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	0045      	lsls	r5, r0, #1
 8000aac:	004a      	lsls	r2, r1, #1
 8000aae:	469c      	mov	ip, r3
 8000ab0:	024b      	lsls	r3, r1, #9
 8000ab2:	0fc4      	lsrs	r4, r0, #31
 8000ab4:	0fce      	lsrs	r6, r1, #31
 8000ab6:	0e2d      	lsrs	r5, r5, #24
 8000ab8:	0a58      	lsrs	r0, r3, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0999      	lsrs	r1, r3, #6
 8000abe:	2aff      	cmp	r2, #255	@ 0xff
 8000ac0:	d06b      	beq.n	8000b9a <__aeabi_fsub+0xfe>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	405e      	eors	r6, r3
 8000ac6:	1aab      	subs	r3, r5, r2
 8000ac8:	42b4      	cmp	r4, r6
 8000aca:	d04b      	beq.n	8000b64 <__aeabi_fsub+0xc8>
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_fsub+0x36>
 8000ad0:	e0ff      	b.n	8000cd2 <__aeabi_fsub+0x236>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x3c>
 8000ad6:	e088      	b.n	8000bea <__aeabi_fsub+0x14e>
 8000ad8:	2dff      	cmp	r5, #255	@ 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x42>
 8000adc:	e0ef      	b.n	8000cbe <__aeabi_fsub+0x222>
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	04d2      	lsls	r2, r2, #19
 8000ae2:	4311      	orrs	r1, r2
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	2b1b      	cmp	r3, #27
 8000ae8:	dc08      	bgt.n	8000afc <__aeabi_fsub+0x60>
 8000aea:	0008      	movs	r0, r1
 8000aec:	2220      	movs	r2, #32
 8000aee:	40d8      	lsrs	r0, r3
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	4099      	lsls	r1, r3
 8000af4:	000b      	movs	r3, r1
 8000af6:	1e5a      	subs	r2, r3, #1
 8000af8:	4193      	sbcs	r3, r2
 8000afa:	4318      	orrs	r0, r3
 8000afc:	4663      	mov	r3, ip
 8000afe:	1a1b      	subs	r3, r3, r0
 8000b00:	469c      	mov	ip, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	015b      	lsls	r3, r3, #5
 8000b06:	d400      	bmi.n	8000b0a <__aeabi_fsub+0x6e>
 8000b08:	e0cd      	b.n	8000ca6 <__aeabi_fsub+0x20a>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	019f      	lsls	r7, r3, #6
 8000b0e:	09bf      	lsrs	r7, r7, #6
 8000b10:	0038      	movs	r0, r7
 8000b12:	f000 fa77 	bl	8001004 <__clzsi2>
 8000b16:	003b      	movs	r3, r7
 8000b18:	3805      	subs	r0, #5
 8000b1a:	4083      	lsls	r3, r0
 8000b1c:	4285      	cmp	r5, r0
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_fsub+0x86>
 8000b20:	e0a2      	b.n	8000c68 <__aeabi_fsub+0x1cc>
 8000b22:	4ab7      	ldr	r2, [pc, #732]	@ (8000e00 <__aeabi_fsub+0x364>)
 8000b24:	1a2d      	subs	r5, r5, r0
 8000b26:	401a      	ands	r2, r3
 8000b28:	4694      	mov	ip, r2
 8000b2a:	075a      	lsls	r2, r3, #29
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fsub+0x94>
 8000b2e:	e0c3      	b.n	8000cb8 <__aeabi_fsub+0x21c>
 8000b30:	220f      	movs	r2, #15
 8000b32:	4013      	ands	r3, r2
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x9e>
 8000b38:	e0be      	b.n	8000cb8 <__aeabi_fsub+0x21c>
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	4698      	mov	r8, r3
 8000b3e:	44c4      	add	ip, r8
 8000b40:	4663      	mov	r3, ip
 8000b42:	015b      	lsls	r3, r3, #5
 8000b44:	d400      	bmi.n	8000b48 <__aeabi_fsub+0xac>
 8000b46:	e0b7      	b.n	8000cb8 <__aeabi_fsub+0x21c>
 8000b48:	1c68      	adds	r0, r5, #1
 8000b4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0xb4>
 8000b4e:	e0a5      	b.n	8000c9c <__aeabi_fsub+0x200>
 8000b50:	20ff      	movs	r0, #255	@ 0xff
 8000b52:	2200      	movs	r2, #0
 8000b54:	05c0      	lsls	r0, r0, #23
 8000b56:	4310      	orrs	r0, r2
 8000b58:	07e4      	lsls	r4, r4, #31
 8000b5a:	4320      	orrs	r0, r4
 8000b5c:	bcc0      	pop	{r6, r7}
 8000b5e:	46b9      	mov	r9, r7
 8000b60:	46b0      	mov	r8, r6
 8000b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	dc00      	bgt.n	8000b6a <__aeabi_fsub+0xce>
 8000b68:	e1eb      	b.n	8000f42 <__aeabi_fsub+0x4a6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d046      	beq.n	8000bfc <__aeabi_fsub+0x160>
 8000b6e:	2dff      	cmp	r5, #255	@ 0xff
 8000b70:	d100      	bne.n	8000b74 <__aeabi_fsub+0xd8>
 8000b72:	e0a4      	b.n	8000cbe <__aeabi_fsub+0x222>
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	04d2      	lsls	r2, r2, #19
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	2b1b      	cmp	r3, #27
 8000b7c:	dc00      	bgt.n	8000b80 <__aeabi_fsub+0xe4>
 8000b7e:	e0fb      	b.n	8000d78 <__aeabi_fsub+0x2dc>
 8000b80:	2305      	movs	r3, #5
 8000b82:	4698      	mov	r8, r3
 8000b84:	002b      	movs	r3, r5
 8000b86:	44c4      	add	ip, r8
 8000b88:	4662      	mov	r2, ip
 8000b8a:	08d7      	lsrs	r7, r2, #3
 8000b8c:	2bff      	cmp	r3, #255	@ 0xff
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0xf6>
 8000b90:	e095      	b.n	8000cbe <__aeabi_fsub+0x222>
 8000b92:	027a      	lsls	r2, r7, #9
 8000b94:	0a52      	lsrs	r2, r2, #9
 8000b96:	b2d8      	uxtb	r0, r3
 8000b98:	e7dc      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000b9a:	002b      	movs	r3, r5
 8000b9c:	3bff      	subs	r3, #255	@ 0xff
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	d118      	bne.n	8000bd6 <__aeabi_fsub+0x13a>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	405e      	eors	r6, r3
 8000ba8:	42b4      	cmp	r4, r6
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x112>
 8000bac:	e0ca      	b.n	8000d44 <__aeabi_fsub+0x2a8>
 8000bae:	464b      	mov	r3, r9
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d02d      	beq.n	8000c10 <__aeabi_fsub+0x174>
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fsub+0x11e>
 8000bb8:	e13c      	b.n	8000e34 <__aeabi_fsub+0x398>
 8000bba:	23ff      	movs	r3, #255	@ 0xff
 8000bbc:	4664      	mov	r4, ip
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x128>
 8000bc2:	e15f      	b.n	8000e84 <__aeabi_fsub+0x3e8>
 8000bc4:	1e5d      	subs	r5, r3, #1
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x130>
 8000bca:	e174      	b.n	8000eb6 <__aeabi_fsub+0x41a>
 8000bcc:	0034      	movs	r4, r6
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d074      	beq.n	8000cbc <__aeabi_fsub+0x220>
 8000bd2:	002b      	movs	r3, r5
 8000bd4:	e103      	b.n	8000dde <__aeabi_fsub+0x342>
 8000bd6:	42b4      	cmp	r4, r6
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fsub+0x140>
 8000bda:	e09c      	b.n	8000d16 <__aeabi_fsub+0x27a>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d017      	beq.n	8000c10 <__aeabi_fsub+0x174>
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d0ea      	beq.n	8000bba <__aeabi_fsub+0x11e>
 8000be4:	0007      	movs	r7, r0
 8000be6:	0034      	movs	r4, r6
 8000be8:	e06c      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d0cc      	beq.n	8000b88 <__aeabi_fsub+0xec>
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d02b      	beq.n	8000c4c <__aeabi_fsub+0x1b0>
 8000bf4:	2bff      	cmp	r3, #255	@ 0xff
 8000bf6:	d062      	beq.n	8000cbe <__aeabi_fsub+0x222>
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	e773      	b.n	8000ae4 <__aeabi_fsub+0x48>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d0c3      	beq.n	8000b88 <__aeabi_fsub+0xec>
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x16c>
 8000c06:	e11e      	b.n	8000e46 <__aeabi_fsub+0x3aa>
 8000c08:	2bff      	cmp	r3, #255	@ 0xff
 8000c0a:	d058      	beq.n	8000cbe <__aeabi_fsub+0x222>
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	e7b4      	b.n	8000b7a <__aeabi_fsub+0xde>
 8000c10:	22fe      	movs	r2, #254	@ 0xfe
 8000c12:	1c6b      	adds	r3, r5, #1
 8000c14:	421a      	tst	r2, r3
 8000c16:	d10d      	bne.n	8000c34 <__aeabi_fsub+0x198>
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d060      	beq.n	8000cde <__aeabi_fsub+0x242>
 8000c1c:	4663      	mov	r3, ip
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fsub+0x188>
 8000c22:	e120      	b.n	8000e66 <__aeabi_fsub+0x3ca>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fsub+0x18e>
 8000c28:	e128      	b.n	8000e7c <__aeabi_fsub+0x3e0>
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	20ff      	movs	r0, #255	@ 0xff
 8000c30:	03d2      	lsls	r2, r2, #15
 8000c32:	e78f      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000c34:	4663      	mov	r3, ip
 8000c36:	1a5f      	subs	r7, r3, r1
 8000c38:	017b      	lsls	r3, r7, #5
 8000c3a:	d500      	bpl.n	8000c3e <__aeabi_fsub+0x1a2>
 8000c3c:	e0fe      	b.n	8000e3c <__aeabi_fsub+0x3a0>
 8000c3e:	2f00      	cmp	r7, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_fsub+0x1a8>
 8000c42:	e765      	b.n	8000b10 <__aeabi_fsub+0x74>
 8000c44:	2400      	movs	r4, #0
 8000c46:	2000      	movs	r0, #0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e783      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	1a59      	subs	r1, r3, r1
 8000c50:	014b      	lsls	r3, r1, #5
 8000c52:	d400      	bmi.n	8000c56 <__aeabi_fsub+0x1ba>
 8000c54:	e119      	b.n	8000e8a <__aeabi_fsub+0x3ee>
 8000c56:	018f      	lsls	r7, r1, #6
 8000c58:	09bf      	lsrs	r7, r7, #6
 8000c5a:	0038      	movs	r0, r7
 8000c5c:	f000 f9d2 	bl	8001004 <__clzsi2>
 8000c60:	003b      	movs	r3, r7
 8000c62:	3805      	subs	r0, #5
 8000c64:	4083      	lsls	r3, r0
 8000c66:	2501      	movs	r5, #1
 8000c68:	2220      	movs	r2, #32
 8000c6a:	1b40      	subs	r0, r0, r5
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	4093      	lsls	r3, r2
 8000c74:	40c1      	lsrs	r1, r0
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	4193      	sbcs	r3, r2
 8000c7a:	4319      	orrs	r1, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	1e0b      	subs	r3, r1, #0
 8000c80:	d0e1      	beq.n	8000c46 <__aeabi_fsub+0x1aa>
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x1ec>
 8000c86:	e152      	b.n	8000f2e <__aeabi_fsub+0x492>
 8000c88:	230f      	movs	r3, #15
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fsub+0x1f8>
 8000c92:	e752      	b.n	8000b3a <__aeabi_fsub+0x9e>
 8000c94:	2001      	movs	r0, #1
 8000c96:	014a      	lsls	r2, r1, #5
 8000c98:	d400      	bmi.n	8000c9c <__aeabi_fsub+0x200>
 8000c9a:	e092      	b.n	8000dc2 <__aeabi_fsub+0x326>
 8000c9c:	b2c0      	uxtb	r0, r0
 8000c9e:	4663      	mov	r3, ip
 8000ca0:	019a      	lsls	r2, r3, #6
 8000ca2:	0a52      	lsrs	r2, r2, #9
 8000ca4:	e756      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	075b      	lsls	r3, r3, #29
 8000caa:	d005      	beq.n	8000cb8 <__aeabi_fsub+0x21c>
 8000cac:	230f      	movs	r3, #15
 8000cae:	4662      	mov	r2, ip
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fsub+0x21c>
 8000cb6:	e740      	b.n	8000b3a <__aeabi_fsub+0x9e>
 8000cb8:	002b      	movs	r3, r5
 8000cba:	e765      	b.n	8000b88 <__aeabi_fsub+0xec>
 8000cbc:	0007      	movs	r7, r0
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_fsub+0x228>
 8000cc2:	e745      	b.n	8000b50 <__aeabi_fsub+0xb4>
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	03d2      	lsls	r2, r2, #15
 8000cc8:	433a      	orrs	r2, r7
 8000cca:	0252      	lsls	r2, r2, #9
 8000ccc:	20ff      	movs	r0, #255	@ 0xff
 8000cce:	0a52      	lsrs	r2, r2, #9
 8000cd0:	e740      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d179      	bne.n	8000dca <__aeabi_fsub+0x32e>
 8000cd6:	22fe      	movs	r2, #254	@ 0xfe
 8000cd8:	1c6b      	adds	r3, r5, #1
 8000cda:	421a      	tst	r2, r3
 8000cdc:	d1aa      	bne.n	8000c34 <__aeabi_fsub+0x198>
 8000cde:	4663      	mov	r3, ip
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_fsub+0x24a>
 8000ce4:	e0f5      	b.n	8000ed2 <__aeabi_fsub+0x436>
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x250>
 8000cea:	e0d1      	b.n	8000e90 <__aeabi_fsub+0x3f4>
 8000cec:	1a5f      	subs	r7, r3, r1
 8000cee:	2380      	movs	r3, #128	@ 0x80
 8000cf0:	04db      	lsls	r3, r3, #19
 8000cf2:	421f      	tst	r7, r3
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x25c>
 8000cf6:	e10e      	b.n	8000f16 <__aeabi_fsub+0x47a>
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	2401      	movs	r4, #1
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	4694      	mov	ip, r2
 8000d00:	2000      	movs	r0, #0
 8000d02:	4034      	ands	r4, r6
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fsub+0x26e>
 8000d08:	e724      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	421a      	tst	r2, r3
 8000d0e:	d1c6      	bne.n	8000c9e <__aeabi_fsub+0x202>
 8000d10:	2300      	movs	r3, #0
 8000d12:	08d7      	lsrs	r7, r2, #3
 8000d14:	e73d      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d017      	beq.n	8000d4a <__aeabi_fsub+0x2ae>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x284>
 8000d1e:	e0af      	b.n	8000e80 <__aeabi_fsub+0x3e4>
 8000d20:	23ff      	movs	r3, #255	@ 0xff
 8000d22:	4665      	mov	r5, ip
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_fsub+0x28e>
 8000d28:	e0ad      	b.n	8000e86 <__aeabi_fsub+0x3ea>
 8000d2a:	1e5e      	subs	r6, r3, #1
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x296>
 8000d30:	e089      	b.n	8000e46 <__aeabi_fsub+0x3aa>
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d0c2      	beq.n	8000cbc <__aeabi_fsub+0x220>
 8000d36:	2e1b      	cmp	r6, #27
 8000d38:	dc00      	bgt.n	8000d3c <__aeabi_fsub+0x2a0>
 8000d3a:	e0ab      	b.n	8000e94 <__aeabi_fsub+0x3f8>
 8000d3c:	1d4b      	adds	r3, r1, #5
 8000d3e:	469c      	mov	ip, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	e721      	b.n	8000b88 <__aeabi_fsub+0xec>
 8000d44:	464b      	mov	r3, r9
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d170      	bne.n	8000e2c <__aeabi_fsub+0x390>
 8000d4a:	22fe      	movs	r2, #254	@ 0xfe
 8000d4c:	1c6b      	adds	r3, r5, #1
 8000d4e:	421a      	tst	r2, r3
 8000d50:	d15e      	bne.n	8000e10 <__aeabi_fsub+0x374>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fsub+0x2bc>
 8000d56:	e0c3      	b.n	8000ee0 <__aeabi_fsub+0x444>
 8000d58:	4663      	mov	r3, ip
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fsub+0x2c4>
 8000d5e:	e0d0      	b.n	8000f02 <__aeabi_fsub+0x466>
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x2ca>
 8000d64:	e094      	b.n	8000e90 <__aeabi_fsub+0x3f4>
 8000d66:	000a      	movs	r2, r1
 8000d68:	4462      	add	r2, ip
 8000d6a:	0153      	lsls	r3, r2, #5
 8000d6c:	d400      	bmi.n	8000d70 <__aeabi_fsub+0x2d4>
 8000d6e:	e0d8      	b.n	8000f22 <__aeabi_fsub+0x486>
 8000d70:	0192      	lsls	r2, r2, #6
 8000d72:	2001      	movs	r0, #1
 8000d74:	0a52      	lsrs	r2, r2, #9
 8000d76:	e6ed      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000d78:	0008      	movs	r0, r1
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	40d8      	lsrs	r0, r3
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4099      	lsls	r1, r3
 8000d82:	000b      	movs	r3, r1
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	4193      	sbcs	r3, r2
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	449c      	add	ip, r3
 8000d8c:	4663      	mov	r3, ip
 8000d8e:	015b      	lsls	r3, r3, #5
 8000d90:	d589      	bpl.n	8000ca6 <__aeabi_fsub+0x20a>
 8000d92:	3501      	adds	r5, #1
 8000d94:	2dff      	cmp	r5, #255	@ 0xff
 8000d96:	d100      	bne.n	8000d9a <__aeabi_fsub+0x2fe>
 8000d98:	e6da      	b.n	8000b50 <__aeabi_fsub+0xb4>
 8000d9a:	4662      	mov	r2, ip
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	4919      	ldr	r1, [pc, #100]	@ (8000e04 <__aeabi_fsub+0x368>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	0852      	lsrs	r2, r2, #1
 8000da4:	400a      	ands	r2, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	4694      	mov	ip, r2
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	d004      	beq.n	8000dba <__aeabi_fsub+0x31e>
 8000db0:	230f      	movs	r3, #15
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d000      	beq.n	8000dba <__aeabi_fsub+0x31e>
 8000db8:	e6bf      	b.n	8000b3a <__aeabi_fsub+0x9e>
 8000dba:	4663      	mov	r3, ip
 8000dbc:	015b      	lsls	r3, r3, #5
 8000dbe:	d500      	bpl.n	8000dc2 <__aeabi_fsub+0x326>
 8000dc0:	e6c2      	b.n	8000b48 <__aeabi_fsub+0xac>
 8000dc2:	4663      	mov	r3, ip
 8000dc4:	08df      	lsrs	r7, r3, #3
 8000dc6:	002b      	movs	r3, r5
 8000dc8:	e6e3      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000dca:	1b53      	subs	r3, r2, r5
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_fsub+0x336>
 8000dd0:	e6f4      	b.n	8000bbc <__aeabi_fsub+0x120>
 8000dd2:	2080      	movs	r0, #128	@ 0x80
 8000dd4:	4664      	mov	r4, ip
 8000dd6:	04c0      	lsls	r0, r0, #19
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	46a4      	mov	ip, r4
 8000ddc:	0034      	movs	r4, r6
 8000dde:	2001      	movs	r0, #1
 8000de0:	2b1b      	cmp	r3, #27
 8000de2:	dc09      	bgt.n	8000df8 <__aeabi_fsub+0x35c>
 8000de4:	2520      	movs	r5, #32
 8000de6:	4660      	mov	r0, ip
 8000de8:	40d8      	lsrs	r0, r3
 8000dea:	1aeb      	subs	r3, r5, r3
 8000dec:	4665      	mov	r5, ip
 8000dee:	409d      	lsls	r5, r3
 8000df0:	002b      	movs	r3, r5
 8000df2:	1e5d      	subs	r5, r3, #1
 8000df4:	41ab      	sbcs	r3, r5
 8000df6:	4318      	orrs	r0, r3
 8000df8:	1a0b      	subs	r3, r1, r0
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	0015      	movs	r5, r2
 8000dfe:	e680      	b.n	8000b02 <__aeabi_fsub+0x66>
 8000e00:	fbffffff 	.word	0xfbffffff
 8000e04:	7dffffff 	.word	0x7dffffff
 8000e08:	22fe      	movs	r2, #254	@ 0xfe
 8000e0a:	1c6b      	adds	r3, r5, #1
 8000e0c:	4213      	tst	r3, r2
 8000e0e:	d0a3      	beq.n	8000d58 <__aeabi_fsub+0x2bc>
 8000e10:	2bff      	cmp	r3, #255	@ 0xff
 8000e12:	d100      	bne.n	8000e16 <__aeabi_fsub+0x37a>
 8000e14:	e69c      	b.n	8000b50 <__aeabi_fsub+0xb4>
 8000e16:	4461      	add	r1, ip
 8000e18:	0849      	lsrs	r1, r1, #1
 8000e1a:	074a      	lsls	r2, r1, #29
 8000e1c:	d049      	beq.n	8000eb2 <__aeabi_fsub+0x416>
 8000e1e:	220f      	movs	r2, #15
 8000e20:	400a      	ands	r2, r1
 8000e22:	2a04      	cmp	r2, #4
 8000e24:	d045      	beq.n	8000eb2 <__aeabi_fsub+0x416>
 8000e26:	1d0a      	adds	r2, r1, #4
 8000e28:	4694      	mov	ip, r2
 8000e2a:	e6ad      	b.n	8000b88 <__aeabi_fsub+0xec>
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x396>
 8000e30:	e776      	b.n	8000d20 <__aeabi_fsub+0x284>
 8000e32:	e68d      	b.n	8000b50 <__aeabi_fsub+0xb4>
 8000e34:	0034      	movs	r4, r6
 8000e36:	20ff      	movs	r0, #255	@ 0xff
 8000e38:	2200      	movs	r2, #0
 8000e3a:	e68b      	b.n	8000b54 <__aeabi_fsub+0xb8>
 8000e3c:	4663      	mov	r3, ip
 8000e3e:	2401      	movs	r4, #1
 8000e40:	1acf      	subs	r7, r1, r3
 8000e42:	4034      	ands	r4, r6
 8000e44:	e664      	b.n	8000b10 <__aeabi_fsub+0x74>
 8000e46:	4461      	add	r1, ip
 8000e48:	014b      	lsls	r3, r1, #5
 8000e4a:	d56d      	bpl.n	8000f28 <__aeabi_fsub+0x48c>
 8000e4c:	0848      	lsrs	r0, r1, #1
 8000e4e:	4944      	ldr	r1, [pc, #272]	@ (8000f60 <__aeabi_fsub+0x4c4>)
 8000e50:	4001      	ands	r1, r0
 8000e52:	0743      	lsls	r3, r0, #29
 8000e54:	d02c      	beq.n	8000eb0 <__aeabi_fsub+0x414>
 8000e56:	230f      	movs	r3, #15
 8000e58:	4003      	ands	r3, r0
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d028      	beq.n	8000eb0 <__aeabi_fsub+0x414>
 8000e5e:	1d0b      	adds	r3, r1, #4
 8000e60:	469c      	mov	ip, r3
 8000e62:	2302      	movs	r3, #2
 8000e64:	e690      	b.n	8000b88 <__aeabi_fsub+0xec>
 8000e66:	2900      	cmp	r1, #0
 8000e68:	d100      	bne.n	8000e6c <__aeabi_fsub+0x3d0>
 8000e6a:	e72b      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	03db      	lsls	r3, r3, #15
 8000e70:	429f      	cmp	r7, r3
 8000e72:	d200      	bcs.n	8000e76 <__aeabi_fsub+0x3da>
 8000e74:	e726      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d300      	bcc.n	8000e7c <__aeabi_fsub+0x3e0>
 8000e7a:	e723      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000e7c:	2401      	movs	r4, #1
 8000e7e:	4034      	ands	r4, r6
 8000e80:	0007      	movs	r7, r0
 8000e82:	e71f      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000e84:	0034      	movs	r4, r6
 8000e86:	468c      	mov	ip, r1
 8000e88:	e67e      	b.n	8000b88 <__aeabi_fsub+0xec>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	08cf      	lsrs	r7, r1, #3
 8000e8e:	e680      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000e90:	2300      	movs	r3, #0
 8000e92:	e67e      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000e94:	2020      	movs	r0, #32
 8000e96:	4665      	mov	r5, ip
 8000e98:	1b80      	subs	r0, r0, r6
 8000e9a:	4085      	lsls	r5, r0
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	40f3      	lsrs	r3, r6
 8000ea2:	1e45      	subs	r5, r0, #1
 8000ea4:	41a8      	sbcs	r0, r5
 8000ea6:	4303      	orrs	r3, r0
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0015      	movs	r5, r2
 8000eac:	448c      	add	ip, r1
 8000eae:	e76d      	b.n	8000d8c <__aeabi_fsub+0x2f0>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	08cf      	lsrs	r7, r1, #3
 8000eb4:	e66d      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000eb6:	1b0f      	subs	r7, r1, r4
 8000eb8:	017b      	lsls	r3, r7, #5
 8000eba:	d528      	bpl.n	8000f0e <__aeabi_fsub+0x472>
 8000ebc:	01bf      	lsls	r7, r7, #6
 8000ebe:	09bf      	lsrs	r7, r7, #6
 8000ec0:	0038      	movs	r0, r7
 8000ec2:	f000 f89f 	bl	8001004 <__clzsi2>
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	3805      	subs	r0, #5
 8000eca:	4083      	lsls	r3, r0
 8000ecc:	0034      	movs	r4, r6
 8000ece:	2501      	movs	r5, #1
 8000ed0:	e6ca      	b.n	8000c68 <__aeabi_fsub+0x1cc>
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x43c>
 8000ed6:	e6b5      	b.n	8000c44 <__aeabi_fsub+0x1a8>
 8000ed8:	2401      	movs	r4, #1
 8000eda:	0007      	movs	r7, r0
 8000edc:	4034      	ands	r4, r6
 8000ede:	e658      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000ee0:	4663      	mov	r3, ip
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0x44c>
 8000ee6:	e6e9      	b.n	8000cbc <__aeabi_fsub+0x220>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x452>
 8000eec:	e6ea      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	03db      	lsls	r3, r3, #15
 8000ef2:	429f      	cmp	r7, r3
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_fsub+0x45c>
 8000ef6:	e6e5      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	d300      	bcc.n	8000efe <__aeabi_fsub+0x462>
 8000efc:	e6e2      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000efe:	0007      	movs	r7, r0
 8000f00:	e6e0      	b.n	8000cc4 <__aeabi_fsub+0x228>
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x46c>
 8000f06:	e69e      	b.n	8000c46 <__aeabi_fsub+0x1aa>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	08cf      	lsrs	r7, r1, #3
 8000f0c:	e641      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000f0e:	0034      	movs	r4, r6
 8000f10:	2301      	movs	r3, #1
 8000f12:	08ff      	lsrs	r7, r7, #3
 8000f14:	e63d      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0x480>
 8000f1a:	e693      	b.n	8000c44 <__aeabi_fsub+0x1a8>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	08ff      	lsrs	r7, r7, #3
 8000f20:	e637      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000f22:	2300      	movs	r3, #0
 8000f24:	08d7      	lsrs	r7, r2, #3
 8000f26:	e634      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	08cf      	lsrs	r7, r1, #3
 8000f2c:	e631      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000f2e:	2280      	movs	r2, #128	@ 0x80
 8000f30:	000b      	movs	r3, r1
 8000f32:	04d2      	lsls	r2, r2, #19
 8000f34:	2001      	movs	r0, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	4211      	tst	r1, r2
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x4a2>
 8000f3c:	e6ae      	b.n	8000c9c <__aeabi_fsub+0x200>
 8000f3e:	08cf      	lsrs	r7, r1, #3
 8000f40:	e627      	b.n	8000b92 <__aeabi_fsub+0xf6>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x4ac>
 8000f46:	e75f      	b.n	8000e08 <__aeabi_fsub+0x36c>
 8000f48:	1b56      	subs	r6, r2, r5
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fsub+0x4b6>
 8000f4e:	0033      	movs	r3, r6
 8000f50:	e6e7      	b.n	8000d22 <__aeabi_fsub+0x286>
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	4660      	mov	r0, ip
 8000f56:	04db      	lsls	r3, r3, #19
 8000f58:	4318      	orrs	r0, r3
 8000f5a:	4684      	mov	ip, r0
 8000f5c:	e6eb      	b.n	8000d36 <__aeabi_fsub+0x29a>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	7dffffff 	.word	0x7dffffff

08000f64 <__aeabi_i2f>:
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d012      	beq.n	8000f90 <__aeabi_i2f+0x2c>
 8000f6a:	17c3      	asrs	r3, r0, #31
 8000f6c:	18c5      	adds	r5, r0, r3
 8000f6e:	405d      	eors	r5, r3
 8000f70:	0fc4      	lsrs	r4, r0, #31
 8000f72:	0028      	movs	r0, r5
 8000f74:	f000 f846 	bl	8001004 <__clzsi2>
 8000f78:	239e      	movs	r3, #158	@ 0x9e
 8000f7a:	1a1b      	subs	r3, r3, r0
 8000f7c:	2b96      	cmp	r3, #150	@ 0x96
 8000f7e:	dc0f      	bgt.n	8000fa0 <__aeabi_i2f+0x3c>
 8000f80:	2808      	cmp	r0, #8
 8000f82:	d038      	beq.n	8000ff6 <__aeabi_i2f+0x92>
 8000f84:	3808      	subs	r0, #8
 8000f86:	4085      	lsls	r5, r0
 8000f88:	026d      	lsls	r5, r5, #9
 8000f8a:	0a6d      	lsrs	r5, r5, #9
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	e002      	b.n	8000f96 <__aeabi_i2f+0x32>
 8000f90:	2400      	movs	r4, #0
 8000f92:	2000      	movs	r0, #0
 8000f94:	2500      	movs	r5, #0
 8000f96:	05c0      	lsls	r0, r0, #23
 8000f98:	4328      	orrs	r0, r5
 8000f9a:	07e4      	lsls	r4, r4, #31
 8000f9c:	4320      	orrs	r0, r4
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
 8000fa0:	2b99      	cmp	r3, #153	@ 0x99
 8000fa2:	dc14      	bgt.n	8000fce <__aeabi_i2f+0x6a>
 8000fa4:	1f42      	subs	r2, r0, #5
 8000fa6:	4095      	lsls	r5, r2
 8000fa8:	002a      	movs	r2, r5
 8000faa:	4915      	ldr	r1, [pc, #84]	@ (8001000 <__aeabi_i2f+0x9c>)
 8000fac:	4011      	ands	r1, r2
 8000fae:	0755      	lsls	r5, r2, #29
 8000fb0:	d01c      	beq.n	8000fec <__aeabi_i2f+0x88>
 8000fb2:	250f      	movs	r5, #15
 8000fb4:	402a      	ands	r2, r5
 8000fb6:	2a04      	cmp	r2, #4
 8000fb8:	d018      	beq.n	8000fec <__aeabi_i2f+0x88>
 8000fba:	3104      	adds	r1, #4
 8000fbc:	08ca      	lsrs	r2, r1, #3
 8000fbe:	0149      	lsls	r1, r1, #5
 8000fc0:	d515      	bpl.n	8000fee <__aeabi_i2f+0x8a>
 8000fc2:	239f      	movs	r3, #159	@ 0x9f
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	1a18      	subs	r0, r3, r0
 8000fc8:	0a55      	lsrs	r5, r2, #9
 8000fca:	b2c0      	uxtb	r0, r0
 8000fcc:	e7e3      	b.n	8000f96 <__aeabi_i2f+0x32>
 8000fce:	2205      	movs	r2, #5
 8000fd0:	0029      	movs	r1, r5
 8000fd2:	1a12      	subs	r2, r2, r0
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	321b      	adds	r2, #27
 8000fda:	4095      	lsls	r5, r2
 8000fdc:	002a      	movs	r2, r5
 8000fde:	1e55      	subs	r5, r2, #1
 8000fe0:	41aa      	sbcs	r2, r5
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	4906      	ldr	r1, [pc, #24]	@ (8001000 <__aeabi_i2f+0x9c>)
 8000fe6:	4011      	ands	r1, r2
 8000fe8:	0755      	lsls	r5, r2, #29
 8000fea:	d1e2      	bne.n	8000fb2 <__aeabi_i2f+0x4e>
 8000fec:	08ca      	lsrs	r2, r1, #3
 8000fee:	0252      	lsls	r2, r2, #9
 8000ff0:	0a55      	lsrs	r5, r2, #9
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	e7cf      	b.n	8000f96 <__aeabi_i2f+0x32>
 8000ff6:	026d      	lsls	r5, r5, #9
 8000ff8:	0a6d      	lsrs	r5, r5, #9
 8000ffa:	308e      	adds	r0, #142	@ 0x8e
 8000ffc:	e7cb      	b.n	8000f96 <__aeabi_i2f+0x32>
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	fbffffff 	.word	0xfbffffff

08001004 <__clzsi2>:
 8001004:	211c      	movs	r1, #28
 8001006:	2301      	movs	r3, #1
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	4298      	cmp	r0, r3
 800100c:	d301      	bcc.n	8001012 <__clzsi2+0xe>
 800100e:	0c00      	lsrs	r0, r0, #16
 8001010:	3910      	subs	r1, #16
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	4298      	cmp	r0, r3
 8001016:	d301      	bcc.n	800101c <__clzsi2+0x18>
 8001018:	0a00      	lsrs	r0, r0, #8
 800101a:	3908      	subs	r1, #8
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	4298      	cmp	r0, r3
 8001020:	d301      	bcc.n	8001026 <__clzsi2+0x22>
 8001022:	0900      	lsrs	r0, r0, #4
 8001024:	3904      	subs	r1, #4
 8001026:	a202      	add	r2, pc, #8	@ (adr r2, 8001030 <__clzsi2+0x2c>)
 8001028:	5c10      	ldrb	r0, [r2, r0]
 800102a:	1840      	adds	r0, r0, r1
 800102c:	4770      	bx	lr
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	02020304 	.word	0x02020304
 8001034:	01010101 	.word	0x01010101
	...

08001040 <Ds18b20_Init>:
#endif

//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void	Ds18b20_Init(osPriority Priority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	0002      	movs	r2, r0
 8001048:	1dbb      	adds	r3, r7, #6
 800104a:	801a      	strh	r2, [r3, #0]
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
 800104c:	210c      	movs	r1, #12
 800104e:	187b      	adds	r3, r7, r1
 8001050:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <Ds18b20_Init+0x54>)
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	187b      	adds	r3, r7, r1
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <Ds18b20_Init+0x58>)
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	187b      	adds	r3, r7, r1
 800105c:	1dba      	adds	r2, r7, #6
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	811a      	strh	r2, [r3, #8]
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2100      	movs	r1, #0
 800107e:	0018      	movs	r0, r3
 8001080:	f002 fba9 	bl	80037d6 <osThreadCreate>
 8001084:	0002      	movs	r2, r0
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <Ds18b20_Init+0x5c>)
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b00a      	add	sp, #40	@ 0x28
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	08004a34 	.word	0x08004a34
 8001098:	080010a1 	.word	0x080010a1
 800109c:	20000058 	.word	0x20000058

080010a0 <Task_Ds18b20>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Task_Ds18b20(void const * argument)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 80010a8:	230f      	movs	r3, #15
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	2205      	movs	r2, #5
 80010ae:	701a      	strb	r2, [r3, #0]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80010b0:	2390      	movs	r3, #144	@ 0x90
 80010b2:	05d9      	lsls	r1, r3, #23
 80010b4:	4b7d      	ldr	r3, [pc, #500]	@ (80012ac <Task_Ds18b20+0x20c>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fd63 	bl	8001b84 <OneWire_Init>
		TempSensorCount = 0;	
 80010be:	4b7c      	ldr	r3, [pc, #496]	@ (80012b0 <Task_Ds18b20+0x210>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80010c4:	e002      	b.n	80010cc <Task_Ds18b20+0x2c>
			Ds18b20Delay(100);
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f002 fbd2 	bl	8003870 <osDelay>
		while(HAL_GetTick() < 3000)
 80010cc:	f001 f9d2 	bl	8002474 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	4a78      	ldr	r2, [pc, #480]	@ (80012b4 <Task_Ds18b20+0x214>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d9f6      	bls.n	80010c6 <Task_Ds18b20+0x26>
		OneWireDevices = OneWire_First(&OneWire);
 80010d8:	4b74      	ldr	r3, [pc, #464]	@ (80012ac <Task_Ds18b20+0x20c>)
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 fe81 	bl	8001de2 <OneWire_First>
 80010e0:	0003      	movs	r3, r0
 80010e2:	001a      	movs	r2, r3
 80010e4:	4b74      	ldr	r3, [pc, #464]	@ (80012b8 <Task_Ds18b20+0x218>)
 80010e6:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80010e8:	e01b      	b.n	8001122 <Task_Ds18b20+0x82>
		{
			Ds18b20Delay(100);
 80010ea:	2064      	movs	r0, #100	@ 0x64
 80010ec:	f002 fbc0 	bl	8003870 <osDelay>
			TempSensorCount++;
 80010f0:	4b6f      	ldr	r3, [pc, #444]	@ (80012b0 <Task_Ds18b20+0x210>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b6d      	ldr	r3, [pc, #436]	@ (80012b0 <Task_Ds18b20+0x210>)
 80010fa:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 80010fc:	4b6c      	ldr	r3, [pc, #432]	@ (80012b0 <Task_Ds18b20+0x210>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	011a      	lsls	r2, r3, #4
 8001104:	4b6d      	ldr	r3, [pc, #436]	@ (80012bc <Task_Ds18b20+0x21c>)
 8001106:	18d2      	adds	r2, r2, r3
 8001108:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <Task_Ds18b20+0x20c>)
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f000 ffe0 	bl	80020d2 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8001112:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <Task_Ds18b20+0x20c>)
 8001114:	0018      	movs	r0, r3
 8001116:	f000 fe76 	bl	8001e06 <OneWire_Next>
 800111a:	0003      	movs	r3, r0
 800111c:	001a      	movs	r2, r3
 800111e:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <Task_Ds18b20+0x218>)
 8001120:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8001122:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <Task_Ds18b20+0x218>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1df      	bne.n	80010ea <Task_Ds18b20+0x4a>
		}
		if(TempSensorCount>0)
 800112a:	4b61      	ldr	r3, [pc, #388]	@ (80012b0 <Task_Ds18b20+0x210>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10a      	bne.n	8001148 <Task_Ds18b20+0xa8>
			break;
		Ds18b20TryToFind--;
 8001132:	210f      	movs	r1, #15
 8001134:	187b      	adds	r3, r7, r1
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	187b      	adds	r3, r7, r1
 800113a:	3a01      	subs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
	}while(Ds18b20TryToFind>0);
 800113e:	187b      	adds	r3, r7, r1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1b4      	bne.n	80010b0 <Task_Ds18b20+0x10>
 8001146:	e000      	b.n	800114a <Task_Ds18b20+0xaa>
			break;
 8001148:	46c0      	nop			@ (mov r8, r8)
	if(Ds18b20TryToFind==0)
 800114a:	230f      	movs	r3, #15
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d104      	bne.n	800115e <Task_Ds18b20+0xbe>
		vTaskDelete(Ds18b20Handle);
 8001154:	4b5a      	ldr	r3, [pc, #360]	@ (80012c0 <Task_Ds18b20+0x220>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0018      	movs	r0, r3
 800115a:	f002 fdb7 	bl	8003ccc <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800115e:	230e      	movs	r3, #14
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	e01f      	b.n	80011a8 <Task_Ds18b20+0x108>
	{
		Ds18b20Delay(50);
 8001168:	2032      	movs	r0, #50	@ 0x32
 800116a:	f002 fb81 	bl	8003870 <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 800116e:	240e      	movs	r4, #14
 8001170:	193b      	adds	r3, r7, r4
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	011a      	lsls	r2, r3, #4
 8001176:	4b51      	ldr	r3, [pc, #324]	@ (80012bc <Task_Ds18b20+0x21c>)
 8001178:	18d1      	adds	r1, r2, r3
 800117a:	4b4c      	ldr	r3, [pc, #304]	@ (80012ac <Task_Ds18b20+0x20c>)
 800117c:	220c      	movs	r2, #12
 800117e:	0018      	movs	r0, r3
 8001180:	f000 f9e2 	bl	8001548 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8001184:	2032      	movs	r0, #50	@ 0x32
 8001186:	f002 fb73 	bl	8003870 <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 800118a:	193b      	adds	r3, r7, r4
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	011a      	lsls	r2, r3, #4
 8001190:	4b4a      	ldr	r3, [pc, #296]	@ (80012bc <Task_Ds18b20+0x21c>)
 8001192:	18d2      	adds	r2, r2, r3
 8001194:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <Task_Ds18b20+0x20c>)
 8001196:	0011      	movs	r1, r2
 8001198:	0018      	movs	r0, r3
 800119a:	f000 faa3 	bl	80016e4 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	3201      	adds	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	4b41      	ldr	r3, [pc, #260]	@ (80012b0 <Task_Ds18b20+0x210>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	220e      	movs	r2, #14
 80011ae:	18ba      	adds	r2, r7, r2
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3d8      	bcc.n	8001168 <Task_Ds18b20+0xc8>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 80011b6:	46c0      	nop			@ (mov r8, r8)
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);	
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 80011b8:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <Task_Ds18b20+0x224>)
 80011ba:	22fa      	movs	r2, #250	@ 0xfa
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <Task_Ds18b20+0x20c>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f884 	bl	80012d0 <DS18B20_StartAll>
		osDelay(100);
 80011c8:	2064      	movs	r0, #100	@ 0x64
 80011ca:	f002 fb51 	bl	8003870 <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 80011ce:	e00c      	b.n	80011ea <Task_Ds18b20+0x14a>
		{
			osDelay(10);  
 80011d0:	200a      	movs	r0, #10
 80011d2:	f002 fb4d 	bl	8003870 <osDelay>
			Ds18b20Timeout-=1;
 80011d6:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <Task_Ds18b20+0x224>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b39      	ldr	r3, [pc, #228]	@ (80012c4 <Task_Ds18b20+0x224>)
 80011e0:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 80011e2:	4b38      	ldr	r3, [pc, #224]	@ (80012c4 <Task_Ds18b20+0x224>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <Task_Ds18b20+0x158>
    while (!DS18B20_AllDone(&OneWire))
 80011ea:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <Task_Ds18b20+0x20c>)
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 faf4 	bl	80017da <DS18B20_AllDone>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d0ec      	beq.n	80011d0 <Task_Ds18b20+0x130>
 80011f6:	e000      	b.n	80011fa <Task_Ds18b20+0x15a>
				break;
 80011f8:	46c0      	nop			@ (mov r8, r8)
		}	
		if(Ds18b20Timeout>0)
 80011fa:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <Task_Ds18b20+0x224>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d031      	beq.n	8001266 <Task_Ds18b20+0x1c6>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8001202:	230d      	movs	r3, #13
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e024      	b.n	8001256 <Task_Ds18b20+0x1b6>
			{
				Ds18b20Delay(1000);
 800120c:	23fa      	movs	r3, #250	@ 0xfa
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	0018      	movs	r0, r3
 8001212:	f002 fb2d 	bl	8003870 <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8001216:	250d      	movs	r5, #13
 8001218:	197b      	adds	r3, r7, r5
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	011a      	lsls	r2, r3, #4
 800121e:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <Task_Ds18b20+0x21c>)
 8001220:	18d1      	adds	r1, r2, r3
 8001222:	197b      	adds	r3, r7, r5
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	3308      	adds	r3, #8
 800122a:	001a      	movs	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <Task_Ds18b20+0x21c>)
 800122e:	18d2      	adds	r2, r2, r3
 8001230:	197b      	adds	r3, r7, r5
 8001232:	781c      	ldrb	r4, [r3, #0]
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <Task_Ds18b20+0x20c>)
 8001236:	0018      	movs	r0, r3
 8001238:	f000 f860 	bl	80012fc <DS18B20_Read>
 800123c:	0003      	movs	r3, r0
 800123e:	0019      	movs	r1, r3
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <Task_Ds18b20+0x21c>)
 8001242:	0123      	lsls	r3, r4, #4
 8001244:	18d3      	adds	r3, r2, r3
 8001246:	330c      	adds	r3, #12
 8001248:	1c0a      	adds	r2, r1, #0
 800124a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800124c:	197b      	adds	r3, r7, r5
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	197b      	adds	r3, r7, r5
 8001252:	3201      	adds	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <Task_Ds18b20+0x210>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	220d      	movs	r2, #13
 800125c:	18ba      	adds	r2, r7, r2
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d3d3      	bcc.n	800120c <Task_Ds18b20+0x16c>
 8001264:	e019      	b.n	800129a <Task_Ds18b20+0x1fa>
			}
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8001266:	230c      	movs	r3, #12
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e00d      	b.n	800128c <Task_Ds18b20+0x1ec>
				ds18b20[i].DataIsValid = false;
 8001270:	210c      	movs	r1, #12
 8001272:	187b      	adds	r3, r7, r1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <Task_Ds18b20+0x21c>)
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	18d3      	adds	r3, r2, r3
 800127c:	330c      	adds	r3, #12
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8001282:	187b      	adds	r3, r7, r1
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	187b      	adds	r3, r7, r1
 8001288:	3201      	adds	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <Task_Ds18b20+0x210>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	220c      	movs	r2, #12
 8001292:	18ba      	adds	r2, r7, r2
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3ea      	bcc.n	8001270 <Task_Ds18b20+0x1d0>
		}
		Ds18b20StartConvert=0;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <Task_Ds18b20+0x228>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <Task_Ds18b20+0x22c>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f002 fae4 	bl	8003870 <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 80012a8:	e785      	b.n	80011b6 <Task_Ds18b20+0x116>
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	2000003c 	.word	0x2000003c
 80012b0:	20000051 	.word	0x20000051
 80012b4:	00000bb7 	.word	0x00000bb7
 80012b8:	20000050 	.word	0x20000050
 80012bc:	2000002c 	.word	0x2000002c
 80012c0:	20000058 	.word	0x20000058
 80012c4:	20000054 	.word	0x20000054
 80012c8:	20000052 	.word	0x20000052
 80012cc:	00002710 	.word	0x00002710

080012d0 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fc8a 	bl	8001bf4 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	21cc      	movs	r1, #204	@ 0xcc
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 fd24 	bl	8001d32 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2144      	movs	r1, #68	@ 0x44
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 fd1f 	bl	8001d32 <OneWire_WriteByte>
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	b08b      	sub	sp, #44	@ 0x2c
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8001308:	2324      	movs	r3, #36	@ 0x24
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
	float decimal;
	uint8_t i = 0;
 8001310:	231f      	movs	r3, #31
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f9d3 	bl	80016c6 <DS18B20_Is>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d101      	bne.n	8001328 <DS18B20_Read+0x2c>
		return false;
 8001324:	2300      	movs	r3, #0
 8001326:	e108      	b.n	800153a <DS18B20_Read+0x23e>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fcd0 	bl	8001cd0 <OneWire_ReadBit>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d101      	bne.n	8001338 <DS18B20_Read+0x3c>
	{
		/* Conversion is not finished yet */
		return false; 
 8001334:	2300      	movs	r3, #0
 8001336:	e100      	b.n	800153a <DS18B20_Read+0x23e>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	0018      	movs	r0, r3
 800133c:	f000 fc5a 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fe9a 	bl	8002080 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	21be      	movs	r1, #190	@ 0xbe
 8001350:	0018      	movs	r0, r3
 8001352:	f000 fcee 	bl	8001d32 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8001356:	231f      	movs	r3, #31
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e010      	b.n	8001382 <DS18B20_Read+0x86>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8001360:	251f      	movs	r5, #31
 8001362:	197b      	adds	r3, r7, r5
 8001364:	781c      	ldrb	r4, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	0018      	movs	r0, r3
 800136a:	f000 fd0a 	bl	8001d82 <OneWire_ReadByte>
 800136e:	0003      	movs	r3, r0
 8001370:	001a      	movs	r2, r3
 8001372:	2314      	movs	r3, #20
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < 9; i++) 
 8001378:	197b      	adds	r3, r7, r5
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	197b      	adds	r3, r7, r5
 800137e:	3201      	adds	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d9e9      	bls.n	8001360 <DS18B20_Read+0x64>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 800138c:	251e      	movs	r5, #30
 800138e:	197c      	adds	r4, r7, r5
 8001390:	2614      	movs	r6, #20
 8001392:	19bb      	adds	r3, r7, r6
 8001394:	2108      	movs	r1, #8
 8001396:	0018      	movs	r0, r3
 8001398:	f000 febf 	bl	800211a <OneWire_CRC8>
 800139c:	0003      	movs	r3, r0
 800139e:	7023      	strb	r3, [r4, #0]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80013a0:	19bb      	adds	r3, r7, r6
 80013a2:	7a1b      	ldrb	r3, [r3, #8]
 80013a4:	197a      	adds	r2, r7, r5
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <DS18B20_Read+0xb4>
		/* CRC invalid */
		return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e0c4      	b.n	800153a <DS18B20_Read+0x23e>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80013b0:	2114      	movs	r1, #20
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	2426      	movs	r4, #38	@ 0x26
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	801a      	strh	r2, [r3, #0]

	/* Reset line */
	OneWire_Reset(OneWire);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 fc10 	bl	8001bf4 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	5e9b      	ldrsh	r3, [r3, r2]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da08      	bge.n	80013f0 <DS18B20_Read+0xf4>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	193a      	adds	r2, r7, r4
 80013e2:	8812      	ldrh	r2, [r2, #0]
 80013e4:	4252      	negs	r2, r2
 80013e6:	801a      	strh	r2, [r3, #0]
		minus = 1;
 80013e8:	2324      	movs	r3, #36	@ 0x24
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80013f0:	2314      	movs	r3, #20
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	115b      	asrs	r3, r3, #5
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2203      	movs	r2, #3
 80013fc:	4013      	ands	r3, r2
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	241d      	movs	r4, #29
 8001402:	193b      	adds	r3, r7, r4
 8001404:	3209      	adds	r2, #9
 8001406:	701a      	strb	r2, [r3, #0]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8001408:	2126      	movs	r1, #38	@ 0x26
 800140a:	187b      	adds	r3, r7, r1
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	b29a      	uxth	r2, r3
 8001412:	2025      	movs	r0, #37	@ 0x25
 8001414:	183b      	adds	r3, r7, r0
 8001416:	701a      	strb	r2, [r3, #0]
	digit |= ((temperature >> 8) & 0x7) << 4;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	b25b      	sxtb	r3, r3
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	b25b      	sxtb	r3, r3
 8001426:	2270      	movs	r2, #112	@ 0x70
 8001428:	4013      	ands	r3, r2
 800142a:	b259      	sxtb	r1, r3
 800142c:	183b      	adds	r3, r7, r0
 800142e:	183a      	adds	r2, r7, r0
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
	
	/* Store decimal digits */
	switch (resolution) 
 8001436:	193b      	adds	r3, r7, r4
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d047      	beq.n	80014ce <DS18B20_Read+0x1d2>
 800143e:	dc58      	bgt.n	80014f2 <DS18B20_Read+0x1f6>
 8001440:	2b0b      	cmp	r3, #11
 8001442:	d02f      	beq.n	80014a4 <DS18B20_Read+0x1a8>
 8001444:	dc55      	bgt.n	80014f2 <DS18B20_Read+0x1f6>
 8001446:	2b09      	cmp	r3, #9
 8001448:	d002      	beq.n	8001450 <DS18B20_Read+0x154>
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d015      	beq.n	800147a <DS18B20_Read+0x17e>
 800144e:	e050      	b.n	80014f2 <DS18B20_Read+0x1f6>
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8001450:	2326      	movs	r3, #38	@ 0x26
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	b29b      	uxth	r3, r3
 800145a:	001a      	movs	r2, r3
 800145c:	2301      	movs	r3, #1
 800145e:	4013      	ands	r3, r2
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fd7f 	bl	8000f64 <__aeabi_i2f>
 8001466:	1c03      	adds	r3, r0, #0
 8001468:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 800146a:	21fc      	movs	r1, #252	@ 0xfc
 800146c:	0589      	lsls	r1, r1, #22
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	f7ff f9ba 	bl	80007e8 <__aeabi_fmul>
 8001474:	1c03      	adds	r3, r0, #0
 8001476:	623b      	str	r3, [r7, #32]
		break;
 8001478:	e041      	b.n	80014fe <DS18B20_Read+0x202>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 800147a:	2326      	movs	r3, #38	@ 0x26
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	001a      	movs	r2, r3
 8001486:	2303      	movs	r3, #3
 8001488:	4013      	ands	r3, r2
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fd6a 	bl	8000f64 <__aeabi_i2f>
 8001490:	1c03      	adds	r3, r0, #0
 8001492:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001494:	21fa      	movs	r1, #250	@ 0xfa
 8001496:	0589      	lsls	r1, r1, #22
 8001498:	6a38      	ldr	r0, [r7, #32]
 800149a:	f7ff f9a5 	bl	80007e8 <__aeabi_fmul>
 800149e:	1c03      	adds	r3, r0, #0
 80014a0:	623b      	str	r3, [r7, #32]
		 break;
 80014a2:	e02c      	b.n	80014fe <DS18B20_Read+0x202>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 80014a4:	2326      	movs	r3, #38	@ 0x26
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	001a      	movs	r2, r3
 80014b0:	2307      	movs	r3, #7
 80014b2:	4013      	ands	r3, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fd55 	bl	8000f64 <__aeabi_i2f>
 80014ba:	1c03      	adds	r3, r0, #0
 80014bc:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80014be:	21f8      	movs	r1, #248	@ 0xf8
 80014c0:	0589      	lsls	r1, r1, #22
 80014c2:	6a38      	ldr	r0, [r7, #32]
 80014c4:	f7ff f990 	bl	80007e8 <__aeabi_fmul>
 80014c8:	1c03      	adds	r3, r0, #0
 80014ca:	623b      	str	r3, [r7, #32]
		break;
 80014cc:	e017      	b.n	80014fe <DS18B20_Read+0x202>
		case 12: 
			decimal = temperature & 0x0F;
 80014ce:	2326      	movs	r3, #38	@ 0x26
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	220f      	movs	r2, #15
 80014d6:	4013      	ands	r3, r2
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fd43 	bl	8000f64 <__aeabi_i2f>
 80014de:	1c03      	adds	r3, r0, #0
 80014e0:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80014e2:	21f6      	movs	r1, #246	@ 0xf6
 80014e4:	0589      	lsls	r1, r1, #22
 80014e6:	6a38      	ldr	r0, [r7, #32]
 80014e8:	f7ff f97e 	bl	80007e8 <__aeabi_fmul>
 80014ec:	1c03      	adds	r3, r0, #0
 80014ee:	623b      	str	r3, [r7, #32]
		 break;
 80014f0:	e005      	b.n	80014fe <DS18B20_Read+0x202>
		default: 
			decimal = 0xFF;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <DS18B20_Read+0x248>)
 80014f4:	623b      	str	r3, [r7, #32]
			digit = 0;
 80014f6:	2325      	movs	r3, #37	@ 0x25
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80014fe:	2325      	movs	r3, #37	@ 0x25
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25b      	sxtb	r3, r3
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fd2c 	bl	8000f64 <__aeabi_i2f>
 800150c:	1c03      	adds	r3, r0, #0
 800150e:	1c19      	adds	r1, r3, #0
 8001510:	6a38      	ldr	r0, [r7, #32]
 8001512:	f7fe febf 	bl	8000294 <__aeabi_fadd>
 8001516:	1c03      	adds	r3, r0, #0
 8001518:	623b      	str	r3, [r7, #32]
	if (minus) 
 800151a:	2324      	movs	r3, #36	@ 0x24
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <DS18B20_Read+0x236>
		decimal = 0 - decimal;
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fab7 	bl	8000a9c <__aeabi_fsub>
 800152e:	1c03      	adds	r3, r0, #0
 8001530:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a3a      	ldr	r2, [r7, #32]
 8001536:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 8001538:	2301      	movs	r3, #1
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b00b      	add	sp, #44	@ 0x2c
 8001540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	437f0000 	.word	0x437f0000

08001548 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	701a      	strb	r2, [r3, #0]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f8b4 	bl	80016c6 <DS18B20_Is>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d101      	bne.n	8001566 <DS18B20_SetResolution+0x1e>
		return 0;
 8001562:	2300      	movs	r3, #0
 8001564:	e0ab      	b.n	80016be <DS18B20_SetResolution+0x176>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	0018      	movs	r0, r3
 800156a:	f000 fb43 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 fd83 	bl	8002080 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	21be      	movs	r1, #190	@ 0xbe
 800157e:	0018      	movs	r0, r3
 8001580:	f000 fbd7 	bl	8001d32 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0018      	movs	r0, r3
 8001588:	f000 fbfb 	bl	8001d82 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fbf7 	bl	8001d82 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001594:	2316      	movs	r3, #22
 8001596:	18fc      	adds	r4, r7, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0018      	movs	r0, r3
 800159c:	f000 fbf1 	bl	8001d82 <OneWire_ReadByte>
 80015a0:	0003      	movs	r3, r0
 80015a2:	7023      	strb	r3, [r4, #0]
	tl = OneWire_ReadByte(OneWire);
 80015a4:	2315      	movs	r3, #21
 80015a6:	18fc      	adds	r4, r7, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 fbe9 	bl	8001d82 <OneWire_ReadByte>
 80015b0:	0003      	movs	r3, r0
 80015b2:	7023      	strb	r3, [r4, #0]
	conf = OneWire_ReadByte(OneWire);
 80015b4:	2517      	movs	r5, #23
 80015b6:	197c      	adds	r4, r7, r5
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 fbe1 	bl	8001d82 <OneWire_ReadByte>
 80015c0:	0003      	movs	r3, r0
 80015c2:	7023      	strb	r3, [r4, #0]
	
	if (resolution == DS18B20_Resolution_9bits) 
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d10c      	bne.n	80015e6 <DS18B20_SetResolution+0x9e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80015cc:	197b      	adds	r3, r7, r5
 80015ce:	197a      	adds	r2, r7, r5
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	438a      	bics	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80015d8:	197b      	adds	r3, r7, r5
 80015da:	197a      	adds	r2, r7, r5
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	2120      	movs	r1, #32
 80015e0:	438a      	bics	r2, r1
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e034      	b.n	8001650 <DS18B20_SetResolution+0x108>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d10d      	bne.n	800160a <DS18B20_SetResolution+0xc2>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80015ee:	2017      	movs	r0, #23
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	183a      	adds	r2, r7, r0
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	438a      	bics	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80015fc:	183b      	adds	r3, r7, r0
 80015fe:	183a      	adds	r2, r7, r0
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	2120      	movs	r1, #32
 8001604:	430a      	orrs	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e022      	b.n	8001650 <DS18B20_SetResolution+0x108>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b0b      	cmp	r3, #11
 8001610:	d10d      	bne.n	800162e <DS18B20_SetResolution+0xe6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001612:	2017      	movs	r0, #23
 8001614:	183b      	adds	r3, r7, r0
 8001616:	183a      	adds	r2, r7, r0
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	2140      	movs	r1, #64	@ 0x40
 800161c:	430a      	orrs	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001620:	183b      	adds	r3, r7, r0
 8001622:	183a      	adds	r2, r7, r0
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	2120      	movs	r1, #32
 8001628:	438a      	bics	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e010      	b.n	8001650 <DS18B20_SetResolution+0x108>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d10c      	bne.n	8001650 <DS18B20_SetResolution+0x108>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001636:	2017      	movs	r0, #23
 8001638:	183b      	adds	r3, r7, r0
 800163a:	183a      	adds	r2, r7, r0
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	430a      	orrs	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001644:	183b      	adds	r3, r7, r0
 8001646:	183a      	adds	r2, r7, r0
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	2120      	movs	r1, #32
 800164c:	430a      	orrs	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	0018      	movs	r0, r3
 8001654:	f000 face 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0011      	movs	r1, r2
 800165e:	0018      	movs	r0, r3
 8001660:	f000 fd0e 	bl	8002080 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	214e      	movs	r1, #78	@ 0x4e
 8001668:	0018      	movs	r0, r3
 800166a:	f000 fb62 	bl	8001d32 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800166e:	2316      	movs	r3, #22
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f000 fb5a 	bl	8001d32 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800167e:	2315      	movs	r3, #21
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f000 fb52 	bl	8001d32 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800168e:	2317      	movs	r3, #23
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	0011      	movs	r1, r2
 8001698:	0018      	movs	r0, r3
 800169a:	f000 fb4a 	bl	8001d32 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 faa7 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f000 fce7 	bl	8002080 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2148      	movs	r1, #72	@ 0x48
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 fb3b 	bl	8001d32 <OneWire_WriteByte>
	
	return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b006      	add	sp, #24
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}

080016c6 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b28      	cmp	r3, #40	@ 0x28
 80016d4:	d101      	bne.n	80016da <DS18B20_Is+0x14>
		return 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <DS18B20_Is+0x16>
	
	return 0;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff ffe8 	bl	80016c6 <DS18B20_Is>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d101      	bne.n	80016fe <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e069      	b.n	80017d2 <DS18B20_DisableAlarmTemperature+0xee>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f000 fa77 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0011      	movs	r1, r2
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fcb7 	bl	8002080 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	21be      	movs	r1, #190	@ 0xbe
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fb0b 	bl	8001d32 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	0018      	movs	r0, r3
 8001720:	f000 fb2f 	bl	8001d82 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 fb2b 	bl	8001d82 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800172c:	250f      	movs	r5, #15
 800172e:	197c      	adds	r4, r7, r5
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0018      	movs	r0, r3
 8001734:	f000 fb25 	bl	8001d82 <OneWire_ReadByte>
 8001738:	0003      	movs	r3, r0
 800173a:	7023      	strb	r3, [r4, #0]
	tl = OneWire_ReadByte(OneWire);
 800173c:	260e      	movs	r6, #14
 800173e:	19bc      	adds	r4, r7, r6
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0018      	movs	r0, r3
 8001744:	f000 fb1d 	bl	8001d82 <OneWire_ReadByte>
 8001748:	0003      	movs	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
	conf = OneWire_ReadByte(OneWire);
 800174c:	230d      	movs	r3, #13
 800174e:	18fc      	adds	r4, r7, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	0018      	movs	r0, r3
 8001754:	f000 fb15 	bl	8001d82 <OneWire_ReadByte>
 8001758:	0003      	movs	r3, r0
 800175a:	7023      	strb	r3, [r4, #0]
	
	th = 125;
 800175c:	197b      	adds	r3, r7, r5
 800175e:	227d      	movs	r2, #125	@ 0x7d
 8001760:	701a      	strb	r2, [r3, #0]
	tl = (uint8_t)-55;
 8001762:	19bb      	adds	r3, r7, r6
 8001764:	22c9      	movs	r2, #201	@ 0xc9
 8001766:	701a      	strb	r2, [r3, #0]

	/* Reset line */
	OneWire_Reset(OneWire);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fa42 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f000 fc82 	bl	8002080 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	214e      	movs	r1, #78	@ 0x4e
 8001780:	0018      	movs	r0, r3
 8001782:	f000 fad6 	bl	8001d32 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001786:	197b      	adds	r3, r7, r5
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f000 facf 	bl	8001d32 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001794:	19bb      	adds	r3, r7, r6
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0011      	movs	r1, r2
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fac8 	bl	8001d32 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80017a2:	230d      	movs	r3, #13
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 fac0 	bl	8001d32 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fa1d 	bl	8001bf4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0011      	movs	r1, r2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fc5d 	bl	8002080 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2148      	movs	r1, #72	@ 0x48
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 fab1 	bl	8001d32 <OneWire_WriteByte>
	
	return 1;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b005      	add	sp, #20
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017da <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 fa73 	bl	8001cd0 <OneWire_ReadBit>
 80017ea:	0003      	movs	r3, r0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a06      	ldr	r2, [pc, #24]	@ (800181c <vApplicationGetIdleTaskMemory+0x28>)
 8001804:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <vApplicationGetIdleTaskMemory+0x2c>)
 800180a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	20000060 	.word	0x20000060
 8001820:	200000b4 	.word	0x200000b4

08001824 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <MX_FREERTOS_Init+0x30>)
 800182e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001830:	c313      	stmia	r3!, {r0, r1, r4}
 8001832:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001834:	c313      	stmia	r3!, {r0, r1, r4}
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	601a      	str	r2, [r3, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2100      	movs	r1, #0
 800183e:	0018      	movs	r0, r3
 8001840:	f001 ffc9 	bl	80037d6 <osThreadCreate>
 8001844:	0002      	movs	r2, r0
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <MX_FREERTOS_Init+0x34>)
 8001848:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b009      	add	sp, #36	@ 0x24
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	08004a4c 	.word	0x08004a4c
 8001858:	2000005c 	.word	0x2000005c

0800185c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f002 f803 	bl	8003870 <osDelay>
 800186a:	e7fb      	b.n	8001864 <StartTask1+0x8>

0800186c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	0018      	movs	r0, r3
 8001876:	2314      	movs	r3, #20
 8001878:	001a      	movs	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	f003 f8a2 	bl	80049c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_GPIO_Init+0x8c>)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_GPIO_Init+0x8c>)
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	0289      	lsls	r1, r1, #10
 800188a:	430a      	orrs	r2, r1
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_GPIO_Init+0x8c>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	029b      	lsls	r3, r3, #10
 8001896:	4013      	ands	r3, r2
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800189c:	2390      	movs	r3, #144	@ 0x90
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	2200      	movs	r2, #0
 80018a2:	2120      	movs	r1, #32
 80018a4:	0018      	movs	r0, r3
 80018a6:	f001 f84e 	bl	8002946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2204      	movs	r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	1d3a      	adds	r2, r7, #4
 80018be:	2390      	movs	r3, #144	@ 0x90
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 feb1 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2220      	movs	r2, #32
 80018ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2201      	movs	r2, #1
 80018d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	1d3a      	adds	r2, r7, #4
 80018e4:	2390      	movs	r3, #144	@ 0x90
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 fe9e 	bl	800262c <HAL_GPIO_Init>

}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b006      	add	sp, #24
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001902:	f000 fd91 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001906:	f000 f823 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190a:	f7ff ffaf 	bl	800186c <MX_GPIO_Init>
  MX_TIM6_Init();
 800190e:	f000 fd21 	bl	8002354 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001912:	f7ff ff87 	bl	8001824 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001916:	f001 ff56 	bl	80037c6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if (_DS18B20_USE_FREERTOS==1)
    Ds18b20_Init(osPriorityNormal);
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fb90 	bl	8001040 <Ds18b20_Init>
#else
    if(!Ds18b20_Init())
        Error_Handler();
#endif

    osThreadDef(TempTaskDef, TempTask, osPriorityNormal, 0, 256);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <main+0x4c>)
 8001924:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001926:	c313      	stmia	r3!, {r0, r1, r4}
 8001928:	ca13      	ldmia	r2!, {r0, r1, r4}
 800192a:	c313      	stmia	r3!, {r0, r1, r4}
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	601a      	str	r2, [r3, #0]
    TempTaskHandle = osThreadCreate(osThread(TempTaskDef), NULL);
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2100      	movs	r1, #0
 8001934:	0018      	movs	r0, r3
 8001936:	f001 ff4e 	bl	80037d6 <osThreadCreate>
 800193a:	0002      	movs	r2, r0
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <main+0x50>)
 800193e:	601a      	str	r2, [r3, #0]

    osKernelStart();
 8001940:	f001 ff41 	bl	80037c6 <osKernelStart>



  while (1)
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	e7fd      	b.n	8001944 <main+0x48>
 8001948:	08004a74 	.word	0x08004a74
 800194c:	200002b4 	.word	0x200002b4

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b091      	sub	sp, #68	@ 0x44
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	2410      	movs	r4, #16
 8001958:	193b      	adds	r3, r7, r4
 800195a:	0018      	movs	r0, r3
 800195c:	2330      	movs	r3, #48	@ 0x30
 800195e:	001a      	movs	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	f003 f82f 	bl	80049c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001966:	003b      	movs	r3, r7
 8001968:	0018      	movs	r0, r3
 800196a:	2310      	movs	r3, #16
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f003 f828 	bl	80049c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001974:	0021      	movs	r1, r4
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2202      	movs	r2, #2
 800197a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197c:	187b      	adds	r3, r7, r1
 800197e:	2201      	movs	r2, #1
 8001980:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2210      	movs	r2, #16
 8001986:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2202      	movs	r2, #2
 800198c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	22a0      	movs	r2, #160	@ 0xa0
 8001998:	0392      	lsls	r2, r2, #14
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800199c:	187b      	adds	r3, r7, r1
 800199e:	2200      	movs	r2, #0
 80019a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 ffeb 	bl	8002980 <HAL_RCC_OscConfig>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80019ae:	f000 f871 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	003b      	movs	r3, r7
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b8:	003b      	movs	r3, r7
 80019ba:	2202      	movs	r2, #2
 80019bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019be:	003b      	movs	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c4:	003b      	movs	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019ca:	003b      	movs	r3, r7
 80019cc:	2101      	movs	r1, #1
 80019ce:	0018      	movs	r0, r3
 80019d0:	f001 faf0 	bl	8002fb4 <HAL_RCC_ClockConfig>
 80019d4:	1e03      	subs	r3, r0, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80019d8:	f000 f85c 	bl	8001a94 <Error_Handler>
  }
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b011      	add	sp, #68	@ 0x44
 80019e2:	bd90      	pop	{r4, r7, pc}

080019e4 <TempTask>:

/* USER CODE BEGIN 4 */

void TempTask(const void *argument)  // <-- const void* ekledik
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    (void)argument; // kullanılmıyor ama derleyici uyarısı için
    while(1)
    {
        for(uint8_t i=0; i<_DS18B20_MAX_SENSORS; i++)
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	e02c      	b.n	8001a50 <TempTask+0x6c>
        {
            if(ds18b20[i].DataIsValid)
 80019f6:	210f      	movs	r1, #15
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <TempTask+0x84>)
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	330c      	adds	r3, #12
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01c      	beq.n	8001a44 <TempTask+0x60>
            {
                float temp = ds18b20[i].Temperature;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4a16      	ldr	r2, [pc, #88]	@ (8001a68 <TempTask+0x84>)
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	18d3      	adds	r3, r2, r3
 8001a14:	3308      	adds	r3, #8
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60bb      	str	r3, [r7, #8]

                if(temp > 30.0f)
 8001a1a:	4914      	ldr	r1, [pc, #80]	@ (8001a6c <TempTask+0x88>)
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f7fe fc25 	bl	800026c <__aeabi_fcmpgt>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d007      	beq.n	8001a36 <TempTask+0x52>
                    HAL_GPIO_WritePin(LED_PORT, LED_TEMP, GPIO_PIN_SET);
 8001a26:	2390      	movs	r3, #144	@ 0x90
 8001a28:	05db      	lsls	r3, r3, #23
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 ff89 	bl	8002946 <HAL_GPIO_WritePin>
 8001a34:	e006      	b.n	8001a44 <TempTask+0x60>
                else
                    HAL_GPIO_WritePin(LED_PORT, LED_TEMP, GPIO_PIN_RESET);
 8001a36:	2390      	movs	r3, #144	@ 0x90
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 ff81 	bl	8002946 <HAL_GPIO_WritePin>
        for(uint8_t i=0; i<_DS18B20_MAX_SENSORS; i++)
 8001a44:	210f      	movs	r1, #15
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	3201      	adds	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0cd      	beq.n	80019f6 <TempTask+0x12>
            }
        }
        osDelay(1000);
 8001a5a:	23fa      	movs	r3, #250	@ 0xfa
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f001 ff06 	bl	8003870 <osDelay>
        for(uint8_t i=0; i<_DS18B20_MAX_SENSORS; i++)
 8001a64:	e7c2      	b.n	80019ec <TempTask+0x8>
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	2000002c 	.word	0x2000002c
 8001a6c:	41f00000 	.word	0x41f00000

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a82:	f000 fce5 	bl	8002450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	40000400 	.word	0x40000400

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	46c0      	nop			@ (mov r8, r8)
 8001a9e:	e7fd      	b.n	8001a9c <Error_Handler+0x8>

08001aa0 <ONEWIRE_DELAY>:
#include "onewire.h"
#include "ds18b20Config.h"
#include "tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	801a      	strh	r2, [r3, #0]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <ONEWIRE_DELAY+0x30>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001ab4:	46c0      	nop			@ (mov r8, r8)
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <ONEWIRE_DELAY+0x30>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d9f8      	bls.n	8001ab6 <ONEWIRE_DELAY+0x16>
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b002      	add	sp, #8
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	20000300 	.word	0x20000300

08001ad4 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0412      	lsls	r2, r2, #16
 8001ae8:	619a      	str	r2, [r3, #24]
}	
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	889a      	ldrh	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	619a      	str	r2, [r3, #24]
}	
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001b14:	210c      	movs	r1, #12
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
	gpinit.Pull = GPIO_NOPULL;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2203      	movs	r2, #3
 8001b26:	60da      	str	r2, [r3, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	889b      	ldrh	r3, [r3, #4]
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	187a      	adds	r2, r7, r1
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fd76 	bl	800262c <HAL_GPIO_Init>
}	
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b008      	add	sp, #32
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001b50:	210c      	movs	r1, #12
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2211      	movs	r2, #17
 8001b56:	605a      	str	r2, [r3, #4]
	gpinit.Pull = GPIO_NOPULL;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2203      	movs	r2, #3
 8001b62:	60da      	str	r2, [r3, #12]
	gpinit.Pin = gp->GPIO_Pin;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	889b      	ldrh	r3, [r3, #4]
 8001b68:	001a      	movs	r2, r3
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	187a      	adds	r2, r7, r1
 8001b74:	0011      	movs	r1, r2
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 fd58 	bl	800262c <HAL_GPIO_Init>

}
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b008      	add	sp, #32
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <OneWire_Init+0x6c>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f001 fbcb 	bl	8003330 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1dba      	adds	r2, r7, #6
 8001ba4:	8812      	ldrh	r2, [r2, #0]
 8001ba6:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f7ff ffcc 	bl	8001b48 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff ff9d 	bl	8001af2 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8001bb8:	23fa      	movs	r3, #250	@ 0xfa
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fc63 	bl	8002488 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff ff85 	bl	8001ad4 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001bca:	23fa      	movs	r3, #250	@ 0xfa
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 fc5a 	bl	8002488 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff ff8b 	bl	8001af2 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8001bdc:	23fa      	movs	r3, #250	@ 0xfa
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fc51 	bl	8002488 <HAL_Delay>
}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b004      	add	sp, #16
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	20000300 	.word	0x20000300

08001bf4 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ff68 	bl	8001ad4 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff ff9e 	bl	8001b48 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8001c0c:	23f0      	movs	r3, #240	@ 0xf0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff ff45 	bl	8001aa0 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001c16:	2014      	movs	r0, #20
 8001c18:	f7ff ff42 	bl	8001aa0 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff ff74 	bl	8001b0c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001c24:	2046      	movs	r0, #70	@ 0x46
 8001c26:	f7ff ff3b 	bl	8001aa0 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	889b      	ldrh	r3, [r3, #4]
 8001c32:	250f      	movs	r5, #15
 8001c34:	197c      	adds	r4, r7, r5
 8001c36:	0019      	movs	r1, r3
 8001c38:	0010      	movs	r0, r2
 8001c3a:	f000 fe67 	bl	800290c <HAL_GPIO_ReadPin>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	7023      	strb	r3, [r4, #0]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8001c42:	23cd      	movs	r3, #205	@ 0xcd
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff ff2a 	bl	8001aa0 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8001c4c:	197b      	adds	r3, r7, r5
 8001c4e:	781b      	ldrb	r3, [r3, #0]
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}

08001c58 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	000a      	movs	r2, r1
 8001c62:	1cfb      	adds	r3, r7, #3
 8001c64:	701a      	strb	r2, [r3, #0]
	if (bit) 
 8001c66:	1cfb      	adds	r3, r7, #3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <OneWire_WriteBit+0x44>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ff2f 	bl	8001ad4 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ff65 	bl	8001b48 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8001c7e:	200a      	movs	r0, #10
 8001c80:	f7ff ff0e 	bl	8001aa0 <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff ff40 	bl	8001b0c <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8001c8c:	2037      	movs	r0, #55	@ 0x37
 8001c8e:	f7ff ff07 	bl	8001aa0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ff39 	bl	8001b0c <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8001c9a:	e015      	b.n	8001cc8 <OneWire_WriteBit+0x70>
		ONEWIRE_LOW(OneWireStruct);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff ff18 	bl	8001ad4 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff ff4e 	bl	8001b48 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8001cac:	2041      	movs	r0, #65	@ 0x41
 8001cae:	f7ff fef7 	bl	8001aa0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff ff29 	bl	8001b0c <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001cba:	2005      	movs	r0, #5
 8001cbc:	f7ff fef0 	bl	8001aa0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff ff22 	bl	8001b0c <ONEWIRE_INPUT>
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001cd8:	240f      	movs	r4, #15
 8001cda:	193b      	adds	r3, r7, r4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fef6 	bl	8001ad4 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff2c 	bl	8001b48 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff fed5 	bl	8001aa0 <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff ff07 	bl	8001b0c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8001cfe:	200a      	movs	r0, #10
 8001d00:	f7ff fece 	bl	8001aa0 <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	889b      	ldrh	r3, [r3, #4]
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	0010      	movs	r0, r2
 8001d10:	f000 fdfc 	bl	800290c <HAL_GPIO_ReadPin>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d002      	beq.n	8001d1e <OneWire_ReadBit+0x4e>
		/* Bit is HIGH */
		bit = 1;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8001d1e:	2032      	movs	r0, #50	@ 0x32
 8001d20:	f7ff febe 	bl	8001aa0 <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 8001d24:	230f      	movs	r3, #15
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	781b      	ldrb	r3, [r3, #0]
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b005      	add	sp, #20
 8001d30:	bd90      	pop	{r4, r7, pc}

08001d32 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	1cfb      	adds	r3, r7, #3
 8001d3e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 8;
 8001d40:	230f      	movs	r3, #15
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2208      	movs	r2, #8
 8001d46:	701a      	strb	r2, [r3, #0]
	/* Write 8 bits */
	while (i--) {
 8001d48:	e00e      	b.n	8001d68 <OneWire_WriteByte+0x36>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8001d4a:	1cfb      	adds	r3, r7, #3
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff7d 	bl	8001c58 <OneWire_WriteBit>
		byte >>= 1;
 8001d5e:	1cfb      	adds	r3, r7, #3
 8001d60:	1cfa      	adds	r2, r7, #3
 8001d62:	7812      	ldrb	r2, [r2, #0]
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
	while (i--) {
 8001d68:	220f      	movs	r2, #15
 8001d6a:	18bb      	adds	r3, r7, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	18ba      	adds	r2, r7, r2
 8001d70:	1e59      	subs	r1, r3, #1
 8001d72:	7011      	strb	r1, [r2, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e8      	bne.n	8001d4a <OneWire_WriteByte+0x18>
	}
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001d82:	b590      	push	{r4, r7, lr}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2208      	movs	r2, #8
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	230e      	movs	r3, #14
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
	while (i--) {
 8001d9a:	e013      	b.n	8001dc4 <OneWire_ReadByte+0x42>
		byte >>= 1;
 8001d9c:	240e      	movs	r4, #14
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	193a      	adds	r2, r7, r4
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	0852      	lsrs	r2, r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff ff90 	bl	8001cd0 <OneWire_ReadBit>
 8001db0:	0003      	movs	r3, r0
 8001db2:	01db      	lsls	r3, r3, #7
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	193b      	adds	r3, r7, r4
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	701a      	strb	r2, [r3, #0]
	while (i--) {
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	18bb      	adds	r3, r7, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	18ba      	adds	r2, r7, r2
 8001dcc:	1e59      	subs	r1, r3, #1
 8001dce:	7011      	strb	r1, [r2, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e3      	bne.n	8001d9c <OneWire_ReadByte+0x1a>
	}
	
	return byte;
 8001dd4:	230e      	movs	r3, #14
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b005      	add	sp, #20
 8001de0:	bd90      	pop	{r4, r7, pc}

08001de2 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f818 	bl	8001e22 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	21f0      	movs	r1, #240	@ 0xf0
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f824 	bl	8001e44 <OneWire_Search>
 8001dfc:	0003      	movs	r3, r0
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	21f0      	movs	r1, #240	@ 0xf0
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f816 	bl	8001e44 <OneWire_Search>
 8001e18:	0003      	movs	r3, r0
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	71da      	strb	r2, [r3, #7]
}
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	1cfb      	adds	r3, r7, #3
 8001e50:	701a      	strb	r2, [r3, #0]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
	last_zero = 0;
 8001e5a:	230e      	movs	r3, #14
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
	rom_byte_number = 0;
 8001e62:	230d      	movs	r3, #13
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
	rom_byte_mask = 1;
 8001e6a:	230b      	movs	r3, #11
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
	search_result = 0;
 8001e72:	230c      	movs	r3, #12
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7a1b      	ldrb	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d000      	beq.n	8001e84 <OneWire_Search+0x40>
 8001e82:	e0e0      	b.n	8002046 <OneWire_Search+0x202>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff feb4 	bl	8001bf4 <OneWire_Reset>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d00a      	beq.n	8001ea6 <OneWire_Search+0x62>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	71da      	strb	r2, [r3, #7]
			return 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e0e8      	b.n	8002078 <OneWire_Search+0x234>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 8001ea6:	1cfb      	adds	r3, r7, #3
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0011      	movs	r1, r2
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff ff3f 	bl	8001d32 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8001eb4:	2509      	movs	r5, #9
 8001eb6:	197c      	adds	r4, r7, r5
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff ff08 	bl	8001cd0 <OneWire_ReadBit>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	7023      	strb	r3, [r4, #0]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8001ec4:	2608      	movs	r6, #8
 8001ec6:	19bc      	adds	r4, r7, r6
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff ff00 	bl	8001cd0 <OneWire_ReadBit>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	7023      	strb	r3, [r4, #0]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001ed4:	197b      	adds	r3, r7, r5
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d104      	bne.n	8001ee6 <OneWire_Search+0xa2>
 8001edc:	19bb      	adds	r3, r7, r6
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d100      	bne.n	8001ee6 <OneWire_Search+0xa2>
 8001ee4:	e09a      	b.n	800201c <OneWire_Search+0x1d8>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8001ee6:	2109      	movs	r1, #9
 8001ee8:	187a      	adds	r2, r7, r1
 8001eea:	2308      	movs	r3, #8
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d005      	beq.n	8001f02 <OneWire_Search+0xbe>
					search_direction = id_bit;  // bit write value for search
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	187a      	adds	r2, r7, r1
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e038      	b.n	8001f74 <OneWire_Search+0x130>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	799b      	ldrb	r3, [r3, #6]
 8001f06:	220f      	movs	r2, #15
 8001f08:	18ba      	adds	r2, r7, r2
 8001f0a:	7812      	ldrb	r2, [r2, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d211      	bcs.n	8001f34 <OneWire_Search+0xf0>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001f10:	230d      	movs	r3, #13
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	18d3      	adds	r3, r2, r3
 8001f1a:	7a5b      	ldrb	r3, [r3, #9]
 8001f1c:	220b      	movs	r2, #11
 8001f1e:	18ba      	adds	r2, r7, r2
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	4013      	ands	r3, r2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	1e5a      	subs	r2, r3, #1
 8001f28:	4193      	sbcs	r3, r2
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e00b      	b.n	8001f4c <OneWire_Search+0x108>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	799b      	ldrb	r3, [r3, #6]
 8001f38:	220f      	movs	r2, #15
 8001f3a:	18ba      	adds	r2, r7, r2
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	425a      	negs	r2, r3
 8001f42:	4153      	adcs	r3, r2
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	230a      	movs	r3, #10
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	701a      	strb	r2, [r3, #0]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <OneWire_Search+0x130>
						last_zero = id_bit_number;
 8001f56:	210e      	movs	r1, #14
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	18ba      	adds	r2, r7, r2
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	701a      	strb	r2, [r3, #0]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8001f62:	000a      	movs	r2, r1
 8001f64:	18bb      	adds	r3, r7, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d803      	bhi.n	8001f74 <OneWire_Search+0x130>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	18ba      	adds	r2, r7, r2
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8001f74:	230a      	movs	r3, #10
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d111      	bne.n	8001fa2 <OneWire_Search+0x15e>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8001f7e:	200d      	movs	r0, #13
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	18d3      	adds	r3, r2, r3
 8001f88:	7a59      	ldrb	r1, [r3, #9]
 8001f8a:	183b      	adds	r3, r7, r0
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	220b      	movs	r2, #11
 8001f90:	18ba      	adds	r2, r7, r2
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	b2d1      	uxtb	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	18d3      	adds	r3, r2, r3
 8001f9c:	1c0a      	adds	r2, r1, #0
 8001f9e:	725a      	strb	r2, [r3, #9]
 8001fa0:	e015      	b.n	8001fce <OneWire_Search+0x18a>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001fa2:	210d      	movs	r1, #13
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	18d3      	adds	r3, r2, r3
 8001fac:	7a5b      	ldrb	r3, [r3, #9]
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	220b      	movs	r2, #11
 8001fb2:	18ba      	adds	r2, r7, r2
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	b252      	sxtb	r2, r2
 8001fb8:	43d2      	mvns	r2, r2
 8001fba:	b252      	sxtb	r2, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b25a      	sxtb	r2, r3
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2d1      	uxtb	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	18d3      	adds	r3, r2, r3
 8001fca:	1c0a      	adds	r2, r1, #0
 8001fcc:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8001fce:	230a      	movs	r3, #10
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fe3d 	bl	8001c58 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8001fde:	210f      	movs	r1, #15
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	3201      	adds	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
				rom_byte_mask <<= 1;
 8001fea:	210b      	movs	r1, #11
 8001fec:	187a      	adds	r2, r7, r1
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	18db      	adds	r3, r3, r3
 8001ff4:	7013      	strb	r3, [r2, #0]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d108      	bne.n	8002010 <OneWire_Search+0x1cc>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8001ffe:	200d      	movs	r0, #13
 8002000:	183b      	adds	r3, r7, r0
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	183b      	adds	r3, r7, r0
 8002006:	3201      	adds	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
					rom_byte_mask = 1;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8002010:	230d      	movs	r3, #13
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b07      	cmp	r3, #7
 8002018:	d800      	bhi.n	800201c <OneWire_Search+0x1d8>
 800201a:	e74b      	b.n	8001eb4 <OneWire_Search+0x70>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800201c:	230f      	movs	r3, #15
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b40      	cmp	r3, #64	@ 0x40
 8002024:	d90f      	bls.n	8002046 <OneWire_Search+0x202>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	220e      	movs	r2, #14
 800202a:	18ba      	adds	r2, r7, r2
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	799b      	ldrb	r3, [r3, #6]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <OneWire_Search+0x1fa>
				OneWireStruct->LastDeviceFlag = 1;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 800203e:	230c      	movs	r3, #12
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8002046:	230c      	movs	r3, #12
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <OneWire_Search+0x214>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7a5b      	ldrb	r3, [r3, #9]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10c      	bne.n	8002072 <OneWire_Search+0x22e>
		OneWireStruct->LastDiscrepancy = 0;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800206a:	230c      	movs	r3, #12
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
	}

	return search_result;
 8002072:	230c      	movs	r3, #12
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b005      	add	sp, #20
 800207e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002080 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2155      	movs	r1, #85	@ 0x55
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff fe4f 	bl	8001d32 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8002094:	230f      	movs	r3, #15
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e00f      	b.n	80020be <OneWire_SelectWithPointer+0x3e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800209e:	240f      	movs	r4, #15
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	18d3      	adds	r3, r2, r3
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0011      	movs	r1, r2
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff fe3f 	bl	8001d32 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	3201      	adds	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	230f      	movs	r3, #15
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b07      	cmp	r3, #7
 80020c6:	d9ea      	bls.n	800209e <OneWire_SelectWithPointer+0x1e>
	}	
}
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b005      	add	sp, #20
 80020d0:	bd90      	pop	{r4, r7, pc}

080020d2 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e00f      	b.n	8002106 <OneWire_GetFullROM+0x34>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80020e6:	200f      	movs	r0, #15
 80020e8:	183b      	adds	r3, r7, r0
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	183b      	adds	r3, r7, r0
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	18cb      	adds	r3, r1, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	188a      	adds	r2, r1, r2
 80020f8:	7a52      	ldrb	r2, [r2, #9]
 80020fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	183b      	adds	r3, r7, r0
 8002102:	3201      	adds	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d9ea      	bls.n	80020e6 <OneWire_GetFullROM+0x14>
	}
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}

0800211a <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800211a:	b590      	push	{r4, r7, lr}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	000a      	movs	r2, r1
 8002124:	1cfb      	adds	r3, r7, #3
 8002126:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0, inbyte, i, mix;
 8002128:	230f      	movs	r3, #15
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
	
	while (len--) {
 8002130:	e039      	b.n	80021a6 <OneWire_CRC8+0x8c>
		inbyte = *addr++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	220e      	movs	r2, #14
 800213a:	18ba      	adds	r2, r7, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	7013      	strb	r3, [r2, #0]
		for (i = 8; i; i--) {
 8002140:	230d      	movs	r3, #13
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2208      	movs	r2, #8
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e028      	b.n	800219c <OneWire_CRC8+0x82>
			mix = (crc ^ inbyte) & 0x01;
 800214a:	200f      	movs	r0, #15
 800214c:	183a      	adds	r2, r7, r0
 800214e:	230e      	movs	r3, #14
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	7812      	ldrb	r2, [r2, #0]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4053      	eors	r3, r2
 8002158:	b2da      	uxtb	r2, r3
 800215a:	240c      	movs	r4, #12
 800215c:	193b      	adds	r3, r7, r4
 800215e:	2101      	movs	r1, #1
 8002160:	400a      	ands	r2, r1
 8002162:	701a      	strb	r2, [r3, #0]
			crc >>= 1;
 8002164:	183b      	adds	r3, r7, r0
 8002166:	183a      	adds	r2, r7, r0
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	0852      	lsrs	r2, r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
			if (mix) {
 800216e:	193b      	adds	r3, r7, r4
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <OneWire_CRC8+0x6a>
				crc ^= 0x8C;
 8002176:	183b      	adds	r3, r7, r0
 8002178:	183a      	adds	r2, r7, r0
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	2174      	movs	r1, #116	@ 0x74
 800217e:	4249      	negs	r1, r1
 8002180:	404a      	eors	r2, r1
 8002182:	701a      	strb	r2, [r3, #0]
			}
			inbyte >>= 1;
 8002184:	220e      	movs	r2, #14
 8002186:	18bb      	adds	r3, r7, r2
 8002188:	18ba      	adds	r2, r7, r2
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	0852      	lsrs	r2, r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
		for (i = 8; i; i--) {
 8002190:	210d      	movs	r1, #13
 8002192:	187b      	adds	r3, r7, r1
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	187b      	adds	r3, r7, r1
 8002198:	3a01      	subs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	230d      	movs	r3, #13
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1d1      	bne.n	800214a <OneWire_CRC8+0x30>
	while (len--) {
 80021a6:	1cfb      	adds	r3, r7, #3
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	1cfa      	adds	r2, r7, #3
 80021ac:	1e59      	subs	r1, r3, #1
 80021ae:	7011      	strb	r1, [r2, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1be      	bne.n	8002132 <OneWire_CRC8+0x18>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 80021b4:	230f      	movs	r3, #15
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b005      	add	sp, #20
 80021c0:	bd90      	pop	{r4, r7, pc}
	...

080021c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_MspInit+0x50>)
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <HAL_MspInit+0x50>)
 80021d0:	2101      	movs	r1, #1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	619a      	str	r2, [r3, #24]
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_MspInit+0x50>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <HAL_MspInit+0x50>)
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_MspInit+0x50>)
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	0549      	lsls	r1, r1, #21
 80021ec:	430a      	orrs	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <HAL_MspInit+0x50>)
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	4013      	ands	r3, r2
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80021fe:	2302      	movs	r3, #2
 8002200:	425b      	negs	r3, r3
 8002202:	2200      	movs	r2, #0
 8002204:	2103      	movs	r1, #3
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f9ea 	bl	80025e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220c:	46c0      	nop			@ (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	b08c      	sub	sp, #48	@ 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002228:	4b37      	ldr	r3, [pc, #220]	@ (8002308 <HAL_InitTick+0xf0>)
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <HAL_InitTick+0xf0>)
 800222e:	2102      	movs	r1, #2
 8002230:	430a      	orrs	r2, r1
 8002232:	61da      	str	r2, [r3, #28]
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_InitTick+0xf0>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2202      	movs	r2, #2
 800223a:	4013      	ands	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002240:	230c      	movs	r3, #12
 8002242:	18fa      	adds	r2, r7, r3
 8002244:	2410      	movs	r4, #16
 8002246:	193b      	adds	r3, r7, r4
 8002248:	0011      	movs	r1, r2
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fff6 	bl	800323c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002250:	193b      	adds	r3, r7, r4
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800225c:	f000 ffd8 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8002260:	0003      	movs	r3, r0
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002264:	e004      	b.n	8002270 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002266:	f000 ffd3 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 800226a:	0003      	movs	r3, r0
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	4926      	ldr	r1, [pc, #152]	@ (800230c <HAL_InitTick+0xf4>)
 8002274:	0018      	movs	r0, r3
 8002276:	f7fd ff47 	bl	8000108 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	3b01      	subs	r3, #1
 800227e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002280:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <HAL_InitTick+0xf8>)
 8002282:	4a24      	ldr	r2, [pc, #144]	@ (8002314 <HAL_InitTick+0xfc>)
 8002284:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002286:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <HAL_InitTick+0xf8>)
 8002288:	4a23      	ldr	r2, [pc, #140]	@ (8002318 <HAL_InitTick+0x100>)
 800228a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800228c:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_InitTick+0xf8>)
 800228e:	6a3a      	ldr	r2, [r7, #32]
 8002290:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8002292:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HAL_InitTick+0xf8>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_InitTick+0xf8>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_InitTick+0xf8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80022a4:	252b      	movs	r5, #43	@ 0x2b
 80022a6:	197c      	adds	r4, r7, r5
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_InitTick+0xf8>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fff0 	bl	8003290 <HAL_TIM_Base_Init>
 80022b0:	0003      	movs	r3, r0
 80022b2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11e      	bne.n	80022fa <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80022bc:	197c      	adds	r4, r7, r5
 80022be:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <HAL_InitTick+0xf8>)
 80022c0:	0018      	movs	r0, r3
 80022c2:	f001 f879 	bl	80033b8 <HAL_TIM_Base_Start_IT>
 80022c6:	0003      	movs	r3, r0
 80022c8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80022ca:	197b      	adds	r3, r7, r5
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d2:	2010      	movs	r0, #16
 80022d4:	f000 f999 	bl	800260a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d809      	bhi.n	80022f2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	0019      	movs	r1, r3
 80022e4:	2010      	movs	r0, #16
 80022e6:	f000 f97b 	bl	80025e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_InitTick+0x104>)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e003      	b.n	80022fa <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80022f2:	232b      	movs	r3, #43	@ 0x2b
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80022fa:	232b      	movs	r3, #43	@ 0x2b
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b00c      	add	sp, #48	@ 0x30
 8002306:	bdb0      	pop	{r4, r5, r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	000f4240 	.word	0x000f4240
 8002310:	200002b8 	.word	0x200002b8
 8002314:	40000400 	.word	0x40000400
 8002318:	000003e7 	.word	0x000003e7
 800231c:	20000004 	.word	0x20000004

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	e7fd      	b.n	8002324 <NMI_Handler+0x4>

08002328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	e7fd      	b.n	800232c <HardFault_Handler+0x4>

08002330 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <TIM3_IRQHandler+0x14>)
 8002336:	0018      	movs	r0, r3
 8002338:	f001 f88a 	bl	8003450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	200002b8 	.word	0x200002b8

08002348 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_TIM6_Init+0x38>)
 800235a:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <MX_TIM6_Init+0x3c>)
 800235c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <MX_TIM6_Init+0x38>)
 8002360:	222f      	movs	r2, #47	@ 0x2f
 8002362:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b09      	ldr	r3, [pc, #36]	@ (800238c <MX_TIM6_Init+0x38>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff;
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <MX_TIM6_Init+0x38>)
 800236c:	4a09      	ldr	r2, [pc, #36]	@ (8002394 <MX_TIM6_Init+0x40>)
 800236e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <MX_TIM6_Init+0x38>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002376:	4b05      	ldr	r3, [pc, #20]	@ (800238c <MX_TIM6_Init+0x38>)
 8002378:	0018      	movs	r0, r3
 800237a:	f000 ff89 	bl	8003290 <HAL_TIM_Base_Init>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8002382:	f7ff fb87 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000300 	.word	0x20000300
 8002390:	40001000 	.word	0x40001000
 8002394:	0000ffff 	.word	0x0000ffff

08002398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_TIM_Base_MspInit+0x34>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10b      	bne.n	80023c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_TIM_Base_MspInit+0x38>)
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_TIM_Base_MspInit+0x38>)
 80023b0:	2110      	movs	r1, #16
 80023b2:	430a      	orrs	r2, r1
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_TIM_Base_MspInit+0x38>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2210      	movs	r2, #16
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	40001000 	.word	0x40001000
 80023d0:	40021000 	.word	0x40021000

080023d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023d4:	480d      	ldr	r0, [pc, #52]	@ (800240c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023d8:	f7ff ffb6 	bl	8002348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	@ (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002402:	f002 fae7 	bl	80049d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002406:	f7ff fa79 	bl	80018fc <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   r0, =_estack
 800240c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002418:	08004ad8 	.word	0x08004ad8
  ldr r2, =_sbss
 800241c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002420:	20001090 	.word	0x20001090

08002424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_IRQHandler>
	...

08002428 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <HAL_Init+0x24>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_Init+0x24>)
 8002432:	2110      	movs	r1, #16
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002438:	2003      	movs	r0, #3
 800243a:	f7ff feed 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243e:	f7ff fec1 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_IncTick+0x1c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	001a      	movs	r2, r3
 800245a:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_IncTick+0x20>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	18d2      	adds	r2, r2, r3
 8002460:	4b03      	ldr	r3, [pc, #12]	@ (8002470 <HAL_IncTick+0x20>)
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	20000008 	.word	0x20000008
 8002470:	20000348 	.word	0x20000348

08002474 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <HAL_GetTick+0x10>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	20000348 	.word	0x20000348

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff fff0 	bl	8002474 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_Delay+0x44>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	001a      	movs	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	f7ff ffe0 	bl	8002474 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	20000008 	.word	0x20000008

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	0002      	movs	r2, r0
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80024e2:	d809      	bhi.n	80024f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	001a      	movs	r2, r3
 80024ea:	231f      	movs	r3, #31
 80024ec:	401a      	ands	r2, r3
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <__NVIC_EnableIRQ+0x30>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	4091      	lsls	r1, r2
 80024f4:	000a      	movs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
  }
}
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	0002      	movs	r2, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b7f      	cmp	r3, #127	@ 0x7f
 8002518:	d828      	bhi.n	800256c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251a:	4a2f      	ldr	r2, [pc, #188]	@ (80025d8 <__NVIC_SetPriority+0xd4>)
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b25b      	sxtb	r3, r3
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	33c0      	adds	r3, #192	@ 0xc0
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	589b      	ldr	r3, [r3, r2]
 800252a:	1dfa      	adds	r2, r7, #7
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	0011      	movs	r1, r2
 8002530:	2203      	movs	r2, #3
 8002532:	400a      	ands	r2, r1
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	21ff      	movs	r1, #255	@ 0xff
 8002538:	4091      	lsls	r1, r2
 800253a:	000a      	movs	r2, r1
 800253c:	43d2      	mvns	r2, r2
 800253e:	401a      	ands	r2, r3
 8002540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	22ff      	movs	r2, #255	@ 0xff
 8002548:	401a      	ands	r2, r3
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	0018      	movs	r0, r3
 8002550:	2303      	movs	r3, #3
 8002552:	4003      	ands	r3, r0
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002558:	481f      	ldr	r0, [pc, #124]	@ (80025d8 <__NVIC_SetPriority+0xd4>)
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	430a      	orrs	r2, r1
 8002564:	33c0      	adds	r3, #192	@ 0xc0
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800256a:	e031      	b.n	80025d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800256c:	4a1b      	ldr	r2, [pc, #108]	@ (80025dc <__NVIC_SetPriority+0xd8>)
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	0019      	movs	r1, r3
 8002574:	230f      	movs	r3, #15
 8002576:	400b      	ands	r3, r1
 8002578:	3b08      	subs	r3, #8
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3306      	adds	r3, #6
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	18d3      	adds	r3, r2, r3
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1dfa      	adds	r2, r7, #7
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	0011      	movs	r1, r2
 800258c:	2203      	movs	r2, #3
 800258e:	400a      	ands	r2, r1
 8002590:	00d2      	lsls	r2, r2, #3
 8002592:	21ff      	movs	r1, #255	@ 0xff
 8002594:	4091      	lsls	r1, r2
 8002596:	000a      	movs	r2, r1
 8002598:	43d2      	mvns	r2, r2
 800259a:	401a      	ands	r2, r3
 800259c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	22ff      	movs	r2, #255	@ 0xff
 80025a4:	401a      	ands	r2, r3
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	0018      	movs	r0, r3
 80025ac:	2303      	movs	r3, #3
 80025ae:	4003      	ands	r3, r0
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b4:	4809      	ldr	r0, [pc, #36]	@ (80025dc <__NVIC_SetPriority+0xd8>)
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	001c      	movs	r4, r3
 80025bc:	230f      	movs	r3, #15
 80025be:	4023      	ands	r3, r4
 80025c0:	3b08      	subs	r3, #8
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	430a      	orrs	r2, r1
 80025c6:	3306      	adds	r3, #6
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	18c3      	adds	r3, r0, r3
 80025cc:	3304      	adds	r3, #4
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b003      	add	sp, #12
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	210f      	movs	r1, #15
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	1c02      	adds	r2, r0, #0
 80025f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff ff81 	bl	8002504 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	0002      	movs	r2, r0
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b25b      	sxtb	r3, r3
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff57 	bl	80024d0 <__NVIC_EnableIRQ>
}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b002      	add	sp, #8
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263a:	e14f      	b.n	80028dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4091      	lsls	r1, r2
 8002646:	000a      	movs	r2, r1
 8002648:	4013      	ands	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d100      	bne.n	8002654 <HAL_GPIO_Init+0x28>
 8002652:	e140      	b.n	80028d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	4013      	ands	r3, r2
 800265c:	2b01      	cmp	r3, #1
 800265e:	d005      	beq.n	800266c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002668:	2b02      	cmp	r3, #2
 800266a:	d130      	bne.n	80026ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	409a      	lsls	r2, r3
 800267a:	0013      	movs	r3, r2
 800267c:	43da      	mvns	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a2:	2201      	movs	r2, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	2201      	movs	r2, #1
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d017      	beq.n	800270a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	43da      	mvns	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	4013      	ands	r3, r2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d123      	bne.n	800275e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	58d3      	ldr	r3, [r2, r3]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2207      	movs	r2, #7
 8002728:	4013      	ands	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2107      	movs	r1, #7
 8002742:	400b      	ands	r3, r1
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	6939      	ldr	r1, [r7, #16]
 800275c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	43da      	mvns	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2203      	movs	r2, #3
 800277c:	401a      	ands	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	409a      	lsls	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	23c0      	movs	r3, #192	@ 0xc0
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d100      	bne.n	80027a0 <HAL_GPIO_Init+0x174>
 800279e:	e09a      	b.n	80028d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a0:	4b54      	ldr	r3, [pc, #336]	@ (80028f4 <HAL_GPIO_Init+0x2c8>)
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_GPIO_Init+0x2c8>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	430a      	orrs	r2, r1
 80027aa:	619a      	str	r2, [r3, #24]
 80027ac:	4b51      	ldr	r3, [pc, #324]	@ (80028f4 <HAL_GPIO_Init+0x2c8>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027b8:	4a4f      	ldr	r2, [pc, #316]	@ (80028f8 <HAL_GPIO_Init+0x2cc>)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	589b      	ldr	r3, [r3, r2]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2203      	movs	r2, #3
 80027ca:	4013      	ands	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	409a      	lsls	r2, r3
 80027d2:	0013      	movs	r3, r2
 80027d4:	43da      	mvns	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	2390      	movs	r3, #144	@ 0x90
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x1e2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a44      	ldr	r2, [pc, #272]	@ (80028fc <HAL_GPIO_Init+0x2d0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x1de>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a43      	ldr	r2, [pc, #268]	@ (8002900 <HAL_GPIO_Init+0x2d4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <HAL_GPIO_Init+0x2d8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x1d6>
 80027fe:	2303      	movs	r3, #3
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x1e4>
 8002802:	2305      	movs	r3, #5
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x1e4>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x1e4>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x1e4>
 800280e:	2300      	movs	r3, #0
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	2103      	movs	r1, #3
 8002814:	400a      	ands	r2, r1
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002820:	4935      	ldr	r1, [pc, #212]	@ (80028f8 <HAL_GPIO_Init+0x2cc>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b36      	ldr	r3, [pc, #216]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43da      	mvns	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	035b      	lsls	r3, r3, #13
 8002846:	4013      	ands	r3, r2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43da      	mvns	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	039b      	lsls	r3, r3, #14
 8002870:	4013      	ands	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800287c:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43da      	mvns	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	029b      	lsls	r3, r3, #10
 800289a:	4013      	ands	r3, r2
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80028ac:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	025b      	lsls	r3, r3, #9
 80028c4:	4013      	ands	r3, r2
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <HAL_GPIO_Init+0x2dc>)
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	40da      	lsrs	r2, r3
 80028e4:	1e13      	subs	r3, r2, #0
 80028e6:	d000      	beq.n	80028ea <HAL_GPIO_Init+0x2be>
 80028e8:	e6a8      	b.n	800263c <HAL_GPIO_Init+0x10>
  } 
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b006      	add	sp, #24
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010000 	.word	0x40010000
 80028fc:	48000400 	.word	0x48000400
 8002900:	48000800 	.word	0x48000800
 8002904:	48000c00 	.word	0x48000c00
 8002908:	40010400 	.word	0x40010400

0800290c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	000a      	movs	r2, r1
 8002916:	1cbb      	adds	r3, r7, #2
 8002918:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	1cba      	adds	r2, r7, #2
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	4013      	ands	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e003      	b.n	8002938 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002930:	230f      	movs	r3, #15
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002938:	230f      	movs	r3, #15
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
  }
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b004      	add	sp, #16
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	0008      	movs	r0, r1
 8002950:	0011      	movs	r1, r2
 8002952:	1cbb      	adds	r3, r7, #2
 8002954:	1c02      	adds	r2, r0, #0
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	1c7b      	adds	r3, r7, #1
 800295a:	1c0a      	adds	r2, r1, #0
 800295c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800295e:	1c7b      	adds	r3, r7, #1
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002966:	1cbb      	adds	r3, r7, #2
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800296e:	e003      	b.n	8002978 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002970:	1cbb      	adds	r3, r7, #2
 8002972:	881a      	ldrh	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e301      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	d100      	bne.n	800299e <HAL_RCC_OscConfig+0x1e>
 800299c:	e08d      	b.n	8002aba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800299e:	4bc3      	ldr	r3, [pc, #780]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	220c      	movs	r2, #12
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00e      	beq.n	80029c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029aa:	4bc0      	ldr	r3, [pc, #768]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	220c      	movs	r2, #12
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x64>
 80029b6:	4bbd      	ldr	r3, [pc, #756]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	025b      	lsls	r3, r3, #9
 80029be:	401a      	ands	r2, r3
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	4bb8      	ldr	r3, [pc, #736]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	4013      	ands	r3, r2
 80029d2:	d100      	bne.n	80029d6 <HAL_RCC_OscConfig+0x56>
 80029d4:	e070      	b.n	8002ab8 <HAL_RCC_OscConfig+0x138>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d000      	beq.n	80029e0 <HAL_RCC_OscConfig+0x60>
 80029de:	e06b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e2d8      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x7c>
 80029ec:	4baf      	ldr	r3, [pc, #700]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4bae      	ldr	r3, [pc, #696]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	0249      	lsls	r1, r1, #9
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e02f      	b.n	8002a5c <HAL_RCC_OscConfig+0xdc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x9e>
 8002a04:	4ba9      	ldr	r3, [pc, #676]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4ba8      	ldr	r3, [pc, #672]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a0a:	49a9      	ldr	r1, [pc, #676]	@ (8002cb0 <HAL_RCC_OscConfig+0x330>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	4ba6      	ldr	r3, [pc, #664]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4ba5      	ldr	r3, [pc, #660]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a16:	49a7      	ldr	r1, [pc, #668]	@ (8002cb4 <HAL_RCC_OscConfig+0x334>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e01e      	b.n	8002a5c <HAL_RCC_OscConfig+0xdc>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10e      	bne.n	8002a44 <HAL_RCC_OscConfig+0xc4>
 8002a26:	4ba1      	ldr	r3, [pc, #644]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	2180      	movs	r1, #128	@ 0x80
 8002a2e:	02c9      	lsls	r1, r1, #11
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4b9d      	ldr	r3, [pc, #628]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b9c      	ldr	r3, [pc, #624]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	0249      	lsls	r1, r1, #9
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xdc>
 8002a44:	4b99      	ldr	r3, [pc, #612]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b98      	ldr	r3, [pc, #608]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	4999      	ldr	r1, [pc, #612]	@ (8002cb0 <HAL_RCC_OscConfig+0x330>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	4b96      	ldr	r3, [pc, #600]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b95      	ldr	r3, [pc, #596]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a56:	4997      	ldr	r1, [pc, #604]	@ (8002cb4 <HAL_RCC_OscConfig+0x334>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d014      	beq.n	8002a8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff fd06 	bl	8002474 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6e:	f7ff fd01 	bl	8002474 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	@ 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e28a      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a80:	4b8a      	ldr	r3, [pc, #552]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0xee>
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fcf1 	bl	8002474 <HAL_GetTick>
 8002a92:	0003      	movs	r3, r0
 8002a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a98:	f7ff fcec 	bl	8002474 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	@ 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e275      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	4b80      	ldr	r3, [pc, #512]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	029b      	lsls	r3, r3, #10
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x118>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x146>
 8002ac4:	e069      	b.n	8002b9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ac6:	4b79      	ldr	r3, [pc, #484]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	220c      	movs	r2, #12
 8002acc:	4013      	ands	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ad0:	4b76      	ldr	r3, [pc, #472]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	220c      	movs	r2, #12
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d11c      	bne.n	8002b16 <HAL_RCC_OscConfig+0x196>
 8002adc:	4b73      	ldr	r3, [pc, #460]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	025b      	lsls	r3, r3, #9
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d116      	bne.n	8002b16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae8:	4b70      	ldr	r3, [pc, #448]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x17e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e24b      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b6b      	ldr	r3, [pc, #428]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	22f8      	movs	r2, #248	@ 0xf8
 8002b04:	4393      	bics	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00da      	lsls	r2, r3, #3
 8002b0e:	4b67      	ldr	r3, [pc, #412]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b14:	e041      	b.n	8002b9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d024      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1e:	4b63      	ldr	r3, [pc, #396]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b62      	ldr	r3, [pc, #392]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fca3 	bl	8002474 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff fc9e 	bl	8002474 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e227      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b59      	ldr	r3, [pc, #356]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d0f1      	beq.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b56      	ldr	r3, [pc, #344]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	22f8      	movs	r2, #248	@ 0xf8
 8002b56:	4393      	bics	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00da      	lsls	r2, r3, #3
 8002b60:	4b52      	ldr	r3, [pc, #328]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e018      	b.n	8002b9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b68:	4b50      	ldr	r3, [pc, #320]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	438a      	bics	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fc7e 	bl	8002474 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7ff fc79 	bl	8002474 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e202      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b90:	4b46      	ldr	r3, [pc, #280]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d1f1      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d036      	beq.n	8002c12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d019      	beq.n	8002be0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b3f      	ldr	r3, [pc, #252]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7ff fc5c 	bl	8002474 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7ff fc57 	bl	8002474 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1e0      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd4:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d0f1      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x242>
 8002bde:	e018      	b.n	8002c12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be0:	4b32      	ldr	r3, [pc, #200]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002be4:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	438a      	bics	r2, r1
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7ff fc42 	bl	8002474 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7ff fc3d 	bl	8002474 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1c6      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d1f1      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_OscConfig+0x29e>
 8002c1c:	e0b4      	b.n	8002d88 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	201f      	movs	r0, #31
 8002c20:	183b      	adds	r3, r7, r0
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	055b      	lsls	r3, r3, #21
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d110      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002c38:	2180      	movs	r1, #128	@ 0x80
 8002c3a:	0549      	lsls	r1, r1, #21
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	61da      	str	r2, [r3, #28]
 8002c40:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	055b      	lsls	r3, r3, #21
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c4e:	183b      	adds	r3, r7, r0
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d11a      	bne.n	8002c96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c66:	2180      	movs	r1, #128	@ 0x80
 8002c68:	0049      	lsls	r1, r1, #1
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fc01 	bl	8002474 <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7ff fbfc 	bl	8002474 <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e185      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10e      	bne.n	8002cbc <HAL_RCC_OscConfig+0x33c>
 8002c9e:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	4b02      	ldr	r3, [pc, #8]	@ (8002cac <HAL_RCC_OscConfig+0x32c>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	621a      	str	r2, [r3, #32]
 8002caa:	e035      	b.n	8002d18 <HAL_RCC_OscConfig+0x398>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	fffeffff 	.word	0xfffeffff
 8002cb4:	fffbffff 	.word	0xfffbffff
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x35e>
 8002cc4:	4bb6      	ldr	r3, [pc, #728]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	4bb5      	ldr	r3, [pc, #724]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	438a      	bics	r2, r1
 8002cce:	621a      	str	r2, [r3, #32]
 8002cd0:	4bb3      	ldr	r3, [pc, #716]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	4bb2      	ldr	r3, [pc, #712]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	438a      	bics	r2, r1
 8002cda:	621a      	str	r2, [r3, #32]
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCC_OscConfig+0x398>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x380>
 8002ce6:	4bae      	ldr	r3, [pc, #696]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	4bad      	ldr	r3, [pc, #692]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cec:	2104      	movs	r1, #4
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	621a      	str	r2, [r3, #32]
 8002cf2:	4bab      	ldr	r3, [pc, #684]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	4baa      	ldr	r3, [pc, #680]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	621a      	str	r2, [r3, #32]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0x398>
 8002d00:	4ba7      	ldr	r3, [pc, #668]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	4ba6      	ldr	r3, [pc, #664]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	438a      	bics	r2, r1
 8002d0a:	621a      	str	r2, [r3, #32]
 8002d0c:	4ba4      	ldr	r3, [pc, #656]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	4ba3      	ldr	r3, [pc, #652]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d12:	2104      	movs	r1, #4
 8002d14:	438a      	bics	r2, r1
 8002d16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d014      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7ff fba8 	bl	8002474 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7ff fba3 	bl	8002474 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	4a9b      	ldr	r2, [pc, #620]	@ (8002fa4 <HAL_RCC_OscConfig+0x624>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e12b      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	4b98      	ldr	r3, [pc, #608]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3aa>
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fb93 	bl	8002474 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	e009      	b.n	8002d68 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7ff fb8e 	bl	8002474 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	4a91      	ldr	r2, [pc, #580]	@ (8002fa4 <HAL_RCC_OscConfig+0x624>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e116      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d72:	231f      	movs	r3, #31
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	4b87      	ldr	r3, [pc, #540]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d82:	4989      	ldr	r1, [pc, #548]	@ (8002fa8 <HAL_RCC_OscConfig+0x628>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d063      	beq.n	8002e5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d12a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d9a:	4b81      	ldr	r3, [pc, #516]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9e:	4b80      	ldr	r3, [pc, #512]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002da0:	2104      	movs	r1, #4
 8002da2:	430a      	orrs	r2, r1
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002da6:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002daa:	4b7d      	ldr	r3, [pc, #500]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	430a      	orrs	r2, r1
 8002db0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7ff fb5f 	bl	8002474 <HAL_GetTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002dbc:	f7ff fb5a 	bl	8002474 <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0e3      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dce:	4b74      	ldr	r3, [pc, #464]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d0f1      	beq.n	8002dbc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dd8:	4b71      	ldr	r3, [pc, #452]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ddc:	22f8      	movs	r2, #248	@ 0xf8
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	00da      	lsls	r2, r3, #3
 8002de8:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dee:	e034      	b.n	8002e5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	3305      	adds	r3, #5
 8002df6:	d111      	bne.n	8002e1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002df8:	4b69      	ldr	r3, [pc, #420]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfc:	4b68      	ldr	r3, [pc, #416]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002dfe:	2104      	movs	r1, #4
 8002e00:	438a      	bics	r2, r1
 8002e02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e04:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	22f8      	movs	r2, #248	@ 0xf8
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	00da      	lsls	r2, r3, #3
 8002e14:	4b62      	ldr	r3, [pc, #392]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e16:	430a      	orrs	r2, r1
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e1a:	e01e      	b.n	8002e5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e1c:	4b60      	ldr	r3, [pc, #384]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e20:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e22:	2104      	movs	r1, #4
 8002e24:	430a      	orrs	r2, r1
 8002e26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e28:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	438a      	bics	r2, r1
 8002e32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff fb1e 	bl	8002474 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e3e:	f7ff fb19 	bl	8002474 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0a2      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d1f1      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d100      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4e4>
 8002e62:	e097      	b.n	8002f94 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e64:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	220c      	movs	r2, #12
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d100      	bne.n	8002e72 <HAL_RCC_OscConfig+0x4f2>
 8002e70:	e06b      	b.n	8002f4a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d14c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b48      	ldr	r3, [pc, #288]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002e80:	494a      	ldr	r1, [pc, #296]	@ (8002fac <HAL_RCC_OscConfig+0x62c>)
 8002e82:	400a      	ands	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff faf5 	bl	8002474 <HAL_GetTick>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7ff faf0 	bl	8002474 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e079      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	@ 0x80
 8002ea8:	049b      	lsls	r3, r3, #18
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eae:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ebc:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ec2:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb0 <HAL_RCC_OscConfig+0x630>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002ee2:	2180      	movs	r1, #128	@ 0x80
 8002ee4:	0449      	lsls	r1, r1, #17
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff fac3 	bl	8002474 <HAL_GetTick>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7ff fabe 	bl	8002474 <HAL_GetTick>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e047      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f06:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	049b      	lsls	r3, r3, #18
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x574>
 8002f12:	e03f      	b.n	8002f94 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b21      	ldr	r3, [pc, #132]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002f1a:	4924      	ldr	r1, [pc, #144]	@ (8002fac <HAL_RCC_OscConfig+0x62c>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7ff faa8 	bl	8002474 <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7ff faa3 	bl	8002474 <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e02c      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	049b      	lsls	r3, r3, #18
 8002f44:	4013      	ands	r3, r2
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5aa>
 8002f48:	e024      	b.n	8002f94 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e01f      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f5c:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <HAL_RCC_OscConfig+0x620>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	025b      	lsls	r3, r3, #9
 8002f68:	401a      	ands	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d10e      	bne.n	8002f90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	220f      	movs	r2, #15
 8002f76:	401a      	ands	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	23f0      	movs	r3, #240	@ 0xf0
 8002f84:	039b      	lsls	r3, r3, #14
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b008      	add	sp, #32
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	00001388 	.word	0x00001388
 8002fa8:	efffffff 	.word	0xefffffff
 8002fac:	feffffff 	.word	0xfeffffff
 8002fb0:	ffc2ffff 	.word	0xffc2ffff

08002fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b3      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d911      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b58      	ldr	r3, [pc, #352]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b55      	ldr	r3, [pc, #340]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b53      	ldr	r3, [pc, #332]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e09a      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d015      	beq.n	8003030 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2204      	movs	r2, #4
 800300a:	4013      	ands	r3, r2
 800300c:	d006      	beq.n	800301c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800300e:	4b4b      	ldr	r3, [pc, #300]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b4a      	ldr	r3, [pc, #296]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 8003014:	21e0      	movs	r1, #224	@ 0xe0
 8003016:	00c9      	lsls	r1, r1, #3
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	22f0      	movs	r2, #240	@ 0xf0
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	4b44      	ldr	r3, [pc, #272]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	4013      	ands	r3, r2
 8003038:	d040      	beq.n	80030bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b3e      	ldr	r3, [pc, #248]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	d114      	bne.n	8003078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06e      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b38      	ldr	r3, [pc, #224]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	049b      	lsls	r3, r3, #18
 8003062:	4013      	ands	r3, r2
 8003064:	d108      	bne.n	8003078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e062      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2202      	movs	r2, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e05b      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003078:	4b30      	ldr	r3, [pc, #192]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	4393      	bics	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308c:	f7ff f9f2 	bl	8002474 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003094:	e009      	b.n	80030aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003096:	f7ff f9ed 	bl	8002474 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	4a27      	ldr	r2, [pc, #156]	@ (8003140 <HAL_RCC_ClockConfig+0x18c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e042      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	220c      	movs	r2, #12
 80030b0:	401a      	ands	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1ec      	bne.n	8003096 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d211      	bcs.n	80030ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4393      	bics	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_RCC_ClockConfig+0x184>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e020      	b.n	8003130 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2204      	movs	r2, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <HAL_RCC_ClockConfig+0x190>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800310c:	f000 f820 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 8003110:	0001      	movs	r1, r0
 8003112:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <HAL_RCC_ClockConfig+0x188>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	220f      	movs	r2, #15
 800311a:	4013      	ands	r3, r2
 800311c:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <HAL_RCC_ClockConfig+0x194>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	000a      	movs	r2, r1
 8003122:	40da      	lsrs	r2, r3
 8003124:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x198>)
 8003126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003128:	2003      	movs	r0, #3
 800312a:	f7ff f875 	bl	8002218 <HAL_InitTick>
  
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
 8003140:	00001388 	.word	0x00001388
 8003144:	fffff8ff 	.word	0xfffff8ff
 8003148:	08004a98 	.word	0x08004a98
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800316a:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	220c      	movs	r2, #12
 8003174:	4013      	ands	r3, r2
 8003176:	2b04      	cmp	r3, #4
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x30>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x36>
 800317e:	e02c      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	e02c      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0c9b      	lsrs	r3, r3, #18
 800318a:	220f      	movs	r2, #15
 800318c:	4013      	ands	r3, r2
 800318e:	4a19      	ldr	r2, [pc, #100]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003194:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	220f      	movs	r2, #15
 800319a:	4013      	ands	r3, r2
 800319c:	4a16      	ldr	r2, [pc, #88]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	2380      	movs	r3, #128	@ 0x80
 80031a6:	025b      	lsls	r3, r3, #9
 80031a8:	4013      	ands	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4810      	ldr	r0, [pc, #64]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031b0:	f7fc ffaa 	bl	8000108 <__udivsi3>
 80031b4:	0003      	movs	r3, r0
 80031b6:	001a      	movs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4353      	muls	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e009      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	000a      	movs	r2, r1
 80031c4:	0152      	lsls	r2, r2, #5
 80031c6:	1a52      	subs	r2, r2, r1
 80031c8:	0193      	lsls	r3, r2, #6
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	185b      	adds	r3, r3, r1
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	613b      	str	r3, [r7, #16]
      break;
 80031d8:	e002      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031dc:	613b      	str	r3, [r7, #16]
      break;
 80031de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031e0:	693b      	ldr	r3, [r7, #16]
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b006      	add	sp, #24
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	40021000 	.word	0x40021000
 80031f0:	007a1200 	.word	0x007a1200
 80031f4:	08004ab0 	.word	0x08004ab0
 80031f8:	08004ac0 	.word	0x08004ac0

080031fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003200:	4b02      	ldr	r3, [pc, #8]	@ (800320c <HAL_RCC_GetHCLKFreq+0x10>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003214:	f7ff fff2 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003218:	0001      	movs	r1, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	2207      	movs	r2, #7
 8003222:	4013      	ands	r3, r2
 8003224:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	40d9      	lsrs	r1, r3
 800322a:	000b      	movs	r3, r1
}    
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	40021000 	.word	0x40021000
 8003238:	08004aa8 	.word	0x08004aa8

0800323c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800324c:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <HAL_RCC_GetClockConfig+0x4c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2203      	movs	r2, #3
 8003252:	401a      	ands	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_GetClockConfig+0x4c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	22f0      	movs	r2, #240	@ 0xf0
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <HAL_RCC_GetClockConfig+0x4c>)
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	23e0      	movs	r3, #224	@ 0xe0
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_GetClockConfig+0x50>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2201      	movs	r2, #1
 8003278:	401a      	ands	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	40021000 	.word	0x40021000
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e042      	b.n	8003328 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	223d      	movs	r2, #61	@ 0x3d
 80032a6:	5c9b      	ldrb	r3, [r3, r2]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	223c      	movs	r2, #60	@ 0x3c
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff f86d 	bl	8002398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223d      	movs	r2, #61	@ 0x3d
 80032c2:	2102      	movs	r1, #2
 80032c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	0019      	movs	r1, r3
 80032d0:	0010      	movs	r0, r2
 80032d2:	f000 f9cb 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2246      	movs	r2, #70	@ 0x46
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223e      	movs	r2, #62	@ 0x3e
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223f      	movs	r2, #63	@ 0x3f
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2240      	movs	r2, #64	@ 0x40
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2241      	movs	r2, #65	@ 0x41
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2242      	movs	r2, #66	@ 0x42
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2243      	movs	r2, #67	@ 0x43
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2244      	movs	r2, #68	@ 0x44
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2245      	movs	r2, #69	@ 0x45
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223d      	movs	r2, #61	@ 0x3d
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	223d      	movs	r2, #61	@ 0x3d
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d001      	beq.n	8003348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e02d      	b.n	80033a4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	223d      	movs	r2, #61	@ 0x3d
 800334c:	2102      	movs	r1, #2
 800334e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <HAL_TIM_Base_Start+0x7c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIM_Base_Start+0x3e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <HAL_TIM_Base_Start+0x80>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIM_Base_Start+0x3e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a12      	ldr	r2, [pc, #72]	@ (80033b4 <HAL_TIM_Base_Start+0x84>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d111      	bne.n	8003392 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2207      	movs	r2, #7
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b06      	cmp	r3, #6
 800337e:	d010      	beq.n	80033a2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	e007      	b.n	80033a2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40014000 	.word	0x40014000

080033b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223d      	movs	r2, #61	@ 0x3d
 80033c4:	5c9b      	ldrb	r3, [r3, r2]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e035      	b.n	800343c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	223d      	movs	r2, #61	@ 0x3d
 80033d4:	2102      	movs	r1, #2
 80033d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <HAL_TIM_Base_Start_IT+0x8c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x4e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <HAL_TIM_Base_Start_IT+0x90>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x4e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a12      	ldr	r2, [pc, #72]	@ (800344c <HAL_TIM_Base_Start_IT+0x94>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d111      	bne.n	800342a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2207      	movs	r2, #7
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d010      	beq.n	800343a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	e007      	b.n	800343a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b004      	add	sp, #16
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40000400 	.word	0x40000400
 800344c:	40014000 	.word	0x40014000

08003450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	d021      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2202      	movs	r2, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d01d      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2203      	movs	r2, #3
 800347e:	4252      	negs	r2, r2
 8003480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2203      	movs	r2, #3
 8003490:	4013      	ands	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f8d0 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 800349c:	e007      	b.n	80034ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 f8c3 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f8cf 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	d01e      	beq.n	8003502 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2205      	movs	r2, #5
 80034ca:	4252      	negs	r2, r2
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	23c0      	movs	r3, #192	@ 0xc0
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 f8a9 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 80034ea:	e007      	b.n	80034fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 f89c 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 f8a8 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2208      	movs	r2, #8
 8003506:	4013      	ands	r3, r2
 8003508:	d021      	beq.n	800354e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2208      	movs	r2, #8
 800350e:	4013      	ands	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2209      	movs	r2, #9
 8003518:	4252      	negs	r2, r2
 800351a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2204      	movs	r2, #4
 8003520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2203      	movs	r2, #3
 800352a:	4013      	ands	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f883 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8003536:	e007      	b.n	8003548 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f876 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0018      	movs	r0, r3
 8003544:	f000 f882 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2210      	movs	r2, #16
 8003552:	4013      	ands	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2210      	movs	r2, #16
 800355a:	4013      	ands	r3, r2
 800355c:	d01e      	beq.n	800359c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2211      	movs	r2, #17
 8003564:	4252      	negs	r2, r2
 8003566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2208      	movs	r2, #8
 800356c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	23c0      	movs	r3, #192	@ 0xc0
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4013      	ands	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 f85c 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8003584:	e007      	b.n	8003596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 f84f 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 f85b 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2201      	movs	r2, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	d00c      	beq.n	80035be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	d008      	beq.n	80035be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4252      	negs	r2, r2
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fe fa59 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00c      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2280      	movs	r2, #128	@ 0x80
 80035ca:	4013      	ands	r3, r2
 80035cc:	d008      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2281      	movs	r2, #129	@ 0x81
 80035d4:	4252      	negs	r2, r2
 80035d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f8d2 	bl	8003784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00c      	beq.n	8003602 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	@ 0x40
 80035ec:	4013      	ands	r3, r2
 80035ee:	d008      	beq.n	8003602 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2241      	movs	r2, #65	@ 0x41
 80035f6:	4252      	negs	r2, r2
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 f82d 	bl	800365c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2220      	movs	r2, #32
 8003606:	4013      	ands	r3, r2
 8003608:	d00c      	beq.n	8003624 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d008      	beq.n	8003624 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2221      	movs	r2, #33	@ 0x21
 8003618:	4252      	negs	r2, r2
 800361a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f000 f8a8 	bl	8003774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a36      	ldr	r2, [pc, #216]	@ (8003758 <TIM_Base_SetConfig+0xec>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x20>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a35      	ldr	r2, [pc, #212]	@ (800375c <TIM_Base_SetConfig+0xf0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2270      	movs	r2, #112	@ 0x70
 8003690:	4393      	bics	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003758 <TIM_Base_SetConfig+0xec>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <TIM_Base_SetConfig+0xf0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003760 <TIM_Base_SetConfig+0xf4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003764 <TIM_Base_SetConfig+0xf8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a29      	ldr	r2, [pc, #164]	@ (8003768 <TIM_Base_SetConfig+0xfc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a28      	ldr	r2, [pc, #160]	@ (800376c <TIM_Base_SetConfig+0x100>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a27      	ldr	r2, [pc, #156]	@ (8003770 <TIM_Base_SetConfig+0x104>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	4393      	bics	r3, r2
 80036e6:	001a      	movs	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <TIM_Base_SetConfig+0xec>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_Base_SetConfig+0xba>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a14      	ldr	r2, [pc, #80]	@ (8003764 <TIM_Base_SetConfig+0xf8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_Base_SetConfig+0xba>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <TIM_Base_SetConfig+0xfc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0xba>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a12      	ldr	r2, [pc, #72]	@ (800376c <TIM_Base_SetConfig+0x100>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d103      	bne.n	800372e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2201      	movs	r2, #1
 800373a:	4013      	ands	r3, r2
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2201      	movs	r2, #1
 8003746:	4393      	bics	r3, r2
 8003748:	001a      	movs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
  }
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40000400 	.word	0x40000400
 8003760:	40002000 	.word	0x40002000
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800
 8003770:	fffffcff 	.word	0xfffffcff

08003774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b002      	add	sp, #8
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	0002      	movs	r2, r0
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037a4:	1dbb      	adds	r3, r7, #6
 80037a6:	2200      	movs	r2, #0
 80037a8:	5e9b      	ldrsh	r3, [r3, r2]
 80037aa:	2b84      	cmp	r3, #132	@ 0x84
 80037ac:	d006      	beq.n	80037bc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80037ae:	1dbb      	adds	r3, r7, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	5e9a      	ldrsh	r2, [r3, r2]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	3303      	adds	r3, #3
 80037ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037ca:	f000 fb09 	bl	8003de0 <vTaskStartScheduler>
  
  return osOK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d8:	b089      	sub	sp, #36	@ 0x24
 80037da:	af04      	add	r7, sp, #16
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <osThreadCreate+0x54>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01c      	beq.n	800382a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685c      	ldr	r4, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691e      	ldr	r6, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2208      	movs	r2, #8
 8003800:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003802:	0018      	movs	r0, r3
 8003804:	f7ff ffc6 	bl	8003794 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003810:	6839      	ldr	r1, [r7, #0]
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	9201      	str	r2, [sp, #4]
 8003816:	9000      	str	r0, [sp, #0]
 8003818:	000b      	movs	r3, r1
 800381a:	0032      	movs	r2, r6
 800381c:	0029      	movs	r1, r5
 800381e:	0020      	movs	r0, r4
 8003820:	f000 f8e3 	bl	80039ea <xTaskCreateStatic>
 8003824:	0003      	movs	r3, r0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e01d      	b.n	8003866 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685c      	ldr	r4, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003836:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2208      	movs	r2, #8
 800383c:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff ffa8 	bl	8003794 <makeFreeRtosPriority>
 8003844:	0001      	movs	r1, r0
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	230c      	movs	r3, #12
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	9100      	str	r1, [sp, #0]
 8003850:	0013      	movs	r3, r2
 8003852:	0032      	movs	r2, r6
 8003854:	0029      	movs	r1, r5
 8003856:	0020      	movs	r0, r4
 8003858:	f000 f90d 	bl	8003a76 <xTaskCreate>
 800385c:	0003      	movs	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b005      	add	sp, #20
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003870 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <osDelay+0x16>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	e000      	b.n	8003888 <osDelay+0x18>
 8003886:	2301      	movs	r3, #1
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fa83 	bl	8003d94 <vTaskDelay>
  
  return osOK;
 800388e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bd80      	pop	{r7, pc}

08003898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3308      	adds	r3, #8
 80038a4:	001a      	movs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	4252      	negs	r2, r2
 80038b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3308      	adds	r3, #8
 80038b6:	001a      	movs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3308      	adds	r3, #8
 80038c0:	001a      	movs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038cc:	46c0      	nop			@ (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b002      	add	sp, #8
 80038e8:	bd80      	pop	{r7, pc}

080038ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b004      	add	sp, #16
 800392c:	bd80      	pop	{r7, pc}

0800392e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3301      	adds	r3, #1
 8003942:	d103      	bne.n	800394c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e00c      	b.n	8003966 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3308      	adds	r3, #8
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e002      	b.n	800395a <vListInsert+0x2c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d2f6      	bcs.n	8003954 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}

0800399a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6852      	ldr	r2, [r2, #4]
 80039ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d103      	bne.n	80039ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1e5a      	subs	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}

080039ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b08d      	sub	sp, #52	@ 0x34
 80039ee:	af04      	add	r7, sp, #16
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <xTaskCreateStatic+0x1a>
 80039fe:	b672      	cpsid	i
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	e7fd      	b.n	8003a00 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <xTaskCreateStatic+0x26>
 8003a0a:	b672      	cpsid	i
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	e7fd      	b.n	8003a0c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a10:	2354      	movs	r3, #84	@ 0x54
 8003a12:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b54      	cmp	r3, #84	@ 0x54
 8003a18:	d002      	beq.n	8003a20 <xTaskCreateStatic+0x36>
 8003a1a:	b672      	cpsid	i
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	e7fd      	b.n	8003a1c <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d020      	beq.n	8003a68 <xTaskCreateStatic+0x7e>
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01d      	beq.n	8003a68 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2251      	movs	r2, #81	@ 0x51
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a3e:	683c      	ldr	r4, [r7, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	2318      	movs	r3, #24
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	0023      	movs	r3, r4
 8003a5a:	f000 f859 	bl	8003b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 f8cf 	bl	8003c04 <prvAddNewTaskToReadyList>
 8003a66:	e001      	b.n	8003a6c <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b009      	add	sp, #36	@ 0x24
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a76:	b590      	push	{r4, r7, lr}
 8003a78:	b08d      	sub	sp, #52	@ 0x34
 8003a7a:	af04      	add	r7, sp, #16
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	1dbb      	adds	r3, r7, #6
 8003a84:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a86:	1dbb      	adds	r3, r7, #6
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 fdef 	bl	8004670 <pvPortMalloc>
 8003a92:	0003      	movs	r3, r0
 8003a94:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a9c:	2054      	movs	r0, #84	@ 0x54
 8003a9e:	f000 fde7 	bl	8004670 <pvPortMalloc>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ab2:	e006      	b.n	8003ac2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 fe82 	bl	80047c0 <vPortFree>
 8003abc:	e001      	b.n	8003ac2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01a      	beq.n	8003afe <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2251      	movs	r2, #81	@ 0x51
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad0:	1dbb      	adds	r3, r7, #6
 8003ad2:	881a      	ldrh	r2, [r3, #0]
 8003ad4:	683c      	ldr	r4, [r7, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	9302      	str	r3, [sp, #8]
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	0023      	movs	r3, r4
 8003aec:	f000 f810 	bl	8003b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 f886 	bl	8003c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e002      	b.n	8003b04 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003afe:	2301      	movs	r3, #1
 8003b00:	425b      	negs	r3, r3
 8003b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b04:	69bb      	ldr	r3, [r7, #24]
	}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b009      	add	sp, #36	@ 0x24
 8003b0c:	bd90      	pop	{r4, r7, pc}
	...

08003b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4936      	ldr	r1, [pc, #216]	@ (8003c00 <prvInitialiseNewTask+0xf0>)
 8003b26:	468c      	mov	ip, r1
 8003b28:	4463      	add	r3, ip
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2207      	movs	r2, #7
 8003b34:	4393      	bics	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d002      	beq.n	8003b46 <prvInitialiseNewTask+0x36>
 8003b40:	b672      	cpsid	i
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	e7fd      	b.n	8003b42 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e013      	b.n	8003b74 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	7818      	ldrb	r0, [r3, #0]
 8003b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b56:	2134      	movs	r1, #52	@ 0x34
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	185b      	adds	r3, r3, r1
 8003b5e:	1c02      	adds	r2, r0, #0
 8003b60:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b0f      	cmp	r3, #15
 8003b78:	d9e8      	bls.n	8003b4c <prvInitialiseNewTask+0x3c>
 8003b7a:	e000      	b.n	8003b7e <prvInitialiseNewTask+0x6e>
		{
			break;
 8003b7c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	2243      	movs	r2, #67	@ 0x43
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d901      	bls.n	8003b90 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b8c:	2306      	movs	r3, #6
 8003b8e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	6a3a      	ldr	r2, [r7, #32]
 8003b94:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7ff fe94 	bl	80038d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	3318      	adds	r3, #24
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff fe8f 	bl	80038d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2207      	movs	r2, #7
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bce:	2200      	movs	r2, #0
 8003bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	2250      	movs	r2, #80	@ 0x50
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	68f9      	ldr	r1, [r7, #12]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 fc0f 	bl	8004404 <pxPortInitialiseStack>
 8003be6:	0002      	movs	r2, r0
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b006      	add	sp, #24
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	3fffffff 	.word	0x3fffffff

08003c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c0c:	f000 fc98 	bl	8004540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c10:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <prvAddNewTaskToReadyList+0xb0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <prvAddNewTaskToReadyList+0xb0>)
 8003c18:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003c1a:	4b27      	ldr	r3, [pc, #156]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c22:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb4>)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c28:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <prvAddNewTaskToReadyList+0xb0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d110      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c30:	f000 fad4 	bl	80041dc <prvInitialiseTaskLists>
 8003c34:	e00d      	b.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c36:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <prvAddNewTaskToReadyList+0xb8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d802      	bhi.n	8003c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb4>)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <prvAddNewTaskToReadyList+0xbc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	4b19      	ldr	r3, [pc, #100]	@ (8003cc0 <prvAddNewTaskToReadyList+0xbc>)
 8003c5a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	4b18      	ldr	r3, [pc, #96]	@ (8003cc4 <prvAddNewTaskToReadyList+0xc0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d903      	bls.n	8003c70 <prvAddNewTaskToReadyList+0x6c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6c:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <prvAddNewTaskToReadyList+0xc0>)
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c74:	0013      	movs	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	189b      	adds	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4a12      	ldr	r2, [pc, #72]	@ (8003cc8 <prvAddNewTaskToReadyList+0xc4>)
 8003c7e:	189a      	adds	r2, r3, r2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	0019      	movs	r1, r3
 8003c86:	0010      	movs	r0, r2
 8003c88:	f7ff fe2f 	bl	80038ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c8c:	f000 fc6a 	bl	8004564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <prvAddNewTaskToReadyList+0xb8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c98:	4b07      	ldr	r3, [pc, #28]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d201      	bcs.n	8003caa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ca6:	f000 fc3b 	bl	8004520 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	2000044c 	.word	0x2000044c
 8003cb8:	2000034c 	.word	0x2000034c
 8003cbc:	20000458 	.word	0x20000458
 8003cc0:	20000468 	.word	0x20000468
 8003cc4:	20000454 	.word	0x20000454
 8003cc8:	20000350 	.word	0x20000350

08003ccc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003cd4:	f000 fc34 	bl	8004540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <vTaskDelete+0x18>
 8003cde:	4b26      	ldr	r3, [pc, #152]	@ (8003d78 <vTaskDelete+0xac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	e000      	b.n	8003ce6 <vTaskDelete+0x1a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3304      	adds	r3, #4
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fe54 	bl	800399a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff fe4b 	bl	800399a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <vTaskDelete+0xb0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d7c <vTaskDelete+0xb0>)
 8003d0c:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <vTaskDelete+0xac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d10c      	bne.n	8003d32 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	4b18      	ldr	r3, [pc, #96]	@ (8003d80 <vTaskDelete+0xb4>)
 8003d1e:	0011      	movs	r1, r2
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff fde2 	bl	80038ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003d26:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <vTaskDelete+0xb8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <vTaskDelete+0xb8>)
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e00a      	b.n	8003d48 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <vTaskDelete+0xbc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <vTaskDelete+0xbc>)
 8003d3a:	601a      	str	r2, [r3, #0]
				prvDeleteTCB( pxTCB );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 fabe 	bl	80042c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003d44:	f000 fae6 	bl	8004314 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003d48:	f000 fc0c 	bl	8004564 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <vTaskDelete+0xc0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <vTaskDelete+0xa4>
		{
			if( pxTCB == pxCurrentTCB )
 8003d54:	4b08      	ldr	r3, [pc, #32]	@ (8003d78 <vTaskDelete+0xac>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d108      	bne.n	8003d70 <vTaskDelete+0xa4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <vTaskDelete+0xc4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <vTaskDelete+0xa0>
 8003d66:	b672      	cpsid	i
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	e7fd      	b.n	8003d68 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 8003d6c:	f000 fbd8 	bl	8004520 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b004      	add	sp, #16
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2000034c 	.word	0x2000034c
 8003d7c:	20000468 	.word	0x20000468
 8003d80:	20000420 	.word	0x20000420
 8003d84:	20000434 	.word	0x20000434
 8003d88:	2000044c 	.word	0x2000044c
 8003d8c:	20000458 	.word	0x20000458
 8003d90:	20000474 	.word	0x20000474

08003d94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d011      	beq.n	8003dca <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <vTaskDelay+0x48>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <vTaskDelay+0x20>
 8003dae:	b672      	cpsid	i
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	e7fd      	b.n	8003db0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003db4:	f000 f862 	bl	8003e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 facd 	bl	800435c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dc2:	f000 f867 	bl	8003e94 <xTaskResumeAll>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8003dd0:	f000 fba6 	bl	8004520 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000474 	.word	0x20000474

08003de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b089      	sub	sp, #36	@ 0x24
 8003de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dee:	003a      	movs	r2, r7
 8003df0:	1d39      	adds	r1, r7, #4
 8003df2:	2308      	movs	r3, #8
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7fd fcfc 	bl	80017f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dfc:	683c      	ldr	r4, [r7, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	4918      	ldr	r1, [pc, #96]	@ (8003e64 <vTaskStartScheduler+0x84>)
 8003e04:	4818      	ldr	r0, [pc, #96]	@ (8003e68 <vTaskStartScheduler+0x88>)
 8003e06:	9202      	str	r2, [sp, #8]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	0022      	movs	r2, r4
 8003e12:	f7ff fdea 	bl	80039ea <xTaskCreateStatic>
 8003e16:	0002      	movs	r2, r0
 8003e18:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <vTaskStartScheduler+0x8c>)
 8003e1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e1c:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <vTaskStartScheduler+0x8c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e24:	2301      	movs	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e001      	b.n	8003e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003e34:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e36:	4b0e      	ldr	r3, [pc, #56]	@ (8003e70 <vTaskStartScheduler+0x90>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4252      	negs	r2, r2
 8003e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <vTaskStartScheduler+0x94>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <vTaskStartScheduler+0x98>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e4a:	f000 fb45 	bl	80044d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e4e:	e005      	b.n	8003e5c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	d102      	bne.n	8003e5c <vTaskStartScheduler+0x7c>
 8003e56:	b672      	cpsid	i
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	e7fd      	b.n	8003e58 <vTaskStartScheduler+0x78>
}
 8003e5c:	46c0      	nop			@ (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b005      	add	sp, #20
 8003e62:	bd90      	pop	{r4, r7, pc}
 8003e64:	08004a90 	.word	0x08004a90
 8003e68:	080041bd 	.word	0x080041bd
 8003e6c:	20000470 	.word	0x20000470
 8003e70:	2000046c 	.word	0x2000046c
 8003e74:	20000458 	.word	0x20000458
 8003e78:	20000450 	.word	0x20000450

08003e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <vTaskSuspendAll+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	4b02      	ldr	r3, [pc, #8]	@ (8003e90 <vTaskSuspendAll+0x14>)
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000474 	.word	0x20000474

08003e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8003f8c <xTaskResumeAll+0xf8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <xTaskResumeAll+0x1c>
 8003eaa:	b672      	cpsid	i
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	e7fd      	b.n	8003eac <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eb0:	f000 fb46 	bl	8004540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003eb4:	4b35      	ldr	r3, [pc, #212]	@ (8003f8c <xTaskResumeAll+0xf8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	4b34      	ldr	r3, [pc, #208]	@ (8003f8c <xTaskResumeAll+0xf8>)
 8003ebc:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebe:	4b33      	ldr	r3, [pc, #204]	@ (8003f8c <xTaskResumeAll+0xf8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d15b      	bne.n	8003f7e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ec6:	4b32      	ldr	r3, [pc, #200]	@ (8003f90 <xTaskResumeAll+0xfc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d057      	beq.n	8003f7e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ece:	e02f      	b.n	8003f30 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ed0:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <xTaskResumeAll+0x100>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3318      	adds	r3, #24
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff fd5c 	bl	800399a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff fd57 	bl	800399a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef0:	4b29      	ldr	r3, [pc, #164]	@ (8003f98 <xTaskResumeAll+0x104>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d903      	bls.n	8003f00 <xTaskResumeAll+0x6c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efc:	4b26      	ldr	r3, [pc, #152]	@ (8003f98 <xTaskResumeAll+0x104>)
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f04:	0013      	movs	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4a23      	ldr	r2, [pc, #140]	@ (8003f9c <xTaskResumeAll+0x108>)
 8003f0e:	189a      	adds	r2, r3, r2
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3304      	adds	r3, #4
 8003f14:	0019      	movs	r1, r3
 8003f16:	0010      	movs	r0, r2
 8003f18:	f7ff fce7 	bl	80038ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f20:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa0 <xTaskResumeAll+0x10c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <xTaskResumeAll+0x110>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f30:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <xTaskResumeAll+0x100>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1cb      	bne.n	8003ed0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f3e:	f000 f9e9 	bl	8004314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f42:	4b19      	ldr	r3, [pc, #100]	@ (8003fa8 <xTaskResumeAll+0x114>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00f      	beq.n	8003f6e <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f4e:	f000 f82d 	bl	8003fac <xTaskIncrementTick>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d002      	beq.n	8003f5c <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8003f56:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <xTaskResumeAll+0x110>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f2      	bne.n	8003f4e <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8003f68:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <xTaskResumeAll+0x114>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <xTaskResumeAll+0x110>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f7a:	f000 fad1 	bl	8004520 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f7e:	f000 faf1 	bl	8004564 <vPortExitCritical>

	return xAlreadyYielded;
 8003f82:	68bb      	ldr	r3, [r7, #8]
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b004      	add	sp, #16
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000474 	.word	0x20000474
 8003f90:	2000044c 	.word	0x2000044c
 8003f94:	2000040c 	.word	0x2000040c
 8003f98:	20000454 	.word	0x20000454
 8003f9c:	20000350 	.word	0x20000350
 8003fa0:	2000034c 	.word	0x2000034c
 8003fa4:	20000460 	.word	0x20000460
 8003fa8:	2000045c 	.word	0x2000045c

08003fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80040ec <xTaskIncrementTick+0x140>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d000      	beq.n	8003fc0 <xTaskIncrementTick+0x14>
 8003fbe:	e084      	b.n	80040ca <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80040f0 <xTaskIncrementTick+0x144>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc8:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <xTaskIncrementTick+0x144>)
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d118      	bne.n	8004006 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fd4:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <xTaskIncrementTick+0x148>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <xTaskIncrementTick+0x38>
 8003fde:	b672      	cpsid	i
 8003fe0:	46c0      	nop			@ (mov r8, r8)
 8003fe2:	e7fd      	b.n	8003fe0 <xTaskIncrementTick+0x34>
 8003fe4:	4b43      	ldr	r3, [pc, #268]	@ (80040f4 <xTaskIncrementTick+0x148>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4b43      	ldr	r3, [pc, #268]	@ (80040f8 <xTaskIncrementTick+0x14c>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b41      	ldr	r3, [pc, #260]	@ (80040f4 <xTaskIncrementTick+0x148>)
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4b41      	ldr	r3, [pc, #260]	@ (80040f8 <xTaskIncrementTick+0x14c>)
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	4b40      	ldr	r3, [pc, #256]	@ (80040fc <xTaskIncrementTick+0x150>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80040fc <xTaskIncrementTick+0x150>)
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f000 f987 	bl	8004314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004006:	4b3e      	ldr	r3, [pc, #248]	@ (8004100 <xTaskIncrementTick+0x154>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d34e      	bcc.n	80040ae <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004010:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <xTaskIncrementTick+0x148>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <xTaskIncrementTick+0x72>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <xTaskIncrementTick+0x74>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004024:	4b36      	ldr	r3, [pc, #216]	@ (8004100 <xTaskIncrementTick+0x154>)
 8004026:	2201      	movs	r2, #1
 8004028:	4252      	negs	r2, r2
 800402a:	601a      	str	r2, [r3, #0]
					break;
 800402c:	e03f      	b.n	80040ae <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800402e:	4b31      	ldr	r3, [pc, #196]	@ (80040f4 <xTaskIncrementTick+0x148>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d203      	bcs.n	800404e <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004046:	4b2e      	ldr	r3, [pc, #184]	@ (8004100 <xTaskIncrementTick+0x154>)
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	601a      	str	r2, [r3, #0]
						break;
 800404c:	e02f      	b.n	80040ae <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3304      	adds	r3, #4
 8004052:	0018      	movs	r0, r3
 8004054:	f7ff fca1 	bl	800399a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3318      	adds	r3, #24
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff fc98 	bl	800399a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406e:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <xTaskIncrementTick+0x158>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d903      	bls.n	800407e <xTaskIncrementTick+0xd2>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407a:	4b22      	ldr	r3, [pc, #136]	@ (8004104 <xTaskIncrementTick+0x158>)
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004082:	0013      	movs	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	189b      	adds	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a1f      	ldr	r2, [pc, #124]	@ (8004108 <xTaskIncrementTick+0x15c>)
 800408c:	189a      	adds	r2, r3, r2
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3304      	adds	r3, #4
 8004092:	0019      	movs	r1, r3
 8004094:	0010      	movs	r0, r2
 8004096:	f7ff fc28 	bl	80038ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <xTaskIncrementTick+0x160>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3b3      	bcc.n	8004010 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ac:	e7b0      	b.n	8004010 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ae:	4b17      	ldr	r3, [pc, #92]	@ (800410c <xTaskIncrementTick+0x160>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b4:	4914      	ldr	r1, [pc, #80]	@ (8004108 <xTaskIncrementTick+0x15c>)
 80040b6:	0013      	movs	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	585b      	ldr	r3, [r3, r1]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d907      	bls.n	80040d4 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e004      	b.n	80040d4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <xTaskIncrementTick+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <xTaskIncrementTick+0x164>)
 80040d2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <xTaskIncrementTick+0x168>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040e0:	697b      	ldr	r3, [r7, #20]
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b006      	add	sp, #24
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	20000474 	.word	0x20000474
 80040f0:	20000450 	.word	0x20000450
 80040f4:	20000404 	.word	0x20000404
 80040f8:	20000408 	.word	0x20000408
 80040fc:	20000464 	.word	0x20000464
 8004100:	2000046c 	.word	0x2000046c
 8004104:	20000454 	.word	0x20000454
 8004108:	20000350 	.word	0x20000350
 800410c:	2000034c 	.word	0x2000034c
 8004110:	2000045c 	.word	0x2000045c
 8004114:	20000460 	.word	0x20000460

08004118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411e:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <vTaskSwitchContext+0x90>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004126:	4b21      	ldr	r3, [pc, #132]	@ (80041ac <vTaskSwitchContext+0x94>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800412c:	e038      	b.n	80041a0 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <vTaskSwitchContext+0x94>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004134:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <vTaskSwitchContext+0x98>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	e008      	b.n	800414e <vTaskSwitchContext+0x36>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <vTaskSwitchContext+0x30>
 8004142:	b672      	cpsid	i
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	e7fd      	b.n	8004144 <vTaskSwitchContext+0x2c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	4919      	ldr	r1, [pc, #100]	@ (80041b4 <vTaskSwitchContext+0x9c>)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	0013      	movs	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	189b      	adds	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	585b      	ldr	r3, [r3, r1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ed      	beq.n	800413c <vTaskSwitchContext+0x24>
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	0013      	movs	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	189b      	adds	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <vTaskSwitchContext+0x9c>)
 800416c:	189b      	adds	r3, r3, r2
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	429a      	cmp	r2, r3
 8004184:	d104      	bne.n	8004190 <vTaskSwitchContext+0x78>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <vTaskSwitchContext+0xa0>)
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <vTaskSwitchContext+0x98>)
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b002      	add	sp, #8
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000474 	.word	0x20000474
 80041ac:	20000460 	.word	0x20000460
 80041b0:	20000454 	.word	0x20000454
 80041b4:	20000350 	.word	0x20000350
 80041b8:	2000034c 	.word	0x2000034c

080041bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041c4:	f000 f84e 	bl	8004264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <prvIdleTask+0x1c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d9f9      	bls.n	80041c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041d0:	f000 f9a6 	bl	8004520 <vPortYield>
		prvCheckTasksWaitingTermination();
 80041d4:	e7f6      	b.n	80041c4 <prvIdleTask+0x8>
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	20000350 	.word	0x20000350

080041dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	e00c      	b.n	8004202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	0013      	movs	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4a14      	ldr	r2, [pc, #80]	@ (8004244 <prvInitialiseTaskLists+0x68>)
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7ff fb4e 	bl	8003898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3301      	adds	r3, #1
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b06      	cmp	r3, #6
 8004206:	d9ef      	bls.n	80041e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004208:	4b0f      	ldr	r3, [pc, #60]	@ (8004248 <prvInitialiseTaskLists+0x6c>)
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fb44 	bl	8003898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <prvInitialiseTaskLists+0x70>)
 8004212:	0018      	movs	r0, r3
 8004214:	f7ff fb40 	bl	8003898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004218:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <prvInitialiseTaskLists+0x74>)
 800421a:	0018      	movs	r0, r3
 800421c:	f7ff fb3c 	bl	8003898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <prvInitialiseTaskLists+0x78>)
 8004222:	0018      	movs	r0, r3
 8004224:	f7ff fb38 	bl	8003898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <prvInitialiseTaskLists+0x7c>)
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff fb34 	bl	8003898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004230:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <prvInitialiseTaskLists+0x80>)
 8004232:	4a05      	ldr	r2, [pc, #20]	@ (8004248 <prvInitialiseTaskLists+0x6c>)
 8004234:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004236:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <prvInitialiseTaskLists+0x84>)
 8004238:	4a04      	ldr	r2, [pc, #16]	@ (800424c <prvInitialiseTaskLists+0x70>)
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000350 	.word	0x20000350
 8004248:	200003dc 	.word	0x200003dc
 800424c:	200003f0 	.word	0x200003f0
 8004250:	2000040c 	.word	0x2000040c
 8004254:	20000420 	.word	0x20000420
 8004258:	20000438 	.word	0x20000438
 800425c:	20000404 	.word	0x20000404
 8004260:	20000408 	.word	0x20000408

08004264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800426a:	e01a      	b.n	80042a2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800426c:	f000 f968 	bl	8004540 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004270:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <prvCheckTasksWaitingTermination+0x50>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	0018      	movs	r0, r3
 800427e:	f7ff fb8c 	bl	800399a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <prvCheckTasksWaitingTermination+0x54>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1e5a      	subs	r2, r3, #1
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <prvCheckTasksWaitingTermination+0x54>)
 800428a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <prvCheckTasksWaitingTermination+0x58>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <prvCheckTasksWaitingTermination+0x58>)
 8004294:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004296:	f000 f965 	bl	8004564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 f80f 	bl	80042c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <prvCheckTasksWaitingTermination+0x58>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e0      	bne.n	800426c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46c0      	nop			@ (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000420 	.word	0x20000420
 80042b8:	2000044c 	.word	0x2000044c
 80042bc:	20000434 	.word	0x20000434

080042c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2251      	movs	r2, #81	@ 0x51
 80042cc:	5c9b      	ldrb	r3, [r3, r2]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 fa72 	bl	80047c0 <vPortFree>
				vPortFree( pxTCB );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fa6e 	bl	80047c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042e4:	e011      	b.n	800430a <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2251      	movs	r2, #81	@ 0x51
 80042ea:	5c9b      	ldrb	r3, [r3, r2]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d104      	bne.n	80042fa <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 fa64 	bl	80047c0 <vPortFree>
	}
 80042f8:	e007      	b.n	800430a <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2251      	movs	r2, #81	@ 0x51
 80042fe:	5c9b      	ldrb	r3, [r3, r2]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d002      	beq.n	800430a <prvDeleteTCB+0x4a>
 8004304:	b672      	cpsid	i
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	e7fd      	b.n	8004306 <prvDeleteTCB+0x46>
	}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800431a:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <prvResetNextTaskUnblockTime+0x40>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <prvResetNextTaskUnblockTime+0x14>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <prvResetNextTaskUnblockTime+0x16>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <prvResetNextTaskUnblockTime+0x44>)
 8004330:	2201      	movs	r2, #1
 8004332:	4252      	negs	r2, r2
 8004334:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004336:	e008      	b.n	800434a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <prvResetNextTaskUnblockTime+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <prvResetNextTaskUnblockTime+0x44>)
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	20000404 	.word	0x20000404
 8004358:	2000046c 	.word	0x2000046c

0800435c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004366:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x90>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800436c:	4b20      	ldr	r3, [pc, #128]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3304      	adds	r3, #4
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fb11 	bl	800399a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	d10b      	bne.n	8004396 <prvAddCurrentTaskToDelayedList+0x3a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1d1a      	adds	r2, r3, #4
 800438a:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff faab 	bl	80038ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004394:	e026      	b.n	80043e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	18d3      	adds	r3, r2, r3
 800439c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800439e:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d209      	bcs.n	80043c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ae:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3304      	adds	r3, #4
 80043b8:	0019      	movs	r1, r3
 80043ba:	0010      	movs	r0, r2
 80043bc:	f7ff fab7 	bl	800392e <vListInsert>
}
 80043c0:	e010      	b.n	80043e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c2:	4b0e      	ldr	r3, [pc, #56]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3304      	adds	r3, #4
 80043cc:	0019      	movs	r1, r3
 80043ce:	0010      	movs	r0, r2
 80043d0:	f7ff faad 	bl	800392e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d202      	bcs.n	80043e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b004      	add	sp, #16
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000450 	.word	0x20000450
 80043f0:	2000034c 	.word	0x2000034c
 80043f4:	20000438 	.word	0x20000438
 80043f8:	20000408 	.word	0x20000408
 80043fc:	20000404 	.word	0x20000404
 8004400:	2000046c 	.word	0x2000046c

08004404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b04      	subs	r3, #4
 8004414:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2280      	movs	r2, #128	@ 0x80
 800441a:	0452      	lsls	r2, r2, #17
 800441c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b04      	subs	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b04      	subs	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004430:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <pxPortInitialiseStack+0x50>)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b14      	subs	r3, #20
 800443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b20      	subs	r3, #32
 8004446:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	08004459 	.word	0x08004459

08004458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800445e:	2300      	movs	r3, #0
 8004460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004462:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <prvTaskExitError+0x2c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	d002      	beq.n	8004470 <prvTaskExitError+0x18>
 800446a:	b672      	cpsid	i
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	e7fd      	b.n	800446c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004470:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0fc      	beq.n	8004474 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2000000c 	.word	0x2000000c

08004488 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

080044a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80044a0:	4a0b      	ldr	r2, [pc, #44]	@ (80044d0 <pxCurrentTCBConst2>)
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	3020      	adds	r0, #32
 80044a8:	f380 8809 	msr	PSP, r0
 80044ac:	2002      	movs	r0, #2
 80044ae:	f380 8814 	msr	CONTROL, r0
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80044b8:	46ae      	mov	lr, r5
 80044ba:	bc08      	pop	{r3}
 80044bc:	bc04      	pop	{r2}
 80044be:	b662      	cpsie	i
 80044c0:	4718      	bx	r3
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	46c0      	nop			@ (mov r8, r8)
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46c0      	nop			@ (mov r8, r8)

080044d0 <pxCurrentTCBConst2>:
 80044d0:	2000034c 	.word	0x2000034c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	46c0      	nop			@ (mov r8, r8)

080044d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80044dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004518 <xPortStartScheduler+0x40>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <xPortStartScheduler+0x40>)
 80044e2:	21ff      	movs	r1, #255	@ 0xff
 80044e4:	0409      	lsls	r1, r1, #16
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <xPortStartScheduler+0x40>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <xPortStartScheduler+0x40>)
 80044f0:	21ff      	movs	r1, #255	@ 0xff
 80044f2:	0609      	lsls	r1, r1, #24
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80044f8:	f000 f898 	bl	800462c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044fc:	4b07      	ldr	r3, [pc, #28]	@ (800451c <xPortStartScheduler+0x44>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004502:	f7ff ffcd 	bl	80044a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004506:	f7ff fe07 	bl	8004118 <vTaskSwitchContext>
	prvTaskExitError();
 800450a:	f7ff ffa5 	bl	8004458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800450e:	2300      	movs	r3, #0
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	e000ed20 	.word	0xe000ed20
 800451c:	2000000c 	.word	0x2000000c

08004520 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <vPortYield+0x1c>)
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	0552      	lsls	r2, r2, #21
 800452a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800452c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004530:	f3bf 8f6f 	isb	sy
}
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004544:	b672      	cpsid	i
    uxCriticalNesting++;
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <vPortEnterCritical+0x20>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <vPortEnterCritical+0x20>)
 800454e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004550:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004554:	f3bf 8f6f 	isb	sy
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	2000000c 	.word	0x2000000c

08004564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004568:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <vPortExitCritical+0x2c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <vPortExitCritical+0x12>
 8004570:	b672      	cpsid	i
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	e7fd      	b.n	8004572 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <vPortExitCritical+0x2c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	4b04      	ldr	r3, [pc, #16]	@ (8004590 <vPortExitCritical+0x2c>)
 800457e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004580:	4b03      	ldr	r3, [pc, #12]	@ (8004590 <vPortExitCritical+0x2c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d100      	bne.n	800458a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8004588:	b662      	cpsie	i
    }
}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000000c 	.word	0x2000000c

08004594 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004594:	f3ef 8010 	mrs	r0, PRIMASK
 8004598:	b672      	cpsid	i
 800459a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	0018      	movs	r0, r3

080045a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80045a0:	f380 8810 	msr	PRIMASK, r0
 80045a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
	...

080045b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045b0:	f3ef 8009 	mrs	r0, PSP
 80045b4:	4b0e      	ldr	r3, [pc, #56]	@ (80045f0 <pxCurrentTCBConst>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	3820      	subs	r0, #32
 80045ba:	6010      	str	r0, [r2, #0]
 80045bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80045be:	4644      	mov	r4, r8
 80045c0:	464d      	mov	r5, r9
 80045c2:	4656      	mov	r6, sl
 80045c4:	465f      	mov	r7, fp
 80045c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80045c8:	b508      	push	{r3, lr}
 80045ca:	b672      	cpsid	i
 80045cc:	f7ff fda4 	bl	8004118 <vTaskSwitchContext>
 80045d0:	b662      	cpsie	i
 80045d2:	bc0c      	pop	{r2, r3}
 80045d4:	6811      	ldr	r1, [r2, #0]
 80045d6:	6808      	ldr	r0, [r1, #0]
 80045d8:	3010      	adds	r0, #16
 80045da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80045dc:	46a0      	mov	r8, r4
 80045de:	46a9      	mov	r9, r5
 80045e0:	46b2      	mov	sl, r6
 80045e2:	46bb      	mov	fp, r7
 80045e4:	f380 8809 	msr	PSP, r0
 80045e8:	3820      	subs	r0, #32
 80045ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80045ec:	4718      	bx	r3
 80045ee:	46c0      	nop			@ (mov r8, r8)

080045f0 <pxCurrentTCBConst>:
 80045f0:	2000034c 	.word	0x2000034c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	46c0      	nop			@ (mov r8, r8)

080045f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80045fe:	f7ff ffc9 	bl	8004594 <ulSetInterruptMaskFromISR>
 8004602:	0003      	movs	r3, r0
 8004604:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004606:	f7ff fcd1 	bl	8003fac <xTaskIncrementTick>
 800460a:	1e03      	subs	r3, r0, #0
 800460c:	d003      	beq.n	8004616 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <SysTick_Handler+0x30>)
 8004610:	2280      	movs	r2, #128	@ 0x80
 8004612:	0552      	lsls	r2, r2, #21
 8004614:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff ffc1 	bl	80045a0 <vClearInterruptMaskFromISR>
}
 800461e:	46c0      	nop			@ (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <prvSetupTimerInterrupt+0x34>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <prvSetupTimerInterrupt+0x38>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800463c:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <prvSetupTimerInterrupt+0x3c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	22fa      	movs	r2, #250	@ 0xfa
 8004642:	0091      	lsls	r1, r2, #2
 8004644:	0018      	movs	r0, r3
 8004646:	f7fb fd5f 	bl	8000108 <__udivsi3>
 800464a:	0003      	movs	r3, r0
 800464c:	001a      	movs	r2, r3
 800464e:	4b07      	ldr	r3, [pc, #28]	@ (800466c <prvSetupTimerInterrupt+0x40>)
 8004650:	3a01      	subs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004654:	4b02      	ldr	r3, [pc, #8]	@ (8004660 <prvSetupTimerInterrupt+0x34>)
 8004656:	2207      	movs	r2, #7
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	e000e010 	.word	0xe000e010
 8004664:	e000e018 	.word	0xe000e018
 8004668:	20000000 	.word	0x20000000
 800466c:	e000e014 	.word	0xe000e014

08004670 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800467c:	f7ff fbfe 	bl	8003e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004680:	4b4a      	ldr	r3, [pc, #296]	@ (80047ac <pvPortMalloc+0x13c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004688:	f000 f8e4 	bl	8004854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800468c:	4b48      	ldr	r3, [pc, #288]	@ (80047b0 <pvPortMalloc+0x140>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4013      	ands	r3, r2
 8004694:	d000      	beq.n	8004698 <pvPortMalloc+0x28>
 8004696:	e07b      	b.n	8004790 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d013      	beq.n	80046c6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800469e:	2208      	movs	r2, #8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2207      	movs	r2, #7
 80046aa:	4013      	ands	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2207      	movs	r2, #7
 80046b2:	4393      	bics	r3, r2
 80046b4:	3308      	adds	r3, #8
 80046b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2207      	movs	r2, #7
 80046bc:	4013      	ands	r3, r2
 80046be:	d002      	beq.n	80046c6 <pvPortMalloc+0x56>
 80046c0:	b672      	cpsid	i
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	e7fd      	b.n	80046c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d061      	beq.n	8004790 <pvPortMalloc+0x120>
 80046cc:	4b39      	ldr	r3, [pc, #228]	@ (80047b4 <pvPortMalloc+0x144>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d85c      	bhi.n	8004790 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046d6:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <pvPortMalloc+0x148>)
 80046d8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80046da:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <pvPortMalloc+0x148>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046e0:	e004      	b.n	80046ec <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d903      	bls.n	80046fe <pvPortMalloc+0x8e>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f1      	bne.n	80046e2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046fe:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <pvPortMalloc+0x13c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d043      	beq.n	8004790 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2208      	movs	r2, #8
 800470e:	189b      	adds	r3, r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	2308      	movs	r3, #8
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	429a      	cmp	r2, r3
 8004728:	d917      	bls.n	800475a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2207      	movs	r2, #7
 8004736:	4013      	ands	r3, r2
 8004738:	d002      	beq.n	8004740 <pvPortMalloc+0xd0>
 800473a:	b672      	cpsid	i
 800473c:	46c0      	nop			@ (mov r8, r8)
 800473e:	e7fd      	b.n	800473c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 f8dd 	bl	8004914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800475a:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <pvPortMalloc+0x144>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	1ad2      	subs	r2, r2, r3
 8004764:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <pvPortMalloc+0x144>)
 8004766:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <pvPortMalloc+0x144>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b13      	ldr	r3, [pc, #76]	@ (80047bc <pvPortMalloc+0x14c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d203      	bcs.n	800477c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <pvPortMalloc+0x144>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <pvPortMalloc+0x14c>)
 800477a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <pvPortMalloc+0x140>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	431a      	orrs	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004790:	f7ff fb80 	bl	8003e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2207      	movs	r2, #7
 8004798:	4013      	ands	r3, r2
 800479a:	d002      	beq.n	80047a2 <pvPortMalloc+0x132>
 800479c:	b672      	cpsid	i
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	e7fd      	b.n	800479e <pvPortMalloc+0x12e>
	return pvReturn;
 80047a2:	68fb      	ldr	r3, [r7, #12]
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b006      	add	sp, #24
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20001080 	.word	0x20001080
 80047b0:	2000108c 	.word	0x2000108c
 80047b4:	20001084 	.word	0x20001084
 80047b8:	20001078 	.word	0x20001078
 80047bc:	20001088 	.word	0x20001088

080047c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d037      	beq.n	8004842 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047d2:	2308      	movs	r3, #8
 80047d4:	425b      	negs	r3, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	18d3      	adds	r3, r2, r3
 80047da:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4b19      	ldr	r3, [pc, #100]	@ (800484c <vPortFree+0x8c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	d102      	bne.n	80047f2 <vPortFree+0x32>
 80047ec:	b672      	cpsid	i
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	e7fd      	b.n	80047ee <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <vPortFree+0x40>
 80047fa:	b672      	cpsid	i
 80047fc:	46c0      	nop			@ (mov r8, r8)
 80047fe:	e7fd      	b.n	80047fc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b11      	ldr	r3, [pc, #68]	@ (800484c <vPortFree+0x8c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	d01a      	beq.n	8004842 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <vPortFree+0x8c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	43db      	mvns	r3, r3
 800481e:	401a      	ands	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004824:	f7ff fb2a 	bl	8003e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <vPortFree+0x90>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	18d2      	adds	r2, r2, r3
 8004832:	4b07      	ldr	r3, [pc, #28]	@ (8004850 <vPortFree+0x90>)
 8004834:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0018      	movs	r0, r3
 800483a:	f000 f86b 	bl	8004914 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800483e:	f7ff fb29 	bl	8003e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b004      	add	sp, #16
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	2000108c 	.word	0x2000108c
 8004850:	20001084 	.word	0x20001084

08004854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800485a:	23c0      	movs	r3, #192	@ 0xc0
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004860:	4b26      	ldr	r3, [pc, #152]	@ (80048fc <prvHeapInit+0xa8>)
 8004862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2207      	movs	r2, #7
 8004868:	4013      	ands	r3, r2
 800486a:	d00c      	beq.n	8004886 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3307      	adds	r3, #7
 8004870:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2207      	movs	r2, #7
 8004876:	4393      	bics	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	4b1e      	ldr	r3, [pc, #120]	@ (80048fc <prvHeapInit+0xa8>)
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800488a:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <prvHeapInit+0xac>)
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004890:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <prvHeapInit+0xac>)
 8004892:	2200      	movs	r2, #0
 8004894:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	18d3      	adds	r3, r2, r3
 800489c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800489e:	2208      	movs	r2, #8
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2207      	movs	r2, #7
 80048aa:	4393      	bics	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <prvHeapInit+0xb0>)
 80048b2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80048b4:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <prvHeapInit+0xb0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048bc:	4b11      	ldr	r3, [pc, #68]	@ (8004904 <prvHeapInit+0xb0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	1ad2      	subs	r2, r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <prvHeapInit+0xb0>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	4b0a      	ldr	r3, [pc, #40]	@ (8004908 <prvHeapInit+0xb4>)
 80048e0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4b09      	ldr	r3, [pc, #36]	@ (800490c <prvHeapInit+0xb8>)
 80048e8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <prvHeapInit+0xbc>)
 80048ec:	2280      	movs	r2, #128	@ 0x80
 80048ee:	0612      	lsls	r2, r2, #24
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b004      	add	sp, #16
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	20000478 	.word	0x20000478
 8004900:	20001078 	.word	0x20001078
 8004904:	20001080 	.word	0x20001080
 8004908:	20001088 	.word	0x20001088
 800490c:	20001084 	.word	0x20001084
 8004910:	2000108c 	.word	0x2000108c

08004914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800491c:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <prvInsertBlockIntoFreeList+0xa8>)
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e002      	b.n	8004928 <prvInsertBlockIntoFreeList+0x14>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d8f7      	bhi.n	8004922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	18d3      	adds	r3, r2, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d108      	bne.n	8004956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	18d2      	adds	r2, r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	18d2      	adds	r2, r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d118      	bne.n	800499c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <prvInsertBlockIntoFreeList+0xac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d00d      	beq.n	8004992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	18d2      	adds	r2, r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e008      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <prvInsertBlockIntoFreeList+0xac>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e003      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d002      	beq.n	80049b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b004      	add	sp, #16
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	20001078 	.word	0x20001078
 80049c0:	20001080 	.word	0x20001080

080049c4 <memset>:
 80049c4:	0003      	movs	r3, r0
 80049c6:	1882      	adds	r2, r0, r2
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	7019      	strb	r1, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <__libc_init_array>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	2600      	movs	r6, #0
 80049d8:	4c0c      	ldr	r4, [pc, #48]	@ (8004a0c <__libc_init_array+0x38>)
 80049da:	4d0d      	ldr	r5, [pc, #52]	@ (8004a10 <__libc_init_array+0x3c>)
 80049dc:	1b64      	subs	r4, r4, r5
 80049de:	10a4      	asrs	r4, r4, #2
 80049e0:	42a6      	cmp	r6, r4
 80049e2:	d109      	bne.n	80049f8 <__libc_init_array+0x24>
 80049e4:	2600      	movs	r6, #0
 80049e6:	f000 f819 	bl	8004a1c <_init>
 80049ea:	4c0a      	ldr	r4, [pc, #40]	@ (8004a14 <__libc_init_array+0x40>)
 80049ec:	4d0a      	ldr	r5, [pc, #40]	@ (8004a18 <__libc_init_array+0x44>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	42a6      	cmp	r6, r4
 80049f4:	d105      	bne.n	8004a02 <__libc_init_array+0x2e>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	00b3      	lsls	r3, r6, #2
 80049fa:	58eb      	ldr	r3, [r5, r3]
 80049fc:	4798      	blx	r3
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7ee      	b.n	80049e0 <__libc_init_array+0xc>
 8004a02:	00b3      	lsls	r3, r6, #2
 8004a04:	58eb      	ldr	r3, [r5, r3]
 8004a06:	4798      	blx	r3
 8004a08:	3601      	adds	r6, #1
 8004a0a:	e7f2      	b.n	80049f2 <__libc_init_array+0x1e>
 8004a0c:	08004ad0 	.word	0x08004ad0
 8004a10:	08004ad0 	.word	0x08004ad0
 8004a14:	08004ad4 	.word	0x08004ad4
 8004a18:	08004ad0 	.word	0x08004ad0

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
