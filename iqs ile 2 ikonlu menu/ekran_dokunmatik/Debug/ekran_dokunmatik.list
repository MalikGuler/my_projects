
ekran_dokunmatik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d8  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c0  080079c0  00009078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080079c0  080079c0  00009078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080079c0  080079c0  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079c0  080079c0  000089c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080079c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000078  08007a40  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08007a40  000093d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102eb  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fd  00000000  00000000  0001938b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b36  00000000  00000000  0001c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013854  00000000  00000000  0001d526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ad1  00000000  00000000  00030d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d05f  00000000  00000000  0004484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b18aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b08  00000000  00000000  000b18f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000b53f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080063d0 	.word	0x080063d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	080063d0 	.word	0x080063d0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af02      	add	r7, sp, #8
 8000246:	0005      	movs	r5, r0
 8000248:	000c      	movs	r4, r1
 800024a:	0010      	movs	r0, r2
 800024c:	0019      	movs	r1, r3
 800024e:	1dbb      	adds	r3, r7, #6
 8000250:	1c2a      	adds	r2, r5, #0
 8000252:	801a      	strh	r2, [r3, #0]
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	1c22      	adds	r2, r4, #0
 8000258:	801a      	strh	r2, [r3, #0]
 800025a:	1cbb      	adds	r3, r7, #2
 800025c:	1c02      	adds	r2, r0, #0
 800025e:	801a      	strh	r2, [r3, #0]
 8000260:	003b      	movs	r3, r7
 8000262:	1c0a      	adds	r2, r1, #0
 8000264:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000266:	1dbb      	adds	r3, r7, #6
 8000268:	8818      	ldrh	r0, [r3, #0]
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	8819      	ldrh	r1, [r3, #0]
 800026e:	1cbb      	adds	r3, r7, #2
 8000270:	881a      	ldrh	r2, [r3, #0]
 8000272:	003b      	movs	r3, r7
 8000274:	881c      	ldrh	r4, [r3, #0]
 8000276:	2318      	movs	r3, #24
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	0023      	movs	r3, r4
 8000280:	f001 fc24 	bl	8001acc <ST7735_FillRectangle>
}
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bdb0      	pop	{r4, r5, r7, pc}

0800028c <FillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void FillScreen(uint16_t color) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af02      	add	r7, sp, #8
 8000292:	0002      	movs	r2, r0
 8000294:	1dbb      	adds	r3, r7, #6
 8000296:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, 128, 64, color);
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2340      	movs	r3, #64	@ 0x40
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	2100      	movs	r1, #0
 80002a4:	2000      	movs	r0, #0
 80002a6:	f7ff ffcb 	bl	8000240 <fillRect>
}
 80002aa:	46c0      	nop			@ (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <IQS7222A_begin>:
  *         - If communication is successfully established then it is unlikely
  *           that initialization will fail.
  */

void IQS7222A_begin(uint8_t deviceAddress,GPIO_TypeDef* rdyPort ,uint8_t rdyPin)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6039      	str	r1, [r7, #0]
 80002bc:	0011      	movs	r1, r2
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	1c02      	adds	r2, r0, #0
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	1dbb      	adds	r3, r7, #6
 80002c6:	1c0a      	adds	r2, r1, #0
 80002c8:	701a      	strb	r2, [r3, #0]
    iqs7222a.deviceAddress = deviceAddress;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <IQS7222A_begin+0x44>)
 80002cc:	1dfa      	adds	r2, r7, #7
 80002ce:	2141      	movs	r1, #65	@ 0x41
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	545a      	strb	r2, [r3, r1]
    iqs7222a.readyPort = rdyPort;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <IQS7222A_begin+0x44>)
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	645a      	str	r2, [r3, #68]	@ 0x44
    iqs7222a.readyPin = rdyPin;
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <IQS7222A_begin+0x44>)
 80002dc:	1dba      	adds	r2, r7, #6
 80002de:	2148      	movs	r1, #72	@ 0x48
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	545a      	strb	r2, [r3, r1]
    iqs7222a.state.state = IQS7222A_STATE_START;
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <IQS7222A_begin+0x44>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
    iqs7222a.state.init_state = IQS7222A_INIT_VERIFY_PRODUCT;
 80002ea:	4b03      	ldr	r3, [pc, #12]	@ (80002f8 <IQS7222A_begin+0x44>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	705a      	strb	r2, [r3, #1]
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b002      	add	sp, #8
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000094 	.word	0x20000094

080002fc <IQS7222A_init>:
  *           one of the cases is not able to finish.
  *         - See serial communication to find the ERROR case
  */

bool IQS7222A_init(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
    uint16_t prod_num;
    uint8_t ver_maj, ver_min;

    switch (iqs7222a.state.init_state)
 8000302:	4b89      	ldr	r3, [pc, #548]	@ (8000528 <IQS7222A_init+0x22c>)
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	2b0c      	cmp	r3, #12
 8000308:	d900      	bls.n	800030c <IQS7222A_init+0x10>
 800030a:	e0f3      	b.n	80004f4 <IQS7222A_init+0x1f8>
 800030c:	009a      	lsls	r2, r3, #2
 800030e:	4b87      	ldr	r3, [pc, #540]	@ (800052c <IQS7222A_init+0x230>)
 8000310:	18d3      	adds	r3, r2, r3
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	469f      	mov	pc, r3
    {
        case IQS7222A_INIT_VERIFY_PRODUCT:
            if (iqs7222a_deviceRDY)
 8000316:	4b86      	ldr	r3, [pc, #536]	@ (8000530 <IQS7222A_init+0x234>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d100      	bne.n	8000320 <IQS7222A_init+0x24>
 800031e:	e0eb      	b.n	80004f8 <IQS7222A_init+0x1fc>
            {
                printf("\tIQS7222A_INIT_VERIFY_PRODUCT\n");
 8000320:	4b84      	ldr	r3, [pc, #528]	@ (8000534 <IQS7222A_init+0x238>)
 8000322:	0018      	movs	r0, r3
 8000324:	f005 f9b6 	bl	8005694 <puts>
                prod_num = IQS7222A_getProductNum(RESTART);
 8000328:	1dbc      	adds	r4, r7, #6
 800032a:	2000      	movs	r0, #0
 800032c:	f000 fa0c 	bl	8000748 <IQS7222A_getProductNum>
 8000330:	0003      	movs	r3, r0
 8000332:	8023      	strh	r3, [r4, #0]
                ver_maj = IQS7222A_getmajorVersion(RESTART);
 8000334:	1d7c      	adds	r4, r7, #5
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fa46 	bl	80007c8 <IQS7222A_getmajorVersion>
 800033c:	0003      	movs	r3, r0
 800033e:	7023      	strb	r3, [r4, #0]
                ver_min = IQS7222A_getminorVersion(STOP);
 8000340:	1d3c      	adds	r4, r7, #4
 8000342:	2001      	movs	r0, #1
 8000344:	f000 fa62 	bl	800080c <IQS7222A_getminorVersion>
 8000348:	0003      	movs	r3, r0
 800034a:	7023      	strb	r3, [r4, #0]
                printf("\t\tProduct number is: %d v%d.%d\n", prod_num, ver_maj, ver_min);
 800034c:	1dbb      	adds	r3, r7, #6
 800034e:	8819      	ldrh	r1, [r3, #0]
 8000350:	1d7b      	adds	r3, r7, #5
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4877      	ldr	r0, [pc, #476]	@ (8000538 <IQS7222A_init+0x23c>)
 800035a:	f005 f935 	bl	80055c8 <iprintf>
                if (prod_num == IQS7222A_PRODUCT_NUM)
 800035e:	1dbb      	adds	r3, r7, #6
 8000360:	881a      	ldrh	r2, [r3, #0]
 8000362:	23d2      	movs	r3, #210	@ 0xd2
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	429a      	cmp	r2, r3
 8000368:	d107      	bne.n	800037a <IQS7222A_init+0x7e>
                {
                    printf("\t\tIQS7222A Release UI Confirmed!\n");
 800036a:	4b74      	ldr	r3, [pc, #464]	@ (800053c <IQS7222A_init+0x240>)
 800036c:	0018      	movs	r0, r3
 800036e:	f005 f991 	bl	8005694 <puts>
                    iqs7222a.state.init_state = IQS7222A_INIT_READ_RESET;
 8000372:	4b6d      	ldr	r3, [pc, #436]	@ (8000528 <IQS7222A_init+0x22c>)
 8000374:	2202      	movs	r2, #2
 8000376:	705a      	strb	r2, [r3, #1]
                {
                    printf("\t\tDevice is not a IQS7222A!\n");
                    iqs7222a.state.init_state = IQS7222A_INIT_NONE;
                }
            }
            break;
 8000378:	e0be      	b.n	80004f8 <IQS7222A_init+0x1fc>
                    printf("\t\tDevice is not a IQS7222A!\n");
 800037a:	4b71      	ldr	r3, [pc, #452]	@ (8000540 <IQS7222A_init+0x244>)
 800037c:	0018      	movs	r0, r3
 800037e:	f005 f989 	bl	8005694 <puts>
                    iqs7222a.state.init_state = IQS7222A_INIT_NONE;
 8000382:	4b69      	ldr	r3, [pc, #420]	@ (8000528 <IQS7222A_init+0x22c>)
 8000384:	2200      	movs	r2, #0
 8000386:	705a      	strb	r2, [r3, #1]
            break;
 8000388:	e0b6      	b.n	80004f8 <IQS7222A_init+0x1fc>

        case IQS7222A_INIT_READ_RESET:
            if (iqs7222a_deviceRDY)
 800038a:	4b69      	ldr	r3, [pc, #420]	@ (8000530 <IQS7222A_init+0x234>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d100      	bne.n	8000394 <IQS7222A_init+0x98>
 8000392:	e0b3      	b.n	80004fc <IQS7222A_init+0x200>
            {
                printf("\tIQS7222A_INIT_READ_RESET\n");
 8000394:	4b6b      	ldr	r3, [pc, #428]	@ (8000544 <IQS7222A_init+0x248>)
 8000396:	0018      	movs	r0, r3
 8000398:	f005 f97c 	bl	8005694 <puts>
                IQS7222A_updateInfoFlags(RESTART);
 800039c:	2000      	movs	r0, #0
 800039e:	f000 fb47 	bl	8000a30 <IQS7222A_updateInfoFlags>
                if (IQS7222A_checkReset())
 80003a2:	f000 f9c3 	bl	800072c <IQS7222A_checkReset>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d007      	beq.n	80003ba <IQS7222A_init+0xbe>
                {
                    printf("\t\tReset event occurred.\n");
 80003aa:	4b67      	ldr	r3, [pc, #412]	@ (8000548 <IQS7222A_init+0x24c>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f005 f971 	bl	8005694 <puts>
                    iqs7222a.state.init_state = IQS7222A_INIT_UPDATE_SETTINGS;
 80003b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000528 <IQS7222A_init+0x22c>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	705a      	strb	r2, [r3, #1]
                {
                    printf("\t\tNo Reset Event Detected - Request SW Reset\n");
                    iqs7222a.state.init_state = IQS7222A_INIT_CHIP_RESET;
                }
            }
            break;
 80003b8:	e0a0      	b.n	80004fc <IQS7222A_init+0x200>
                    printf("\t\tNo Reset Event Detected - Request SW Reset\n");
 80003ba:	4b64      	ldr	r3, [pc, #400]	@ (800054c <IQS7222A_init+0x250>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f005 f969 	bl	8005694 <puts>
                    iqs7222a.state.init_state = IQS7222A_INIT_CHIP_RESET;
 80003c2:	4b59      	ldr	r3, [pc, #356]	@ (8000528 <IQS7222A_init+0x22c>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	705a      	strb	r2, [r3, #1]
            break;
 80003c8:	e098      	b.n	80004fc <IQS7222A_init+0x200>

        case IQS7222A_INIT_CHIP_RESET:
            if (iqs7222a_deviceRDY)
 80003ca:	4b59      	ldr	r3, [pc, #356]	@ (8000530 <IQS7222A_init+0x234>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d100      	bne.n	80003d4 <IQS7222A_init+0xd8>
 80003d2:	e095      	b.n	8000500 <IQS7222A_init+0x204>
            {
                printf("\tIQS7222A_INIT_CHIP_RESET\n");
 80003d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000550 <IQS7222A_init+0x254>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f005 f95c 	bl	8005694 <puts>
                IQS7222A_SW_Reset(STOP);
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 fa8f 	bl	8000900 <IQS7222A_SW_Reset>
                printf("\t\tSoftware Reset Bit Set.\n");
 80003e2:	4b5c      	ldr	r3, [pc, #368]	@ (8000554 <IQS7222A_init+0x258>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f005 f955 	bl	8005694 <puts>
                HAL_Delay(100);
 80003ea:	2064      	movs	r0, #100	@ 0x64
 80003ec:	f002 fa3a 	bl	8002864 <HAL_Delay>
                iqs7222a.state.init_state = IQS7222A_INIT_READ_RESET;
 80003f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000528 <IQS7222A_init+0x22c>)
 80003f2:	2202      	movs	r2, #2
 80003f4:	705a      	strb	r2, [r3, #1]
            }
            break;
 80003f6:	e083      	b.n	8000500 <IQS7222A_init+0x204>

        case IQS7222A_INIT_UPDATE_SETTINGS:
            if (iqs7222a_deviceRDY)
 80003f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000530 <IQS7222A_init+0x234>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d100      	bne.n	8000402 <IQS7222A_init+0x106>
 8000400:	e080      	b.n	8000504 <IQS7222A_init+0x208>
            {
                printf("\tIQS7222A_INIT_UPDATE_SETTINGS\n");
 8000402:	4b55      	ldr	r3, [pc, #340]	@ (8000558 <IQS7222A_init+0x25c>)
 8000404:	0018      	movs	r0, r3
 8000406:	f005 f945 	bl	8005694 <puts>
                IQS7222A_writeMM(RESTART);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fba4 	bl	8000b58 <IQS7222A_writeMM>
                iqs7222a.state.init_state = IQS7222A_INIT_ACK_RESET;
 8000410:	4b45      	ldr	r3, [pc, #276]	@ (8000528 <IQS7222A_init+0x22c>)
 8000412:	2206      	movs	r2, #6
 8000414:	705a      	strb	r2, [r3, #1]
            }
            break;
 8000416:	e075      	b.n	8000504 <IQS7222A_init+0x208>

        case IQS7222A_INIT_ACK_RESET:
            if (iqs7222a_deviceRDY)
 8000418:	4b45      	ldr	r3, [pc, #276]	@ (8000530 <IQS7222A_init+0x234>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d100      	bne.n	8000422 <IQS7222A_init+0x126>
 8000420:	e072      	b.n	8000508 <IQS7222A_init+0x20c>
            {
                printf("\tIQS7222A_INIT_ACK_RESET\n");
 8000422:	4b4e      	ldr	r3, [pc, #312]	@ (800055c <IQS7222A_init+0x260>)
 8000424:	0018      	movs	r0, r3
 8000426:	f005 f935 	bl	8005694 <puts>
                IQS7222A_acknowledgeReset(STOP);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fa10 	bl	8000850 <IQS7222A_acknowledgeReset>
                iqs7222a.state.init_state = IQS7222A_INIT_ATI;
 8000430:	4b3d      	ldr	r3, [pc, #244]	@ (8000528 <IQS7222A_init+0x22c>)
 8000432:	2207      	movs	r2, #7
 8000434:	705a      	strb	r2, [r3, #1]
            }
            break;
 8000436:	e067      	b.n	8000508 <IQS7222A_init+0x20c>

        case IQS7222A_INIT_ATI:
            if (iqs7222a_deviceRDY)
 8000438:	4b3d      	ldr	r3, [pc, #244]	@ (8000530 <IQS7222A_init+0x234>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d065      	beq.n	800050c <IQS7222A_init+0x210>
            {
                printf("\tIQS7222A_INIT_ATI\n");
 8000440:	4b47      	ldr	r3, [pc, #284]	@ (8000560 <IQS7222A_init+0x264>)
 8000442:	0018      	movs	r0, r3
 8000444:	f005 f926 	bl	8005694 <puts>
                IQS7222A_ReATI(STOP);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fa2d 	bl	80008a8 <IQS7222A_ReATI>
                iqs7222a.state.init_state = IQS7222A_INIT_WAIT_FOR_ATI;
 800044e:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <IQS7222A_init+0x22c>)
 8000450:	2208      	movs	r2, #8
 8000452:	705a      	strb	r2, [r3, #1]
                printf("\tIQS7222A_INIT_WAIT_FOR_ATI\n");
 8000454:	4b43      	ldr	r3, [pc, #268]	@ (8000564 <IQS7222A_init+0x268>)
 8000456:	0018      	movs	r0, r3
 8000458:	f005 f91c 	bl	8005694 <puts>
            }
            break;
 800045c:	e056      	b.n	800050c <IQS7222A_init+0x210>

        case IQS7222A_INIT_WAIT_FOR_ATI:
            if (iqs7222a_deviceRDY)
 800045e:	4b34      	ldr	r3, [pc, #208]	@ (8000530 <IQS7222A_init+0x234>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d054      	beq.n	8000510 <IQS7222A_init+0x214>
            {
                if (!IQS7222A_readATIactive())
 8000466:	f000 f94f 	bl	8000708 <IQS7222A_readATIactive>
 800046a:	0003      	movs	r3, r0
 800046c:	001a      	movs	r2, r3
 800046e:	2301      	movs	r3, #1
 8000470:	4053      	eors	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d04b      	beq.n	8000510 <IQS7222A_init+0x214>
                {
                    printf("\t\tDONE\n");
 8000478:	4b3b      	ldr	r3, [pc, #236]	@ (8000568 <IQS7222A_init+0x26c>)
 800047a:	0018      	movs	r0, r3
 800047c:	f005 f90a 	bl	8005694 <puts>
                    iqs7222a.state.init_state = IQS7222A_INIT_READ_DATA;
 8000480:	4b29      	ldr	r3, [pc, #164]	@ (8000528 <IQS7222A_init+0x22c>)
 8000482:	2209      	movs	r2, #9
 8000484:	705a      	strb	r2, [r3, #1]
                }
            }
            break;
 8000486:	e043      	b.n	8000510 <IQS7222A_init+0x214>

        case IQS7222A_INIT_READ_DATA:
            if (iqs7222a_deviceRDY)
 8000488:	4b29      	ldr	r3, [pc, #164]	@ (8000530 <IQS7222A_init+0x234>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d041      	beq.n	8000514 <IQS7222A_init+0x218>
            {
                printf("\tIQS7222A_INIT_READ_DATA\n");
 8000490:	4b36      	ldr	r3, [pc, #216]	@ (800056c <IQS7222A_init+0x270>)
 8000492:	0018      	movs	r0, r3
 8000494:	f005 f8fe 	bl	8005694 <puts>
                IQS7222A_queueValueUpdates();
 8000498:	f000 f8dc 	bl	8000654 <IQS7222A_queueValueUpdates>
                iqs7222a.state.init_state = IQS7222A_INIT_ACTIVATE_EVENT_MODE;
 800049c:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <IQS7222A_init+0x22c>)
 800049e:	220a      	movs	r2, #10
 80004a0:	705a      	strb	r2, [r3, #1]
            }
            break;
 80004a2:	e037      	b.n	8000514 <IQS7222A_init+0x218>

        case IQS7222A_INIT_ACTIVATE_STREAM_IN_TOUCH_MODE:
            if (iqs7222a_deviceRDY)
 80004a4:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <IQS7222A_init+0x234>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d035      	beq.n	8000518 <IQS7222A_init+0x21c>
            {
                printf("\tIQS7222A_INIT_ACTIVATE_STREAM_IN_TOUCH_MODE\n");
 80004ac:	4b30      	ldr	r3, [pc, #192]	@ (8000570 <IQS7222A_init+0x274>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f005 f8f0 	bl	8005694 <puts>
                IQS7222A_setStreamInTouchMode(STOP);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 fa85 	bl	80009c4 <IQS7222A_setStreamInTouchMode>
                iqs7222a.state.init_state = IQS7222A_INIT_DONE;
 80004ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <IQS7222A_init+0x22c>)
 80004bc:	220c      	movs	r2, #12
 80004be:	705a      	strb	r2, [r3, #1]
            }
            break;
 80004c0:	e02a      	b.n	8000518 <IQS7222A_init+0x21c>

        case IQS7222A_INIT_ACTIVATE_EVENT_MODE:
            if (iqs7222a_deviceRDY)
 80004c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <IQS7222A_init+0x234>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d028      	beq.n	800051c <IQS7222A_init+0x220>
            {
                printf("\tIQS7222A_INIT_ACTIVATE_EVENT_MODE\n");
 80004ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000574 <IQS7222A_init+0x278>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f005 f8e1 	bl	8005694 <puts>
                IQS7222A_setEventMode(STOP);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fa40 	bl	8000958 <IQS7222A_setEventMode>
                iqs7222a.state.init_state = IQS7222A_INIT_DONE;
 80004d8:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <IQS7222A_init+0x22c>)
 80004da:	220c      	movs	r2, #12
 80004dc:	705a      	strb	r2, [r3, #1]
            }
            break;
 80004de:	e01d      	b.n	800051c <IQS7222A_init+0x220>

        case IQS7222A_INIT_DONE:
            printf("\tIQS7222A_INIT_DONE\n");
 80004e0:	4b25      	ldr	r3, [pc, #148]	@ (8000578 <IQS7222A_init+0x27c>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f005 f8d6 	bl	8005694 <puts>
            iqs7222a.new_data_available = true;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <IQS7222A_init+0x22c>)
 80004ea:	2240      	movs	r2, #64	@ 0x40
 80004ec:	2101      	movs	r1, #1
 80004ee:	5499      	strb	r1, [r3, r2]
            return true;
 80004f0:	2301      	movs	r3, #1
 80004f2:	e015      	b.n	8000520 <IQS7222A_init+0x224>

        default:
            break;
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	e012      	b.n	800051e <IQS7222A_init+0x222>
            break;
 80004f8:	46c0      	nop			@ (mov r8, r8)
 80004fa:	e010      	b.n	800051e <IQS7222A_init+0x222>
            break;
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e00e      	b.n	800051e <IQS7222A_init+0x222>
            break;
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	e00c      	b.n	800051e <IQS7222A_init+0x222>
            break;
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	e00a      	b.n	800051e <IQS7222A_init+0x222>
            break;
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	e008      	b.n	800051e <IQS7222A_init+0x222>
            break;
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	e006      	b.n	800051e <IQS7222A_init+0x222>
            break;
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	e004      	b.n	800051e <IQS7222A_init+0x222>
            break;
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	e002      	b.n	800051e <IQS7222A_init+0x222>
            break;
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	e000      	b.n	800051e <IQS7222A_init+0x222>
            break;
 800051c:	46c0      	nop			@ (mov r8, r8)
    }

    return false;
 800051e:	2300      	movs	r3, #0
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b003      	add	sp, #12
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	20000094 	.word	0x20000094
 800052c:	08006660 	.word	0x08006660
 8000530:	2000011e 	.word	0x2000011e
 8000534:	080063e8 	.word	0x080063e8
 8000538:	08006408 	.word	0x08006408
 800053c:	08006428 	.word	0x08006428
 8000540:	0800644c 	.word	0x0800644c
 8000544:	08006468 	.word	0x08006468
 8000548:	08006484 	.word	0x08006484
 800054c:	0800649c 	.word	0x0800649c
 8000550:	080064cc 	.word	0x080064cc
 8000554:	080064e8 	.word	0x080064e8
 8000558:	08006504 	.word	0x08006504
 800055c:	08006524 	.word	0x08006524
 8000560:	08006540 	.word	0x08006540
 8000564:	08006554 	.word	0x08006554
 8000568:	08006570 	.word	0x08006570
 800056c:	08006578 	.word	0x08006578
 8000570:	08006594 	.word	0x08006594
 8000574:	080065c4 	.word	0x080065c4
 8000578:	080065e8 	.word	0x080065e8

0800057c <IQS7222A_run>:
  *
  *         queueValueUpdates can be edited by the user if other data should be
  *         read every time a RDY window is received.
  */
void IQS7222A_run(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    switch (iqs7222a.state.state)
 8000580:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <IQS7222A_run+0xc0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d856      	bhi.n	8000636 <IQS7222A_run+0xba>
 8000588:	009a      	lsls	r2, r3, #2
 800058a:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <IQS7222A_run+0xc4>)
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	469f      	mov	pc, r3
    {
        case IQS7222A_STATE_START:
            printf("IQS7222A Initialization:\n");
 8000592:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <IQS7222A_run+0xc8>)
 8000594:	0018      	movs	r0, r3
 8000596:	f005 f87d 	bl	8005694 <puts>
            iqs7222a.state.state = IQS7222A_STATE_INIT;
 800059a:	4b28      	ldr	r3, [pc, #160]	@ (800063c <IQS7222A_run+0xc0>)
 800059c:	2202      	movs	r2, #2
 800059e:	701a      	strb	r2, [r3, #0]
            break;
 80005a0:	e049      	b.n	8000636 <IQS7222A_run+0xba>

        case IQS7222A_STATE_INIT:
            if (IQS7222A_init())
 80005a2:	f7ff feab 	bl	80002fc <IQS7222A_init>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d040      	beq.n	800062c <IQS7222A_run+0xb0>
            {
                printf("IQS7222A Initialization complete!\n\n");
 80005aa:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <IQS7222A_run+0xcc>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f005 f871 	bl	8005694 <puts>
                iqs7222a.state.state = IQS7222A_STATE_RUN;
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <IQS7222A_run+0xc0>)
 80005b4:	2205      	movs	r2, #5
 80005b6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80005b8:	e038      	b.n	800062c <IQS7222A_run+0xb0>

        case IQS7222A_STATE_SW_RESET:
            if (iqs7222a_deviceRDY)
 80005ba:	4b24      	ldr	r3, [pc, #144]	@ (800064c <IQS7222A_run+0xd0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d036      	beq.n	8000630 <IQS7222A_run+0xb4>
            {
                IQS7222A_SW_Reset(STOP);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 f99c 	bl	8000900 <IQS7222A_SW_Reset>
                iqs7222a.state.state = IQS7222A_STATE_RUN;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <IQS7222A_run+0xc0>)
 80005ca:	2205      	movs	r2, #5
 80005cc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80005ce:	e02f      	b.n	8000630 <IQS7222A_run+0xb4>

        case IQS7222A_STATE_CHECK_RESET:
            if (IQS7222A_checkReset())
 80005d0:	f000 f8ac 	bl	800072c <IQS7222A_checkReset>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d00e      	beq.n	80005f6 <IQS7222A_run+0x7a>
            {
                printf("Reset Occurred!\n\n");
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <IQS7222A_run+0xd4>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f005 f85a 	bl	8005694 <puts>
                iqs7222a.new_data_available = false;
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <IQS7222A_run+0xc0>)
 80005e2:	2240      	movs	r2, #64	@ 0x40
 80005e4:	2100      	movs	r1, #0
 80005e6:	5499      	strb	r1, [r3, r2]
                iqs7222a.state.state = IQS7222A_STATE_START;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <IQS7222A_run+0xc0>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
                iqs7222a.state.init_state = IQS7222A_INIT_VERIFY_PRODUCT;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <IQS7222A_run+0xc0>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	705a      	strb	r2, [r3, #1]
            else
            {
                iqs7222a.new_data_available = true;
                iqs7222a.state.state = IQS7222A_STATE_RUN;
            }
            break;
 80005f4:	e01f      	b.n	8000636 <IQS7222A_run+0xba>
                iqs7222a.new_data_available = true;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <IQS7222A_run+0xc0>)
 80005f8:	2240      	movs	r2, #64	@ 0x40
 80005fa:	2101      	movs	r1, #1
 80005fc:	5499      	strb	r1, [r3, r2]
                iqs7222a.state.state = IQS7222A_STATE_RUN;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <IQS7222A_run+0xc0>)
 8000600:	2205      	movs	r2, #5
 8000602:	701a      	strb	r2, [r3, #0]
            break;
 8000604:	e017      	b.n	8000636 <IQS7222A_run+0xba>

        case IQS7222A_STATE_RUN:
            if (iqs7222a_deviceRDY)
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <IQS7222A_run+0xd0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d012      	beq.n	8000634 <IQS7222A_run+0xb8>
            {
                IQS7222A_queueValueUpdates();
 800060e:	f000 f821 	bl	8000654 <IQS7222A_queueValueUpdates>
                iqs7222a_deviceRDY = false;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <IQS7222A_run+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
                iqs7222a.new_data_available = false;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <IQS7222A_run+0xc0>)
 800061a:	2240      	movs	r2, #64	@ 0x40
 800061c:	2100      	movs	r1, #0
 800061e:	5499      	strb	r1, [r3, r2]
                iqs7222a.state.state = IQS7222A_STATE_CHECK_RESET;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <IQS7222A_run+0xc0>)
 8000622:	2204      	movs	r2, #4
 8000624:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000626:	e005      	b.n	8000634 <IQS7222A_run+0xb8>
        case IQS7222A_STATE_NONE:
            break;
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	e004      	b.n	8000636 <IQS7222A_run+0xba>
            break;
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	e002      	b.n	8000636 <IQS7222A_run+0xba>
            break;
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	e000      	b.n	8000636 <IQS7222A_run+0xba>
            break;
 8000634:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000094 	.word	0x20000094
 8000640:	08006694 	.word	0x08006694
 8000644:	080065fc 	.word	0x080065fc
 8000648:	08006618 	.word	0x08006618
 800064c:	2000011e 	.word	0x2000011e
 8000650:	0800663c 	.word	0x0800663c

08000654 <IQS7222A_queueValueUpdates>:
  * @retval None.
  * @note   Any Address in the memory map can be read from here.
  */

void IQS7222A_queueValueUpdates(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
    uint8_t transferBytes[16];

    // Belirtilen adres alanını oku
    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_INFOFLAGS, 16, transferBytes, STOP);
 800065a:	4829      	ldr	r0, [pc, #164]	@ (8000700 <IQS7222A_queueValueUpdates+0xac>)
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	003b      	movs	r3, r7
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2310      	movs	r3, #16
 8000666:	2210      	movs	r2, #16
 8000668:	2144      	movs	r1, #68	@ 0x44
 800066a:	f000 fee3 	bl	8001434 <IQS7222A_ReadRandomBytes>

    IQSMemoryMap.SYSTEM_STATUS[0]       = transferBytes[0];
 800066e:	003b      	movs	r3, r7
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 8000674:	751a      	strb	r2, [r3, #20]
    IQSMemoryMap.SYSTEM_STATUS[1]       = transferBytes[1];
 8000676:	003b      	movs	r3, r7
 8000678:	785a      	ldrb	r2, [r3, #1]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 800067c:	755a      	strb	r2, [r3, #21]

    IQSMemoryMap.EVENTS[0]              = transferBytes[2];
 800067e:	003b      	movs	r3, r7
 8000680:	789a      	ldrb	r2, [r3, #2]
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 8000684:	759a      	strb	r2, [r3, #22]
    IQSMemoryMap.EVENTS[1]              = transferBytes[3];
 8000686:	003b      	movs	r3, r7
 8000688:	78da      	ldrb	r2, [r3, #3]
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 800068c:	75da      	strb	r2, [r3, #23]

    IQSMemoryMap.PROX_EVENT_STATES[0]   = transferBytes[4];
 800068e:	003b      	movs	r3, r7
 8000690:	791a      	ldrb	r2, [r3, #4]
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 8000694:	761a      	strb	r2, [r3, #24]
    IQSMemoryMap.PROX_EVENT_STATES[1]   = transferBytes[5];
 8000696:	003b      	movs	r3, r7
 8000698:	795a      	ldrb	r2, [r3, #5]
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 800069c:	765a      	strb	r2, [r3, #25]

    IQSMemoryMap.TOUCH_EVENT_STATES[0]  = transferBytes[6];
 800069e:	003b      	movs	r3, r7
 80006a0:	799a      	ldrb	r2, [r3, #6]
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006a4:	769a      	strb	r2, [r3, #26]
    IQSMemoryMap.TOUCH_EVENT_STATES[1]  = transferBytes[7];
 80006a6:	003b      	movs	r3, r7
 80006a8:	79da      	ldrb	r2, [r3, #7]
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006ac:	76da      	strb	r2, [r3, #27]

    IQSMemoryMap.SLIDER_0_OUTPUT[0]     = transferBytes[8];
 80006ae:	003b      	movs	r3, r7
 80006b0:	7a1a      	ldrb	r2, [r3, #8]
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006b4:	771a      	strb	r2, [r3, #28]
    IQSMemoryMap.SLIDER_0_OUTPUT[1]     = transferBytes[9];
 80006b6:	003b      	movs	r3, r7
 80006b8:	7a5a      	ldrb	r2, [r3, #9]
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006bc:	775a      	strb	r2, [r3, #29]

    IQSMemoryMap.SLIDER_1_OUTPUT[0]     = transferBytes[10];
 80006be:	003b      	movs	r3, r7
 80006c0:	7a9a      	ldrb	r2, [r3, #10]
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006c4:	779a      	strb	r2, [r3, #30]
    IQSMemoryMap.SLIDER_1_OUTPUT[1]     = transferBytes[11];
 80006c6:	003b      	movs	r3, r7
 80006c8:	7ada      	ldrb	r2, [r3, #11]
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006cc:	77da      	strb	r2, [r3, #31]

    IQSMemoryMap.SLIDER_0_STATUS[0]     = transferBytes[12];
 80006ce:	003b      	movs	r3, r7
 80006d0:	7b19      	ldrb	r1, [r3, #12]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006d4:	2220      	movs	r2, #32
 80006d6:	5499      	strb	r1, [r3, r2]
    IQSMemoryMap.SLIDER_0_STATUS[1]     = transferBytes[13];
 80006d8:	003b      	movs	r3, r7
 80006da:	7b59      	ldrb	r1, [r3, #13]
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006de:	2221      	movs	r2, #33	@ 0x21
 80006e0:	5499      	strb	r1, [r3, r2]

    IQSMemoryMap.SLIDER_1_STATUS[0]     = transferBytes[14];
 80006e2:	003b      	movs	r3, r7
 80006e4:	7b99      	ldrb	r1, [r3, #14]
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006e8:	2222      	movs	r2, #34	@ 0x22
 80006ea:	5499      	strb	r1, [r3, r2]
    IQSMemoryMap.SLIDER_1_STATUS[1]     = transferBytes[15];
 80006ec:	003b      	movs	r3, r7
 80006ee:	7bd9      	ldrb	r1, [r3, #15]
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <IQS7222A_queueValueUpdates+0xb0>)
 80006f2:	2223      	movs	r2, #35	@ 0x23
 80006f4:	5499      	strb	r1, [r3, r2]
}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	2000012c 	.word	0x2000012c
 8000704:	200000e0 	.word	0x200000e0

08000708 <IQS7222A_readATIactive>:
  *         might exhibit unwanted behaviour. Thus it is advised to wait for
  *         the routine to complete before continuing.
  */

bool IQS7222A_readATIactive(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    // Info bayraklarını güncelle
    IQS7222A_updateInfoFlags(STOP);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f98f 	bl	8000a30 <IQS7222A_updateInfoFlags>

    // ATI_ACTIVE_BIT set mi diye kontrol et
    return IQS7222A_getBit(IQSMemoryMap.SYSTEM_STATUS[0], IQS7222A_ATI_ACTIVE_BIT);
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <IQS7222A_readATIactive+0x20>)
 8000714:	7d1b      	ldrb	r3, [r3, #20]
 8000716:	2100      	movs	r1, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f000 ffb5 	bl	8001688 <IQS7222A_getBit>
 800071e:	0003      	movs	r3, r0
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	200000e0 	.word	0x200000e0

0800072c <IQS7222A_checkReset>:
  *         the begin function. After new device settings have been reloaded the
  *         acknowledge reset function can be used to clear the reset flag.
  */

bool IQS7222A_checkReset(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    return IQS7222A_getBit(IQSMemoryMap.SYSTEM_STATUS[0], IQS7222A_DEVICE_RESET_BIT);
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <IQS7222A_checkReset+0x18>)
 8000732:	7d1b      	ldrb	r3, [r3, #20]
 8000734:	2103      	movs	r1, #3
 8000736:	0018      	movs	r0, r3
 8000738:	f000 ffa6 	bl	8001688 <IQS7222A_getBit>
 800073c:	0003      	movs	r3, r0
}
 800073e:	0018      	movs	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e0 	.word	0x200000e0

08000748 <IQS7222A_getProductNum>:
  * @note   If the product is not correctly identified an appropriate messages
  *         should be displayed.
  */

uint16_t IQS7222A_getProductNum(bool stopOrRestart)
{
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af02      	add	r7, sp, #8
 800074e:	0002      	movs	r2, r0
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	701a      	strb	r2, [r3, #0]
    uint8_t transferBytes[2];
    uint8_t prodNumLow = 0;
 8000754:	250f      	movs	r5, #15
 8000756:	197b      	adds	r3, r7, r5
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
    uint8_t prodNumHigh = 0;
 800075c:	260e      	movs	r6, #14
 800075e:	19bb      	adds	r3, r7, r6
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
    uint16_t prodNumReturn = 0;
 8000764:	240c      	movs	r4, #12
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	801a      	strh	r2, [r3, #0]

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_PROD_NUM, 2, transferBytes, stopOrRestart);
 800076c:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <IQS7222A_getProductNum+0x7c>)
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	2108      	movs	r1, #8
 8000776:	187b      	adds	r3, r7, r1
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2302      	movs	r3, #2
 800077c:	2200      	movs	r2, #0
 800077e:	2144      	movs	r1, #68	@ 0x44
 8000780:	f000 fe58 	bl	8001434 <IQS7222A_ReadRandomBytes>

    prodNumLow = transferBytes[0];
 8000784:	197b      	adds	r3, r7, r5
 8000786:	2108      	movs	r1, #8
 8000788:	187a      	adds	r2, r7, r1
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	701a      	strb	r2, [r3, #0]
    prodNumHigh = transferBytes[1];
 800078e:	19bb      	adds	r3, r7, r6
 8000790:	187a      	adds	r2, r7, r1
 8000792:	7852      	ldrb	r2, [r2, #1]
 8000794:	701a      	strb	r2, [r3, #0]
    prodNumReturn = (uint16_t)prodNumLow;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	197a      	adds	r2, r7, r5
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	801a      	strh	r2, [r3, #0]
    prodNumReturn |= ((uint16_t)prodNumHigh << 8);
 800079e:	19bb      	adds	r3, r7, r6
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21a      	sxth	r2, r3
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2100      	movs	r1, #0
 80007ac:	5e5b      	ldrsh	r3, [r3, r1]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	801a      	strh	r2, [r3, #0]

    return prodNumReturn;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	881b      	ldrh	r3, [r3, #0]
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b005      	add	sp, #20
 80007c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	2000012c 	.word	0x2000012c

080007c8 <IQS7222A_getmajorVersion>:
  *                          Use the STOP and RESTART definitions.
  * @retval Returns major version number as an 8-bit unsigned integer value.
  */

uint8_t IQS7222A_getmajorVersion( bool stopOrRestart)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	0002      	movs	r2, r0
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	701a      	strb	r2, [r3, #0]
    uint8_t transferBytes[2];
    uint8_t ver_maj = 0;
 80007d4:	240f      	movs	r4, #15
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_MAJOR_VERSION_NUM, 2, transferBytes, stopOrRestart);
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <IQS7222A_getmajorVersion+0x40>)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	250c      	movs	r5, #12
 80007e6:	197b      	adds	r3, r7, r5
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2302      	movs	r3, #2
 80007ec:	2201      	movs	r2, #1
 80007ee:	2144      	movs	r1, #68	@ 0x44
 80007f0:	f000 fe20 	bl	8001434 <IQS7222A_ReadRandomBytes>
    ver_maj = transferBytes[0];
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	197a      	adds	r2, r7, r5
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	701a      	strb	r2, [r3, #0]

    return ver_maj;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	781b      	ldrb	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b004      	add	sp, #16
 8000806:	bdb0      	pop	{r4, r5, r7, pc}
 8000808:	2000012c 	.word	0x2000012c

0800080c <IQS7222A_getminorVersion>:
  *                          Use the STOP and RESTART definitions.
  * @retval Returns minor version number as an 8-bit unsigned integer value.
  */

uint8_t IQS7222A_getminorVersion( bool stopOrRestart)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	0002      	movs	r2, r0
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	701a      	strb	r2, [r3, #0]
    uint8_t transferBytes[2];
    uint8_t ver_min = 0;
 8000818:	240f      	movs	r4, #15
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_MINOR_VERSION_NUM, 2, transferBytes, stopOrRestart);
 8000820:	480a      	ldr	r0, [pc, #40]	@ (800084c <IQS7222A_getminorVersion+0x40>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	250c      	movs	r5, #12
 800082a:	197b      	adds	r3, r7, r5
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2302      	movs	r3, #2
 8000830:	2202      	movs	r2, #2
 8000832:	2144      	movs	r1, #68	@ 0x44
 8000834:	f000 fdfe 	bl	8001434 <IQS7222A_ReadRandomBytes>
    ver_min = transferBytes[0];
 8000838:	193b      	adds	r3, r7, r4
 800083a:	197a      	adds	r2, r7, r5
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	701a      	strb	r2, [r3, #0]

    return ver_min;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	781b      	ldrb	r3, [r3, #0]
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bdb0      	pop	{r4, r5, r7, pc}
 800084c:	2000012c 	.word	0x2000012c

08000850 <IQS7222A_acknowledgeReset>:
  *         the begin function.After new device settings have been reloaded this
  *         method should be used to clear the reset bit.
  */

void IQS7222A_acknowledgeReset( bool stopOrRestart)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b087      	sub	sp, #28
 8000854:	af02      	add	r7, sp, #8
 8000856:	0002      	movs	r2, r0
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
    uint8_t transferByte[2];

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, RESTART);
 800085c:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <IQS7222A_acknowledgeReset+0x54>)
 800085e:	2300      	movs	r3, #0
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	240c      	movs	r4, #12
 8000864:	193b      	adds	r3, r7, r4
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2302      	movs	r3, #2
 800086a:	22d0      	movs	r2, #208	@ 0xd0
 800086c:	2144      	movs	r1, #68	@ 0x44
 800086e:	f000 fde1 	bl	8001434 <IQS7222A_ReadRandomBytes>
    transferByte[0] = IQS7222A_setBit(transferByte[0], IQS7222A_ACK_RESET_BIT);
 8000872:	193b      	adds	r3, r7, r4
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f000 ff1d 	bl	80016b8 <IQS7222A_setBit>
 800087e:	0003      	movs	r3, r0
 8000880:	001a      	movs	r2, r3
 8000882:	193b      	adds	r3, r7, r4
 8000884:	701a      	strb	r2, [r3, #0]
    writeRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, stopOrRestart);
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <IQS7222A_acknowledgeReset+0x54>)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	193b      	adds	r3, r7, r4
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2302      	movs	r3, #2
 8000894:	22d0      	movs	r2, #208	@ 0xd0
 8000896:	2144      	movs	r1, #68	@ 0x44
 8000898:	f000 fe00 	bl	800149c <writeRandomBytes>
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b005      	add	sp, #20
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	2000012c 	.word	0x2000012c

080008a8 <IQS7222A_ReATI>:
  * @retval None.
  * @note   To force ATI, RE_ATI_BIT in CONTROL_SETTINGS is set.
  */

void IQS7222A_ReATI( bool stopOrRestart)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
    uint8_t transferByte[2];

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, RESTART);
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <IQS7222A_ReATI+0x54>)
 80008b6:	2300      	movs	r3, #0
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	240c      	movs	r4, #12
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	22d0      	movs	r2, #208	@ 0xd0
 80008c4:	2144      	movs	r1, #68	@ 0x44
 80008c6:	f000 fdb5 	bl	8001434 <IQS7222A_ReadRandomBytes>
    transferByte[0] = IQS7222A_setBit(transferByte[0], IQS7222A_RE_ATI_BIT);
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2102      	movs	r1, #2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fef1 	bl	80016b8 <IQS7222A_setBit>
 80008d6:	0003      	movs	r3, r0
 80008d8:	001a      	movs	r2, r3
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	701a      	strb	r2, [r3, #0]
    writeRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, stopOrRestart);
 80008de:	4807      	ldr	r0, [pc, #28]	@ (80008fc <IQS7222A_ReATI+0x54>)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2302      	movs	r3, #2
 80008ec:	22d0      	movs	r2, #208	@ 0xd0
 80008ee:	2144      	movs	r1, #68	@ 0x44
 80008f0:	f000 fdd4 	bl	800149c <writeRandomBytes>
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b005      	add	sp, #20
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	2000012c 	.word	0x2000012c

08000900 <IQS7222A_SW_Reset>:
  * @retval None.
  * @note   To perform a SW Reset, SW_RESET_BIT in SYSTEM_CONTROL is set.
  */

void IQS7222A_SW_Reset( bool stopOrRestart)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b087      	sub	sp, #28
 8000904:	af02      	add	r7, sp, #8
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
    uint8_t transferByte[2];

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, RESTART);
 800090c:	4811      	ldr	r0, [pc, #68]	@ (8000954 <IQS7222A_SW_Reset+0x54>)
 800090e:	2300      	movs	r3, #0
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	240c      	movs	r4, #12
 8000914:	193b      	adds	r3, r7, r4
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2302      	movs	r3, #2
 800091a:	22d0      	movs	r2, #208	@ 0xd0
 800091c:	2144      	movs	r1, #68	@ 0x44
 800091e:	f000 fd89 	bl	8001434 <IQS7222A_ReadRandomBytes>
    transferByte[0] = IQS7222A_setBit(transferByte[0], IQS7222A_SW_RESET_BIT);
 8000922:	193b      	adds	r3, r7, r4
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2101      	movs	r1, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fec5 	bl	80016b8 <IQS7222A_setBit>
 800092e:	0003      	movs	r3, r0
 8000930:	001a      	movs	r2, r3
 8000932:	193b      	adds	r3, r7, r4
 8000934:	701a      	strb	r2, [r3, #0]
    writeRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, stopOrRestart);
 8000936:	4807      	ldr	r0, [pc, #28]	@ (8000954 <IQS7222A_SW_Reset+0x54>)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	193b      	adds	r3, r7, r4
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2302      	movs	r3, #2
 8000944:	22d0      	movs	r2, #208	@ 0xd0
 8000946:	2144      	movs	r1, #68	@ 0x44
 8000948:	f000 fda8 	bl	800149c <writeRandomBytes>
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b005      	add	sp, #20
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	2000012c 	.word	0x2000012c

08000958 <IQS7222A_setEventMode>:
  * @retval None.
  * @note   All other bits at the register address are preserved.
  */

void IQS7222A_setEventMode(bool stopOrRestart)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b087      	sub	sp, #28
 800095c:	af02      	add	r7, sp, #8
 800095e:	0002      	movs	r2, r0
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	701a      	strb	r2, [r3, #0]
    uint8_t transferByte[2];

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, RESTART);
 8000964:	4816      	ldr	r0, [pc, #88]	@ (80009c0 <IQS7222A_setEventMode+0x68>)
 8000966:	2300      	movs	r3, #0
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	240c      	movs	r4, #12
 800096c:	193b      	adds	r3, r7, r4
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2302      	movs	r3, #2
 8000972:	22d0      	movs	r2, #208	@ 0xd0
 8000974:	2144      	movs	r1, #68	@ 0x44
 8000976:	f000 fd5d 	bl	8001434 <IQS7222A_ReadRandomBytes>
    transferByte[0] = IQS7222A_setBit(transferByte[0], IQS7222A_INTERFACE_SELECT_BIT_0);
 800097a:	193b      	adds	r3, r7, r4
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2106      	movs	r1, #6
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fe99 	bl	80016b8 <IQS7222A_setBit>
 8000986:	0003      	movs	r3, r0
 8000988:	001a      	movs	r2, r3
 800098a:	193b      	adds	r3, r7, r4
 800098c:	701a      	strb	r2, [r3, #0]
    transferByte[0] = IQS7222A_clearBit(transferByte[0], IQS7222A_INTERFACE_SELECT_BIT_1);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2107      	movs	r1, #7
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fea6 	bl	80016e6 <IQS7222A_clearBit>
 800099a:	0003      	movs	r3, r0
 800099c:	001a      	movs	r2, r3
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	701a      	strb	r2, [r3, #0]
    writeRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferByte, stopOrRestart);
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <IQS7222A_setEventMode+0x68>)
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2302      	movs	r3, #2
 80009b0:	22d0      	movs	r2, #208	@ 0xd0
 80009b2:	2144      	movs	r1, #68	@ 0x44
 80009b4:	f000 fd72 	bl	800149c <writeRandomBytes>
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b005      	add	sp, #20
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	2000012c 	.word	0x2000012c

080009c4 <IQS7222A_setStreamInTouchMode>:
  * @retval None.
  * @note  All other bits at the register address are preserved.
  */

void IQS7222A_setStreamInTouchMode( bool stopOrRestart)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	0002      	movs	r2, r0
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	701a      	strb	r2, [r3, #0]
    uint8_t transferBytes[2];

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferBytes, RESTART);
 80009d0:	4816      	ldr	r0, [pc, #88]	@ (8000a2c <IQS7222A_setStreamInTouchMode+0x68>)
 80009d2:	2300      	movs	r3, #0
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	240c      	movs	r4, #12
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2302      	movs	r3, #2
 80009de:	22d0      	movs	r2, #208	@ 0xd0
 80009e0:	2144      	movs	r1, #68	@ 0x44
 80009e2:	f000 fd27 	bl	8001434 <IQS7222A_ReadRandomBytes>
    transferBytes[0] = IQS7222A_clearBit(transferBytes[0], IQS7222A_INTERFACE_SELECT_BIT_0);
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2106      	movs	r1, #6
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fe7a 	bl	80016e6 <IQS7222A_clearBit>
 80009f2:	0003      	movs	r3, r0
 80009f4:	001a      	movs	r2, r3
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	701a      	strb	r2, [r3, #0]
    transferBytes[0] = IQS7222A_setBit(transferBytes[0], IQS7222A_INTERFACE_SELECT_BIT_1);
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2107      	movs	r1, #7
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fe59 	bl	80016b8 <IQS7222A_setBit>
 8000a06:	0003      	movs	r3, r0
 8000a08:	001a      	movs	r2, r3
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	701a      	strb	r2, [r3, #0]
    writeRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 2, transferBytes, stopOrRestart);
 8000a0e:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <IQS7222A_setStreamInTouchMode+0x68>)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	22d0      	movs	r2, #208	@ 0xd0
 8000a1e:	2144      	movs	r1, #68	@ 0x44
 8000a20:	f000 fd3c 	bl	800149c <writeRandomBytes>
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b005      	add	sp, #20
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	2000012c 	.word	0x2000012c

08000a30 <IQS7222A_updateInfoFlags>:
  * @note   The SYSTEM_STATUS memory map local variable is altered with the
  *         new value of the info flags register retrieved from the IQS7222A.
  */

void IQS7222A_updateInfoFlags( bool stopOrRestart)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	0002      	movs	r2, r0
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	701a      	strb	r2, [r3, #0]
    uint8_t transferBytes[2];

    IQS7222A_ReadRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_INFOFLAGS, 2, transferBytes, stopOrRestart);
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <IQS7222A_updateInfoFlags+0x40>)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	240c      	movs	r4, #12
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	2144      	movs	r1, #68	@ 0x44
 8000a50:	f000 fcf0 	bl	8001434 <IQS7222A_ReadRandomBytes>

    IQSMemoryMap.SYSTEM_STATUS[0] = transferBytes[0];
 8000a54:	0021      	movs	r1, r4
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <IQS7222A_updateInfoFlags+0x44>)
 8000a5c:	751a      	strb	r2, [r3, #20]
    IQSMemoryMap.SYSTEM_STATUS[1] = transferBytes[1];
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	785a      	ldrb	r2, [r3, #1]
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <IQS7222A_updateInfoFlags+0x44>)
 8000a64:	755a      	strb	r2, [r3, #21]
}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b005      	add	sp, #20
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	2000012c 	.word	0x2000012c
 8000a74:	200000e0 	.word	0x200000e0

08000a78 <IQS7222A_channelTouchState>:
  * @retval Returns true if a touch is active and false if there is no touch.
  * @note   See the IQS7222A_Channel_e typedef for all possible channel names.
  */

bool IQS7222A_channelTouchState(iqs7222a_channel_e channel)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	701a      	strb	r2, [r3, #0]
  switch(channel)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b0a      	cmp	r3, #10
 8000a8a:	d85c      	bhi.n	8000b46 <IQS7222A_channelTouchState+0xce>
 8000a8c:	009a      	lsls	r2, r3, #2
 8000a8e:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <IQS7222A_channelTouchState+0xd8>)
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	469f      	mov	pc, r3
  {
    case IQS7222A_CH0:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH0_TOUCH_BIT);
 8000a96:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000a98:	7e9b      	ldrb	r3, [r3, #26]
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fdf3 	bl	8001688 <IQS7222A_getBit>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	e050      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH1:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH1_TOUCH_BIT);
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000aa8:	7e9b      	ldrb	r3, [r3, #26]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fdeb 	bl	8001688 <IQS7222A_getBit>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	e048      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH2:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH2_TOUCH_BIT);
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000ab8:	7e9b      	ldrb	r3, [r3, #26]
 8000aba:	2102      	movs	r1, #2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fde3 	bl	8001688 <IQS7222A_getBit>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	e040      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH3:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH3_TOUCH_BIT);
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000ac8:	7e9b      	ldrb	r3, [r3, #26]
 8000aca:	2103      	movs	r1, #3
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fddb 	bl	8001688 <IQS7222A_getBit>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	e038      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH4:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH4_TOUCH_BIT);
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000ad8:	7e9b      	ldrb	r3, [r3, #26]
 8000ada:	2104      	movs	r1, #4
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fdd3 	bl	8001688 <IQS7222A_getBit>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	e030      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH5:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH5_TOUCH_BIT);
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000ae8:	7e9b      	ldrb	r3, [r3, #26]
 8000aea:	2105      	movs	r1, #5
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fdcb 	bl	8001688 <IQS7222A_getBit>
 8000af2:	0003      	movs	r3, r0
 8000af4:	e028      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH6:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH6_TOUCH_BIT);
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000af8:	7e9b      	ldrb	r3, [r3, #26]
 8000afa:	2106      	movs	r1, #6
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fdc3 	bl	8001688 <IQS7222A_getBit>
 8000b02:	0003      	movs	r3, r0
 8000b04:	e020      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH7:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[0], IQS7222A_CH7_TOUCH_BIT);
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000b08:	7e9b      	ldrb	r3, [r3, #26]
 8000b0a:	2107      	movs	r1, #7
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fdbb 	bl	8001688 <IQS7222A_getBit>
 8000b12:	0003      	movs	r3, r0
 8000b14:	e018      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH8:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[1], IQS7222A_CH8_TOUCH_BIT);
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000b18:	7edb      	ldrb	r3, [r3, #27]
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fdb3 	bl	8001688 <IQS7222A_getBit>
 8000b22:	0003      	movs	r3, r0
 8000b24:	e010      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_CH9:  return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[1], IQS7222A_CH9_TOUCH_BIT);
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000b28:	7edb      	ldrb	r3, [r3, #27]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 fdab 	bl	8001688 <IQS7222A_getBit>
 8000b32:	0003      	movs	r3, r0
 8000b34:	e008      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    case IQS7222A_HALL: return IQS7222A_getBit(IQSMemoryMap.TOUCH_EVENT_STATES[1], IQS7222A_HALL_TOUCH_BIT);
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <IQS7222A_channelTouchState+0xdc>)
 8000b38:	7edb      	ldrb	r3, [r3, #27]
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fda3 	bl	8001688 <IQS7222A_getBit>
 8000b42:	0003      	movs	r3, r0
 8000b44:	e000      	b.n	8000b48 <IQS7222A_channelTouchState+0xd0>
    default:            return false;
 8000b46:	2300      	movs	r3, #0
  }
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	080066ac 	.word	0x080066ac
 8000b54:	200000e0 	.word	0x200000e0

08000b58 <IQS7222A_writeMM>:
  * @note   IQS7222A_init.h -> exported GUI init.h file
  * @retval None.
  */

void IQS7222A_writeMM(bool stopOrRestart)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b08d      	sub	sp, #52	@ 0x34
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	0002      	movs	r2, r0
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	701a      	strb	r2, [r3, #0]
	uint8_t transferBytes[30];	// Temporary array which holds the bytes to be transferred.


	 /* Change the Cycle Setup */
	  /* Memory Map Position 0x8000 - 0x8403 */
	  transferBytes[0] = CYCLE_0_CONV_FREQ_FRAC;
 8000b64:	2108      	movs	r1, #8
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	227f      	movs	r2, #127	@ 0x7f
 8000b6a:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CYCLE_0_CONV_FREQ_PERIOD;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	220c      	movs	r2, #12
 8000b70:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CYCLE_0_SETTINGS;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2261      	movs	r2, #97	@ 0x61
 8000b76:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CYCLE_0_CTX_SELECT;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2224      	movs	r2, #36	@ 0x24
 8000b7c:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CYCLE_0_IREF_0;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CYCLE_0_IREF_1;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CYCLE_1_CONV_FREQ_FRAC;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	227f      	movs	r2, #127	@ 0x7f
 8000b8e:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CYCLE_1_CONV_FREQ_PERIOD;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	220c      	movs	r2, #12
 8000b94:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CYCLE_1_SETTINGS;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2253      	movs	r2, #83	@ 0x53
 8000b9a:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CYCLE_1_CTX_SELECT;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CYCLE_1_IREF_0;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CYCLE_1_IREF_1;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	72da      	strb	r2, [r3, #11]
	  transferBytes[12] = CYCLE_2_CONV_FREQ_FRAC;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	227f      	movs	r2, #127	@ 0x7f
 8000bb2:	731a      	strb	r2, [r3, #12]
	  transferBytes[13] = CYCLE_2_CONV_FREQ_PERIOD;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	735a      	strb	r2, [r3, #13]
	  transferBytes[14] = CYCLE_2_SETTINGS;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2261      	movs	r2, #97	@ 0x61
 8000bbe:	739a      	strb	r2, [r3, #14]
	  transferBytes[15] = CYCLE_2_CTX_SELECT;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2224      	movs	r2, #36	@ 0x24
 8000bc4:	73da      	strb	r2, [r3, #15]
	  transferBytes[16] = CYCLE_2_IREF_0;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	741a      	strb	r2, [r3, #16]
	  transferBytes[17] = CYCLE_2_IREF_1;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	745a      	strb	r2, [r3, #17]
	  transferBytes[18] = CYCLE_3_CONV_FREQ_FRAC;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	227f      	movs	r2, #127	@ 0x7f
 8000bd6:	749a      	strb	r2, [r3, #18]
	  transferBytes[19] = CYCLE_3_CONV_FREQ_PERIOD;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	220c      	movs	r2, #12
 8000bdc:	74da      	strb	r2, [r3, #19]
	  transferBytes[20] = CYCLE_3_SETTINGS;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2261      	movs	r2, #97	@ 0x61
 8000be2:	751a      	strb	r2, [r3, #20]
	  transferBytes[21] = CYCLE_3_CTX_SELECT;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2242      	movs	r2, #66	@ 0x42
 8000be8:	755a      	strb	r2, [r3, #21]
	  transferBytes[22] = CYCLE_3_IREF_0;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	759a      	strb	r2, [r3, #22]
	  transferBytes[23] = CYCLE_3_IREF_1;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	75da      	strb	r2, [r3, #23]
	  transferBytes[24] = CYCLE_4_CONV_FREQ_FRAC;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	227f      	movs	r2, #127	@ 0x7f
 8000bfa:	761a      	strb	r2, [r3, #24]
	  transferBytes[25] = CYCLE_4_CONV_FREQ_PERIOD;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	220c      	movs	r2, #12
 8000c00:	765a      	strb	r2, [r3, #25]
	  transferBytes[26] = CYCLE_4_SETTINGS;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2253      	movs	r2, #83	@ 0x53
 8000c06:	769a      	strb	r2, [r3, #26]
	  transferBytes[27] = CYCLE_4_CTX_SELECT;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	76da      	strb	r2, [r3, #27]
	  transferBytes[28] = CYCLE_4_IREF_0;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	771a      	strb	r2, [r3, #28]
	  transferBytes[29] = CYCLE_4_IREF_1;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	775a      	strb	r2, [r3, #29]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CYCLE_SETUP_0, 30, transferBytes, RESTART);
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	021a      	lsls	r2, r3, #8
 8000c1e:	48fe      	ldr	r0, [pc, #1016]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000c20:	2300      	movs	r3, #0
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	000c      	movs	r4, r1
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	231e      	movs	r3, #30
 8000c2c:	2144      	movs	r1, #68	@ 0x44
 8000c2e:	f000 fcad 	bl	800158c <writeRandomBytes16>

	  /* Change the Global Cycle Setup */
	  /* Memory Map Position 0x8500 - 0x8502 */
	  transferBytes[0] = GLOBAL_CYCLE_SETUP_0;
 8000c32:	0021      	movs	r1, r4
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	228b      	movs	r2, #139	@ 0x8b
 8000c38:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = GLOBAL_CYCLE_SETUP_1;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	222b      	movs	r2, #43	@ 0x2b
 8000c3e:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = COARSE_DIVIDER_PRELOAD;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2210      	movs	r2, #16
 8000c44:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = FINE_DIVIDER_PRELOAD;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2230      	movs	r2, #48	@ 0x30
 8000c4a:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = COMPENSATION_PRELOAD_0;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = COMPENSATION_PRELOAD_1;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2202      	movs	r2, #2
 8000c56:	715a      	strb	r2, [r3, #5]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_GLOBAL_CYCLE_SETUP, 6, transferBytes, RESTART);
 8000c58:	2387      	movs	r3, #135	@ 0x87
 8000c5a:	021a      	lsls	r2, r3, #8
 8000c5c:	48ee      	ldr	r0, [pc, #952]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	000c      	movs	r4, r1
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2306      	movs	r3, #6
 8000c6a:	2144      	movs	r1, #68	@ 0x44
 8000c6c:	f000 fc8e 	bl	800158c <writeRandomBytes16>

	  /* Change the Button Setup 0 - 4 */
	  /* Memory Map Position 0x9000 - 0x9502 */
	  transferBytes[0] = BUTTON_0_PROX_THRESHOLD;
 8000c70:	0021      	movs	r1, r4
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	220a      	movs	r2, #10
 8000c76:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = BUTTON_0_ENTER_EXIT;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2212      	movs	r2, #18
 8000c7c:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = BUTTON_0_TOUCH_THRESHOLD;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2219      	movs	r2, #25
 8000c82:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = BUTTON_0_TOUCH_HYSTERESIS;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = BUTTON_0_PROX_EVENT_TIMEOUT;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = BUTTON_0_TOUCH_EVENT_TIMEOUT;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2230      	movs	r2, #48	@ 0x30
 8000c94:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = BUTTON_1_PROX_THRESHOLD;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	220a      	movs	r2, #10
 8000c9a:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = BUTTON_1_ENTER_EXIT;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2212      	movs	r2, #18
 8000ca0:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = BUTTON_1_TOUCH_THRESHOLD;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2219      	movs	r2, #25
 8000ca6:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = BUTTON_1_TOUCH_HYSTERESIS;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = BUTTON_1_PROX_EVENT_TIMEOUT;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = BUTTON_1_TOUCH_EVENT_TIMEOUT;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2230      	movs	r2, #48	@ 0x30
 8000cb8:	72da      	strb	r2, [r3, #11]
	  transferBytes[12] = BUTTON_2_PROX_THRESHOLD;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	731a      	strb	r2, [r3, #12]
	  transferBytes[13] = BUTTON_2_ENTER_EXIT;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2212      	movs	r2, #18
 8000cc4:	735a      	strb	r2, [r3, #13]
	  transferBytes[14] = BUTTON_2_TOUCH_THRESHOLD;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2219      	movs	r2, #25
 8000cca:	739a      	strb	r2, [r3, #14]
	  transferBytes[15] = BUTTON_2_TOUCH_HYSTERESIS;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	73da      	strb	r2, [r3, #15]
	  transferBytes[16] = BUTTON_2_PROX_EVENT_TIMEOUT;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	741a      	strb	r2, [r3, #16]
	  transferBytes[17] = BUTTON_2_TOUCH_EVENT_TIMEOUT;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2230      	movs	r2, #48	@ 0x30
 8000cdc:	745a      	strb	r2, [r3, #17]
	  transferBytes[18] = BUTTON_3_PROX_THRESHOLD;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	749a      	strb	r2, [r3, #18]
	  transferBytes[19] = BUTTON_3_ENTER_EXIT;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2212      	movs	r2, #18
 8000ce8:	74da      	strb	r2, [r3, #19]
	  transferBytes[20] = BUTTON_3_TOUCH_THRESHOLD;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2219      	movs	r2, #25
 8000cee:	751a      	strb	r2, [r3, #20]
	  transferBytes[21] = BUTTON_3_TOUCH_HYSTERESIS;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	755a      	strb	r2, [r3, #21]
	  transferBytes[22] = BUTTON_3_PROX_EVENT_TIMEOUT;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	759a      	strb	r2, [r3, #22]
	  transferBytes[23] = BUTTON_3_TOUCH_EVENT_TIMEOUT;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2230      	movs	r2, #48	@ 0x30
 8000d00:	75da      	strb	r2, [r3, #23]
	  transferBytes[24] = BUTTON_4_PROX_THRESHOLD;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	220a      	movs	r2, #10
 8000d06:	761a      	strb	r2, [r3, #24]
	  transferBytes[25] = BUTTON_4_ENTER_EXIT;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2212      	movs	r2, #18
 8000d0c:	765a      	strb	r2, [r3, #25]
	  transferBytes[26] = BUTTON_4_TOUCH_THRESHOLD;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2219      	movs	r2, #25
 8000d12:	769a      	strb	r2, [r3, #26]
	  transferBytes[27] = BUTTON_4_TOUCH_HYSTERESIS;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	76da      	strb	r2, [r3, #27]
	  transferBytes[28] = BUTTON_4_PROX_EVENT_TIMEOUT;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	771a      	strb	r2, [r3, #28]
	  transferBytes[29] = BUTTON_4_TOUCH_EVENT_TIMEOUT;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2230      	movs	r2, #48	@ 0x30
 8000d24:	775a      	strb	r2, [r3, #29]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_BUTTON_SETUP_0, 30, transferBytes, RESTART);
 8000d26:	2390      	movs	r3, #144	@ 0x90
 8000d28:	021a      	lsls	r2, r3, #8
 8000d2a:	48bb      	ldr	r0, [pc, #748]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	000c      	movs	r4, r1
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	231e      	movs	r3, #30
 8000d38:	2144      	movs	r1, #68	@ 0x44
 8000d3a:	f000 fc27 	bl	800158c <writeRandomBytes16>

	  /* Change the Button Setup 5 - 9 */
	  /* Memory Map Position 0x9500 - 0x9902 */
	  transferBytes[0] = BUTTON_5_PROX_THRESHOLD;
 8000d3e:	0021      	movs	r1, r4
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	220a      	movs	r2, #10
 8000d44:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = BUTTON_5_ENTER_EXIT;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2212      	movs	r2, #18
 8000d4a:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = BUTTON_5_TOUCH_THRESHOLD;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2219      	movs	r2, #25
 8000d50:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = BUTTON_5_TOUCH_HYSTERESIS;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = BUTTON_5_PROX_EVENT_TIMEOUT;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = BUTTON_5_TOUCH_EVENT_TIMEOUT;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2230      	movs	r2, #48	@ 0x30
 8000d62:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = BUTTON_6_PROX_THRESHOLD;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	220a      	movs	r2, #10
 8000d68:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = BUTTON_6_ENTER_EXIT;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2212      	movs	r2, #18
 8000d6e:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = BUTTON_6_TOUCH_THRESHOLD;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2219      	movs	r2, #25
 8000d74:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = BUTTON_6_TOUCH_HYSTERESIS;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = BUTTON_6_PROX_EVENT_TIMEOUT;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2208      	movs	r2, #8
 8000d80:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = BUTTON_6_TOUCH_EVENT_TIMEOUT;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2230      	movs	r2, #48	@ 0x30
 8000d86:	72da      	strb	r2, [r3, #11]
	  transferBytes[12] = BUTTON_7_PROX_THRESHOLD;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	731a      	strb	r2, [r3, #12]
	  transferBytes[13] = BUTTON_7_ENTER_EXIT;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2212      	movs	r2, #18
 8000d92:	735a      	strb	r2, [r3, #13]
	  transferBytes[14] = BUTTON_7_TOUCH_THRESHOLD;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2219      	movs	r2, #25
 8000d98:	739a      	strb	r2, [r3, #14]
	  transferBytes[15] = BUTTON_7_TOUCH_HYSTERESIS;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	73da      	strb	r2, [r3, #15]
	  transferBytes[16] = BUTTON_7_PROX_EVENT_TIMEOUT;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2208      	movs	r2, #8
 8000da4:	741a      	strb	r2, [r3, #16]
	  transferBytes[17] = BUTTON_7_TOUCH_EVENT_TIMEOUT;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2230      	movs	r2, #48	@ 0x30
 8000daa:	745a      	strb	r2, [r3, #17]
	  transferBytes[18] = BUTTON_8_PROX_THRESHOLD;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	220a      	movs	r2, #10
 8000db0:	749a      	strb	r2, [r3, #18]
	  transferBytes[19] = BUTTON_8_ENTER_EXIT;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2212      	movs	r2, #18
 8000db6:	74da      	strb	r2, [r3, #19]
	  transferBytes[20] = BUTTON_8_TOUCH_THRESHOLD;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2219      	movs	r2, #25
 8000dbc:	751a      	strb	r2, [r3, #20]
	  transferBytes[21] = BUTTON_8_TOUCH_HYSTERESIS;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	755a      	strb	r2, [r3, #21]
	  transferBytes[22] = BUTTON_8_PROX_EVENT_TIMEOUT;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	759a      	strb	r2, [r3, #22]
	  transferBytes[23] = BUTTON_8_TOUCH_EVENT_TIMEOUT;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2230      	movs	r2, #48	@ 0x30
 8000dce:	75da      	strb	r2, [r3, #23]
	  transferBytes[24] = BUTTON_9_PROX_THRESHOLD;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	220a      	movs	r2, #10
 8000dd4:	761a      	strb	r2, [r3, #24]
	  transferBytes[25] = BUTTON_9_ENTER_EXIT;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2212      	movs	r2, #18
 8000dda:	765a      	strb	r2, [r3, #25]
	  transferBytes[26] = BUTTON_9_TOUCH_THRESHOLD;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2219      	movs	r2, #25
 8000de0:	769a      	strb	r2, [r3, #26]
	  transferBytes[27] = BUTTON_9_TOUCH_HYSTERESIS;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	76da      	strb	r2, [r3, #27]
	  transferBytes[28] = BUTTON_9_PROX_EVENT_TIMEOUT;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2208      	movs	r2, #8
 8000dec:	771a      	strb	r2, [r3, #28]
	  transferBytes[29] = BUTTON_9_TOUCH_EVENT_TIMEOUT;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2230      	movs	r2, #48	@ 0x30
 8000df2:	775a      	strb	r2, [r3, #29]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_BUTTON_SETUP_5, 30, transferBytes, RESTART);
 8000df4:	2395      	movs	r3, #149	@ 0x95
 8000df6:	021a      	lsls	r2, r3, #8
 8000df8:	4887      	ldr	r0, [pc, #540]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	000c      	movs	r4, r1
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	231e      	movs	r3, #30
 8000e06:	2144      	movs	r1, #68	@ 0x44
 8000e08:	f000 fbc0 	bl	800158c <writeRandomBytes16>

	  /* Change the CH0 Setup */
	  /* Memory Map Position 0xA000 - 0xA005 */
	  transferBytes[0] = CH0_SETUP_0;
 8000e0c:	0021      	movs	r1, r4
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2283      	movs	r2, #131	@ 0x83
 8000e12:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH0_SETUP_1;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2213      	movs	r2, #19
 8000e18:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH0_ATI_SETTINGS_0;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	222d      	movs	r2, #45	@ 0x2d
 8000e1e:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH0_ATI_SETTINGS_1;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2264      	movs	r2, #100	@ 0x64
 8000e24:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH0_MULTIPLIERS_0;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	22aa      	movs	r2, #170	@ 0xaa
 8000e2a:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH0_MULTIPLIERS_1;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2231      	movs	r2, #49	@ 0x31
 8000e30:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH0_ATI_COMPENSATION_0;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	22e0      	movs	r2, #224	@ 0xe0
 8000e36:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH0_ATI_COMPENSATION_1;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2239      	movs	r2, #57	@ 0x39
 8000e3c:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH0_REF_PTR_0;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH0_REF_PTR_1;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH0_REFMASK_0;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH0_REFMASK_1;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_0, 12, transferBytes, RESTART);
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	021a      	lsls	r2, r3, #8
 8000e5a:	486f      	ldr	r0, [pc, #444]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	000c      	movs	r4, r1
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	230c      	movs	r3, #12
 8000e68:	2144      	movs	r1, #68	@ 0x44
 8000e6a:	f000 fb8f 	bl	800158c <writeRandomBytes16>

	  /* Change the CH1 Setup */
	  /* Memory Map Position 0xA100 - 0xA105 */
	  transferBytes[0] = CH1_SETUP_0;
 8000e6e:	0021      	movs	r1, r4
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2213      	movs	r2, #19
 8000e74:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH1_SETUP_1;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2215      	movs	r2, #21
 8000e7a:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH1_ATI_SETTINGS_0;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	223d      	movs	r2, #61	@ 0x3d
 8000e80:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH1_ATI_SETTINGS_1;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	223e      	movs	r2, #62	@ 0x3e
 8000e86:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH1_MULTIPLIERS_0;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	22e2      	movs	r2, #226	@ 0xe2
 8000e8c:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH1_MULTIPLIERS_1;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2235      	movs	r2, #53	@ 0x35
 8000e92:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH1_ATI_COMPENSATION_0;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	22fe      	movs	r2, #254	@ 0xfe
 8000e98:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH1_ATI_COMPENSATION_1;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2239      	movs	r2, #57	@ 0x39
 8000e9e:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH1_REF_PTR_0;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH1_REF_PTR_1;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH1_REFMASK_0;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH1_REFMASK_1;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_1, 12, transferBytes, RESTART);
 8000eb8:	23a1      	movs	r3, #161	@ 0xa1
 8000eba:	021a      	lsls	r2, r3, #8
 8000ebc:	4856      	ldr	r0, [pc, #344]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	000c      	movs	r4, r1
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	230c      	movs	r3, #12
 8000eca:	2144      	movs	r1, #68	@ 0x44
 8000ecc:	f000 fb5e 	bl	800158c <writeRandomBytes16>

	  /* Change the CH2 Setup */
	  /* Memory Map Position 0xA200 - 0xA205 */
	  transferBytes[0] = CH2_SETUP_0;
 8000ed0:	0021      	movs	r1, r4
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2283      	movs	r2, #131	@ 0x83
 8000ed6:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH2_SETUP_1;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2211      	movs	r2, #17
 8000edc:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH2_ATI_SETTINGS_0;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	223d      	movs	r2, #61	@ 0x3d
 8000ee2:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH2_ATI_SETTINGS_1;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	223e      	movs	r2, #62	@ 0x3e
 8000ee8:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH2_MULTIPLIERS_0;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	226a      	movs	r2, #106	@ 0x6a
 8000eee:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH2_MULTIPLIERS_1;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2233      	movs	r2, #51	@ 0x33
 8000ef4:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH2_ATI_COMPENSATION_0;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	22fa      	movs	r2, #250	@ 0xfa
 8000efa:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH2_ATI_COMPENSATION_1;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2269      	movs	r2, #105	@ 0x69
 8000f00:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH2_REF_PTR_0;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH2_REF_PTR_1;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH2_REFMASK_0;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH2_REFMASK_1;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_2, 12, transferBytes, RESTART);
 8000f1a:	23a2      	movs	r3, #162	@ 0xa2
 8000f1c:	021a      	lsls	r2, r3, #8
 8000f1e:	483e      	ldr	r0, [pc, #248]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000f20:	2300      	movs	r3, #0
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	000c      	movs	r4, r1
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	2144      	movs	r1, #68	@ 0x44
 8000f2e:	f000 fb2d 	bl	800158c <writeRandomBytes16>

	  /* Change the CH3 Setup */
	  /* Memory Map Position 0xA300 - 0xA305 */
	  transferBytes[0] = CH3_SETUP_0;
 8000f32:	0021      	movs	r1, r4
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2243      	movs	r2, #67	@ 0x43
 8000f38:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH3_SETUP_1;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2211      	movs	r2, #17
 8000f3e:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH3_ATI_SETTINGS_0;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	223d      	movs	r2, #61	@ 0x3d
 8000f44:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH3_ATI_SETTINGS_1;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	223e      	movs	r2, #62	@ 0x3e
 8000f4a:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH3_MULTIPLIERS_0;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	226a      	movs	r2, #106	@ 0x6a
 8000f50:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH3_MULTIPLIERS_1;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2231      	movs	r2, #49	@ 0x31
 8000f56:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH3_ATI_COMPENSATION_0;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	22ea      	movs	r2, #234	@ 0xea
 8000f5c:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH3_ATI_COMPENSATION_1;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2261      	movs	r2, #97	@ 0x61
 8000f62:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH3_REF_PTR_0;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH3_REF_PTR_1;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH3_REFMASK_0;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH3_REFMASK_1;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_3, 12, transferBytes, RESTART);
 8000f7c:	23a3      	movs	r3, #163	@ 0xa3
 8000f7e:	021a      	lsls	r2, r3, #8
 8000f80:	4825      	ldr	r0, [pc, #148]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000f82:	2300      	movs	r3, #0
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	000c      	movs	r4, r1
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	2144      	movs	r1, #68	@ 0x44
 8000f90:	f000 fafc 	bl	800158c <writeRandomBytes16>

	  /* Change the CH4 Setup */
	  /* Memory Map Position 0xA400 - 0xA405 */
	  transferBytes[0] = CH4_SETUP_0;
 8000f94:	0021      	movs	r1, r4
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH4_SETUP_1;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH4_ATI_SETTINGS_0;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	223d      	movs	r2, #61	@ 0x3d
 8000fa6:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH4_ATI_SETTINGS_1;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	223e      	movs	r2, #62	@ 0x3e
 8000fac:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH4_MULTIPLIERS_0;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	222a      	movs	r2, #42	@ 0x2a
 8000fb2:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH4_MULTIPLIERS_1;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2231      	movs	r2, #49	@ 0x31
 8000fb8:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH4_ATI_COMPENSATION_0;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	22e2      	movs	r2, #226	@ 0xe2
 8000fbe:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH4_ATI_COMPENSATION_1;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2269      	movs	r2, #105	@ 0x69
 8000fc4:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH4_REF_PTR_0;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH4_REF_PTR_1;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH4_REFMASK_0;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH4_REFMASK_1;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_4, 12, transferBytes, RESTART);
 8000fde:	23a4      	movs	r3, #164	@ 0xa4
 8000fe0:	021a      	lsls	r2, r3, #8
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <IQS7222A_writeMM+0x4c0>)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	000c      	movs	r4, r1
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	230c      	movs	r3, #12
 8000ff0:	2144      	movs	r1, #68	@ 0x44
 8000ff2:	f000 facb 	bl	800158c <writeRandomBytes16>

	  /* Change the CH5 Setup */
	  /* Memory Map Position 0xA500 - 0xA505 */
	  transferBytes[0] = CH5_SETUP_0;
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2243      	movs	r2, #67	@ 0x43
 8000ffc:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH5_SETUP_1;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2211      	movs	r2, #17
 8001002:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH5_ATI_SETTINGS_0;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	222d      	movs	r2, #45	@ 0x2d
 8001008:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH5_ATI_SETTINGS_1;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2264      	movs	r2, #100	@ 0x64
 800100e:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH5_MULTIPLIERS_0;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	22aa      	movs	r2, #170	@ 0xaa
 8001014:	711a      	strb	r2, [r3, #4]
 8001016:	e001      	b.n	800101c <IQS7222A_writeMM+0x4c4>
 8001018:	2000012c 	.word	0x2000012c
	  transferBytes[5] = CH5_MULTIPLIERS_1;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2233      	movs	r2, #51	@ 0x33
 8001020:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH5_ATI_COMPENSATION_0;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	22c2      	movs	r2, #194	@ 0xc2
 8001026:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH5_ATI_COMPENSATION_1;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2239      	movs	r2, #57	@ 0x39
 800102c:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH5_REF_PTR_0;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH5_REF_PTR_1;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH5_REFMASK_0;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2200      	movs	r2, #0
 800103e:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH5_REFMASK_1;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_5, 12, transferBytes, RESTART);
 8001046:	23a5      	movs	r3, #165	@ 0xa5
 8001048:	021a      	lsls	r2, r3, #8
 800104a:	48f8      	ldr	r0, [pc, #992]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 800104c:	2300      	movs	r3, #0
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	000c      	movs	r4, r1
 8001052:	187b      	adds	r3, r7, r1
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	230c      	movs	r3, #12
 8001058:	2144      	movs	r1, #68	@ 0x44
 800105a:	f000 fa97 	bl	800158c <writeRandomBytes16>

	  /* Change the CH6 Setup */
	  /* Memory Map Position 0xA600 - 0xA605 */
	  transferBytes[0] = CH6_SETUP_0;
 800105e:	0021      	movs	r1, r4
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2213      	movs	r2, #19
 8001064:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH6_SETUP_1;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2214      	movs	r2, #20
 800106a:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH6_ATI_SETTINGS_0;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	223d      	movs	r2, #61	@ 0x3d
 8001070:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH6_ATI_SETTINGS_1;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	223e      	movs	r2, #62	@ 0x3e
 8001076:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH6_MULTIPLIERS_0;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2228      	movs	r2, #40	@ 0x28
 800107c:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH6_MULTIPLIERS_1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2235      	movs	r2, #53	@ 0x35
 8001082:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH6_ATI_COMPENSATION_0;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	22da      	movs	r2, #218	@ 0xda
 8001088:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH6_ATI_COMPENSATION_1;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2269      	movs	r2, #105	@ 0x69
 800108e:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH6_REF_PTR_0;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH6_REF_PTR_1;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH6_REFMASK_0;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH6_REFMASK_1;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_6, 12, transferBytes, RESTART);
 80010a8:	23a6      	movs	r3, #166	@ 0xa6
 80010aa:	021a      	lsls	r2, r3, #8
 80010ac:	48df      	ldr	r0, [pc, #892]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 80010ae:	2300      	movs	r3, #0
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	000c      	movs	r4, r1
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	230c      	movs	r3, #12
 80010ba:	2144      	movs	r1, #68	@ 0x44
 80010bc:	f000 fa66 	bl	800158c <writeRandomBytes16>

	  /* Change the CH7 Setup */
	  /* Memory Map Position 0xA700 - 0xA705 */
	  transferBytes[0] = CH7_SETUP_0;
 80010c0:	0021      	movs	r1, r4
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2243      	movs	r2, #67	@ 0x43
 80010c6:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH7_SETUP_1;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2213      	movs	r2, #19
 80010cc:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH7_ATI_SETTINGS_0;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	223d      	movs	r2, #61	@ 0x3d
 80010d2:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH7_ATI_SETTINGS_1;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	223e      	movs	r2, #62	@ 0x3e
 80010d8:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH7_MULTIPLIERS_0;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	226a      	movs	r2, #106	@ 0x6a
 80010de:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH7_MULTIPLIERS_1;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2233      	movs	r2, #51	@ 0x33
 80010e4:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH7_ATI_COMPENSATION_0;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	22e2      	movs	r2, #226	@ 0xe2
 80010ea:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH7_ATI_COMPENSATION_1;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2261      	movs	r2, #97	@ 0x61
 80010f0:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH7_REF_PTR_0;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH7_REF_PTR_1;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH7_REFMASK_0;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH7_REFMASK_1;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2200      	movs	r2, #0
 8001108:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_7, 12, transferBytes, RESTART);
 800110a:	23a7      	movs	r3, #167	@ 0xa7
 800110c:	021a      	lsls	r2, r3, #8
 800110e:	48c7      	ldr	r0, [pc, #796]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 8001110:	2300      	movs	r3, #0
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	000c      	movs	r4, r1
 8001116:	187b      	adds	r3, r7, r1
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	230c      	movs	r3, #12
 800111c:	2144      	movs	r1, #68	@ 0x44
 800111e:	f000 fa35 	bl	800158c <writeRandomBytes16>

	  /* Change the CH8 Setup */
	  /* Memory Map Position 0xA800 - 0xA805 */
	  transferBytes[0] = CH8_SETUP_0;
 8001122:	0021      	movs	r1, r4
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2283      	movs	r2, #131	@ 0x83
 8001128:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH8_SETUP_1;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2211      	movs	r2, #17
 800112e:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH8_ATI_SETTINGS_0;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	223d      	movs	r2, #61	@ 0x3d
 8001134:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH8_ATI_SETTINGS_1;
 8001136:	187b      	adds	r3, r7, r1
 8001138:	223e      	movs	r2, #62	@ 0x3e
 800113a:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH8_MULTIPLIERS_0;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	228a      	movs	r2, #138	@ 0x8a
 8001140:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH8_MULTIPLIERS_1;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2233      	movs	r2, #51	@ 0x33
 8001146:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH8_ATI_COMPENSATION_0;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	22e2      	movs	r2, #226	@ 0xe2
 800114c:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH8_ATI_COMPENSATION_1;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2261      	movs	r2, #97	@ 0x61
 8001152:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH8_REF_PTR_0;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2200      	movs	r2, #0
 8001158:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH8_REF_PTR_1;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH8_REFMASK_0;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2200      	movs	r2, #0
 8001164:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH8_REFMASK_1;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2200      	movs	r2, #0
 800116a:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_8, 12, transferBytes, RESTART);
 800116c:	23a8      	movs	r3, #168	@ 0xa8
 800116e:	021a      	lsls	r2, r3, #8
 8001170:	48ae      	ldr	r0, [pc, #696]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 8001172:	2300      	movs	r3, #0
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	000c      	movs	r4, r1
 8001178:	187b      	adds	r3, r7, r1
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	230c      	movs	r3, #12
 800117e:	2144      	movs	r1, #68	@ 0x44
 8001180:	f000 fa04 	bl	800158c <writeRandomBytes16>

	  /* Change the CH9 Setup */
	  /* Memory Map Position 0xA900 - 0xA905 */
	  transferBytes[0] = CH9_SETUP_0;
 8001184:	0021      	movs	r1, r4
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2213      	movs	r2, #19
 800118a:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = CH9_SETUP_1;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2215      	movs	r2, #21
 8001190:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = CH9_ATI_SETTINGS_0;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	223d      	movs	r2, #61	@ 0x3d
 8001196:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = CH9_ATI_SETTINGS_1;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	223e      	movs	r2, #62	@ 0x3e
 800119c:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = CH9_MULTIPLIERS_0;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	222c      	movs	r2, #44	@ 0x2c
 80011a2:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = CH9_MULTIPLIERS_1;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2231      	movs	r2, #49	@ 0x31
 80011a8:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = CH9_ATI_COMPENSATION_0;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = CH9_ATI_COMPENSATION_1;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2268      	movs	r2, #104	@ 0x68
 80011b4:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = CH9_REF_PTR_0;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = CH9_REF_PTR_1;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = CH9_REFMASK_0;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = CH9_REFMASK_1;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	72da      	strb	r2, [r3, #11]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CHANNEL_SETUP_9, 12, transferBytes, RESTART);
 80011ce:	23a9      	movs	r3, #169	@ 0xa9
 80011d0:	021a      	lsls	r2, r3, #8
 80011d2:	4896      	ldr	r0, [pc, #600]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 80011d4:	2300      	movs	r3, #0
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	000c      	movs	r4, r1
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	230c      	movs	r3, #12
 80011e0:	2144      	movs	r1, #68	@ 0x44
 80011e2:	f000 f9d3 	bl	800158c <writeRandomBytes16>

	  /* Change the Filter Betas */
	  /* Memory Map Position 0xAA00 - 0xAA01 */
	  transferBytes[0] = COUNTS_BETA_FILTER;
 80011e6:	0021      	movs	r1, r4
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2212      	movs	r2, #18
 80011ec:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = LTA_BETA_FILTER;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2278      	movs	r2, #120	@ 0x78
 80011f2:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = LTA_FAST_BETA_FILTER;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2234      	movs	r2, #52	@ 0x34
 80011f8:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = RESERVED_FILTER_0;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2201      	movs	r2, #1
 80011fe:	70da      	strb	r2, [r3, #3]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_FILTER_BETAS, 4, transferBytes, RESTART);
 8001200:	23ac      	movs	r3, #172	@ 0xac
 8001202:	021a      	lsls	r2, r3, #8
 8001204:	4889      	ldr	r0, [pc, #548]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 8001206:	2300      	movs	r3, #0
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	000c      	movs	r4, r1
 800120c:	187b      	adds	r3, r7, r1
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2304      	movs	r3, #4
 8001212:	2144      	movs	r1, #68	@ 0x44
 8001214:	f000 f9ba 	bl	800158c <writeRandomBytes16>

	  /* Change the Slider/Wheel 0 Setup 0 & Delta Link */
	  /* Memory Map Position 0xB000 - 0xB009 */
	  transferBytes[0] = SLIDER0SETUP_GENERAL;
 8001218:	0021      	movs	r1, r4
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2244      	movs	r2, #68	@ 0x44
 800121e:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = SLIDER0_LOWER_CAL;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2200      	movs	r2, #0
 8001224:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = SLIDER0_UPPER_CAL;
 8001226:	187b      	adds	r3, r7, r1
 8001228:	22ff      	movs	r2, #255	@ 0xff
 800122a:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = SLIDER0_BOTTOM_SPEED;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2200      	movs	r2, #0
 8001230:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = SLIDER0_TOPSPEED_0;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	22ff      	movs	r2, #255	@ 0xff
 8001236:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = SLIDER0_RESOLUTION_0;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	22ff      	movs	r2, #255	@ 0xff
 800123c:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = SLIDER0_ENABLE_MASK_0_7;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	228c      	movs	r2, #140	@ 0x8c
 8001242:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = SLIDER0_ENABLE_MASK_8_11;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2201      	movs	r2, #1
 8001248:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = SLIDER0_ENABLESTATUSLINK_0;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	22e8      	movs	r2, #232	@ 0xe8
 800124e:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = SLIDER0_ENABLESTATUSLINK_1;
 8001250:	187b      	adds	r3, r7, r1
 8001252:	2206      	movs	r2, #6
 8001254:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = SLIDER0_DELTA0_0;
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2288      	movs	r2, #136	@ 0x88
 800125a:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = SLIDER0_DELTA0_1;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2205      	movs	r2, #5
 8001260:	72da      	strb	r2, [r3, #11]
	  transferBytes[12] = SLIDER0_DELTA1_0;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	225e      	movs	r2, #94	@ 0x5e
 8001266:	731a      	strb	r2, [r3, #12]
	  transferBytes[13] = SLIDER0_DELTA1_1;
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2205      	movs	r2, #5
 800126c:	735a      	strb	r2, [r3, #13]
	  transferBytes[14] = SLIDER0_DELTA2_0;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	228c      	movs	r2, #140	@ 0x8c
 8001272:	739a      	strb	r2, [r3, #14]
	  transferBytes[15] = SLIDER0_DELTA2_1;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2204      	movs	r2, #4
 8001278:	73da      	strb	r2, [r3, #15]
	  transferBytes[16] = SLIDER0_DELTA3_0;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	22b6      	movs	r2, #182	@ 0xb6
 800127e:	741a      	strb	r2, [r3, #16]
	  transferBytes[17] = SLIDER0_DELTA3_1;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2204      	movs	r2, #4
 8001284:	745a      	strb	r2, [r3, #17]
	  transferBytes[18] = SLIDER0_GESTURE_ENABLE;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2207      	movs	r2, #7
 800128a:	749a      	strb	r2, [r3, #18]
	  transferBytes[19] = SLIDER0_MAX_TAP_TIME;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	224b      	movs	r2, #75	@ 0x4b
 8001290:	74da      	strb	r2, [r3, #19]
	  transferBytes[20] = SLIDER0_MAX_SWIPE_TIME;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	224b      	movs	r2, #75	@ 0x4b
 8001296:	751a      	strb	r2, [r3, #20]
	  transferBytes[21] = SLIDER0_MAX_SWIPE_DISTANCE;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2219      	movs	r2, #25
 800129c:	755a      	strb	r2, [r3, #21]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_SLIDER_SETUP_0, 22, transferBytes, RESTART);
 800129e:	23b0      	movs	r3, #176	@ 0xb0
 80012a0:	021a      	lsls	r2, r3, #8
 80012a2:	4862      	ldr	r0, [pc, #392]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	000c      	movs	r4, r1
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2316      	movs	r3, #22
 80012b0:	2144      	movs	r1, #68	@ 0x44
 80012b2:	f000 f96b 	bl	800158c <writeRandomBytes16>

	  /* Change the Slider/Wheel 1 Setup 0 */
	  /* Memory Map Position 0xB100 - 0xB105 */
	  transferBytes[0] = SLIDER0SETUP_GENERAL;
 80012b6:	0021      	movs	r1, r4
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2244      	movs	r2, #68	@ 0x44
 80012bc:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = SLIDER1_LOWER_CAL;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = SLIDER1_UPPER_CAL;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2200      	movs	r2, #0
 80012c8:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = SLIDER1_BOTTOM_SPEED;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = SLIDER1_TOPSPEED_0;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = SLIDER1_RESOLUTION_0;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2200      	movs	r2, #0
 80012da:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = SLIDER1_ENABLE_MASK_0_7;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2200      	movs	r2, #0
 80012e0:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = SLIDER1_ENABLE_MASK_8_11;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2200      	movs	r2, #0
 80012e6:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = SLIDER1_ENABLESTATUSLINK_0;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2200      	movs	r2, #0
 80012ec:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = SLIDER1_ENABLESTATUSLINK_1;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = SLIDER1_DELTA0_0;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2200      	movs	r2, #0
 80012f8:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = SLIDER1_DELTA0_1;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2200      	movs	r2, #0
 80012fe:	72da      	strb	r2, [r3, #11]
	  transferBytes[12] = SLIDER1_DELTA1_0;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2200      	movs	r2, #0
 8001304:	731a      	strb	r2, [r3, #12]
	  transferBytes[13] = SLIDER1_DELTA1_1;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2200      	movs	r2, #0
 800130a:	735a      	strb	r2, [r3, #13]
	  transferBytes[14] = SLIDER1_DELTA2_0;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	739a      	strb	r2, [r3, #14]
	  transferBytes[15] = SLIDER1_DELTA2_1;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	73da      	strb	r2, [r3, #15]
	  transferBytes[16] = SLIDER1_DELTA3_0;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2200      	movs	r2, #0
 800131c:	741a      	strb	r2, [r3, #16]
	  transferBytes[17] = SLIDER1_DELTA3_1;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	745a      	strb	r2, [r3, #17]
	  transferBytes[18] = SLIDER1_GESTURE_ENABLE;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	749a      	strb	r2, [r3, #18]
	  transferBytes[19] = SLIDER1_MAX_TAP_TIME;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	74da      	strb	r2, [r3, #19]
	  transferBytes[20] = SLIDER1_MAX_SWIPE_TIME;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	751a      	strb	r2, [r3, #20]
	  transferBytes[21] = SLIDER1_MAX_SWIPE_DISTANCE;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	755a      	strb	r2, [r3, #21]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_SLIDER_SETUP_1, 22, transferBytes, RESTART);
 800133c:	23b1      	movs	r3, #177	@ 0xb1
 800133e:	021a      	lsls	r2, r3, #8
 8001340:	483a      	ldr	r0, [pc, #232]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 8001342:	2300      	movs	r3, #0
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	000c      	movs	r4, r1
 8001348:	187b      	adds	r3, r7, r1
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2316      	movs	r3, #22
 800134e:	2144      	movs	r1, #68	@ 0x44
 8001350:	f000 f91c 	bl	800158c <writeRandomBytes16>

	  /* Change the GPIO 0 Settings */
	  /* Memory Map Position 0xC000 - 0xC002 */
	  transferBytes[0] = GPIO0_SETUP_0;
 8001354:	0021      	movs	r1, r4
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = GPIO0_SETUP_1;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2200      	movs	r2, #0
 8001360:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = ENABLE_MASK_0_7;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2221      	movs	r2, #33	@ 0x21
 8001366:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = ENABLE_MASK_8_11;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = ENABLESTATUSLINK_0;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	22e8      	movs	r2, #232	@ 0xe8
 8001372:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = ENABLESTATUSLINK_1;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2206      	movs	r2, #6
 8001378:	715a      	strb	r2, [r3, #5]
	  writeRandomBytes16(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_GPIO_SETTINGS, 6, transferBytes, RESTART);
 800137a:	23c0      	movs	r3, #192	@ 0xc0
 800137c:	021a      	lsls	r2, r3, #8
 800137e:	482b      	ldr	r0, [pc, #172]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 8001380:	2300      	movs	r3, #0
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	000c      	movs	r4, r1
 8001386:	187b      	adds	r3, r7, r1
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2306      	movs	r3, #6
 800138c:	2144      	movs	r1, #68	@ 0x44
 800138e:	f000 f8fd 	bl	800158c <writeRandomBytes16>

	  /* Change the System Settings */
	  /* Memory Map Position 0xD0 - 0xD9 */
	  transferBytes[0] = SYSTEM_CONTROL_0;
 8001392:	0021      	movs	r1, r4
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2230      	movs	r2, #48	@ 0x30
 8001398:	701a      	strb	r2, [r3, #0]
	  transferBytes[1] = SYSTEM_CONTROL_1;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	22ff      	movs	r2, #255	@ 0xff
 800139e:	705a      	strb	r2, [r3, #1]
	  transferBytes[2] = ATI_ERROR_TIMEOUT_0;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2202      	movs	r2, #2
 80013a4:	709a      	strb	r2, [r3, #2]
	  transferBytes[3] = ATI_ERROR_TIMEOUT_1;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	70da      	strb	r2, [r3, #3]
	  transferBytes[4] = ATI_REPORT_RATE_0;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2200      	movs	r2, #0
 80013b0:	711a      	strb	r2, [r3, #4]
	  transferBytes[5] = ATI_REPORT_RATE_1;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	715a      	strb	r2, [r3, #5]
	  transferBytes[6] = NORMAL_MODE_TIMEOUT_0;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2288      	movs	r2, #136	@ 0x88
 80013bc:	719a      	strb	r2, [r3, #6]
	  transferBytes[7] = NORMAL_MODE_TIMEOUT_1;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2213      	movs	r2, #19
 80013c2:	71da      	strb	r2, [r3, #7]
	  transferBytes[8] = NORMAL_MODE_REPORT_RATE_0;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2210      	movs	r2, #16
 80013c8:	721a      	strb	r2, [r3, #8]
	  transferBytes[9] = NORMAL_MODE_REPORT_RATE_1;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	725a      	strb	r2, [r3, #9]
	  transferBytes[10] = LP_MODE_TIMEOUT_0;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2288      	movs	r2, #136	@ 0x88
 80013d4:	729a      	strb	r2, [r3, #10]
	  transferBytes[11] = LP_MODE_TIMEOUT_1;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2213      	movs	r2, #19
 80013da:	72da      	strb	r2, [r3, #11]
	  transferBytes[12] = LP_MODE_REPORT_RATE_0;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	223c      	movs	r2, #60	@ 0x3c
 80013e0:	731a      	strb	r2, [r3, #12]
	  transferBytes[13] = LP_MODE_REPORT_RATE_1;
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	2200      	movs	r2, #0
 80013e6:	735a      	strb	r2, [r3, #13]
	  transferBytes[14] = ULP_MODE_TIMEOUT_0;
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2210      	movs	r2, #16
 80013ec:	739a      	strb	r2, [r3, #14]
	  transferBytes[15] = ULP_MODE_TIMEOUT_1;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2227      	movs	r2, #39	@ 0x27
 80013f2:	73da      	strb	r2, [r3, #15]
	  transferBytes[16] = ULP_MODE_REPORT_RATE_0;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2296      	movs	r2, #150	@ 0x96
 80013f8:	741a      	strb	r2, [r3, #16]
	  transferBytes[17] = ULP_MODE_REPORT_RATE_1;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	745a      	strb	r2, [r3, #17]
	  transferBytes[18] = TOUCH_PROX_EVENT_MASK;
 8001400:	187b      	adds	r3, r7, r1
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	749a      	strb	r2, [r3, #18]
	  transferBytes[19] = POWER_ATI_SLIDER_EVENT_MASK;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	22f7      	movs	r2, #247	@ 0xf7
 800140a:	74da      	strb	r2, [r3, #19]
	  writeRandomBytes(&hi2c1,IQS7222A_I2C_ADDRESS,IQS7222A_MM_CONTROL_SETTINGS, 20, transferBytes, stopOrRestart);
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <IQS7222A_writeMM+0x8d4>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	187b      	adds	r3, r7, r1
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2314      	movs	r3, #20
 800141a:	22d0      	movs	r2, #208	@ 0xd0
 800141c:	2144      	movs	r1, #68	@ 0x44
 800141e:	f000 f83d 	bl	800149c <writeRandomBytes>
}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b00b      	add	sp, #44	@ 0x2c
 8001428:	e002      	b.n	8001430 <IQS7222A_writeMM+0x8d8>
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	2000012c 	.word	0x2000012c
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)

08001434 <IQS7222A_ReadRandomBytes>:
 *          Pass an array to the method by using only its name, e.g. "bytesArray",
 *          without the brackets, this passes a pointer to the array.
 */

void IQS7222A_ReadRandomBytes(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress,uint8_t memAddr, uint8_t numBytes, uint8_t* destArray, bool stopOrRestart)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af04      	add	r7, sp, #16
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	000c      	movs	r4, r1
 800143e:	0010      	movs	r0, r2
 8001440:	0019      	movs	r1, r3
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	1c22      	adds	r2, r4, #0
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	1cbb      	adds	r3, r7, #2
 800144a:	1c02      	adds	r2, r0, #0
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	1c7b      	adds	r3, r7, #1
 8001450:	1c0a      	adds	r2, r1, #0
 8001452:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(hi2c, (deviceAddress << 1), memAddr, I2C_MEMADD_SIZE_8BIT, destArray, numBytes, HAL_MAX_DELAY);
 8001454:	1cfb      	adds	r3, r7, #3
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	18db      	adds	r3, r3, r3
 800145c:	b299      	uxth	r1, r3
 800145e:	1cbb      	adds	r3, r7, #2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b29c      	uxth	r4, r3
 8001464:	1c7b      	adds	r3, r7, #1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	4252      	negs	r2, r2
 8001470:	9202      	str	r2, [sp, #8]
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	0022      	movs	r2, r4
 800147c:	f001 fe28 	bl	80030d0 <HAL_I2C_Mem_Read>

    if (stopOrRestart == STOP)
 8001480:	231c      	movs	r3, #28
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <IQS7222A_ReadRandomBytes+0x5c>
    {
        iqs7222a_deviceRDY = false;
 800148a:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <IQS7222A_ReadRandomBytes+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    }
}
 8001490:	46c0      	nop			@ (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b003      	add	sp, #12
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	2000011e 	.word	0x2000011e

0800149c <writeRandomBytes>:
  *         to passing it to the function.
  */

void writeRandomBytes(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t memoryAddress,
                      uint8_t numBytes, uint8_t *bytesArray, bool stopOrRestart)
{
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	46c6      	mov	lr, r8
 80014a0:	b500      	push	{lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	61f8      	str	r0, [r7, #28]
 80014a8:	000e      	movs	r6, r1
 80014aa:	0010      	movs	r0, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	231b      	movs	r3, #27
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	1c32      	adds	r2, r6, #0
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	221a      	movs	r2, #26
 80014b8:	18bb      	adds	r3, r7, r2
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	2019      	movs	r0, #25
 80014c0:	183b      	adds	r3, r7, r0
 80014c2:	1c0a      	adds	r2, r1, #0
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	466b      	mov	r3, sp
 80014c8:	4698      	mov	r8, r3
    // Veriyi göndermek için [memoryAddress + veriler] olacak şekilde buffer hazırlıyoruz
    uint8_t buffer[1 + numBytes];
 80014ca:	183b      	adds	r3, r7, r0
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	1e5a      	subs	r2, r3, #1
 80014d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80014d4:	001a      	movs	r2, r3
 80014d6:	60ba      	str	r2, [r7, #8]
 80014d8:	2200      	movs	r2, #0
 80014da:	60fa      	str	r2, [r7, #12]
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	0002      	movs	r2, r0
 80014e2:	0f52      	lsrs	r2, r2, #29
 80014e4:	000e      	movs	r6, r1
 80014e6:	00f6      	lsls	r6, r6, #3
 80014e8:	617e      	str	r6, [r7, #20]
 80014ea:	697e      	ldr	r6, [r7, #20]
 80014ec:	4316      	orrs	r6, r2
 80014ee:	617e      	str	r6, [r7, #20]
 80014f0:	0002      	movs	r2, r0
 80014f2:	00d2      	lsls	r2, r2, #3
 80014f4:	613a      	str	r2, [r7, #16]
 80014f6:	001a      	movs	r2, r3
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	6838      	ldr	r0, [r7, #0]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	0002      	movs	r2, r0
 8001504:	0f52      	lsrs	r2, r2, #29
 8001506:	000e      	movs	r6, r1
 8001508:	00f5      	lsls	r5, r6, #3
 800150a:	4315      	orrs	r5, r2
 800150c:	0002      	movs	r2, r0
 800150e:	00d4      	lsls	r4, r2, #3
 8001510:	3307      	adds	r3, #7
 8001512:	08db      	lsrs	r3, r3, #3
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	466a      	mov	r2, sp
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	469d      	mov	sp, r3
 800151c:	ab02      	add	r3, sp, #8
 800151e:	3300      	adds	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
    buffer[0] = memoryAddress;
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	221a      	movs	r2, #26
 8001526:	18ba      	adds	r2, r7, r2
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], bytesArray, numBytes);
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	1c58      	adds	r0, r3, #1
 8001530:	2419      	movs	r4, #25
 8001532:	193b      	adds	r3, r7, r4
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001538:	0019      	movs	r1, r3
 800153a:	f004 fa24 	bl	8005986 <memcpy>

    // I2C veri gönderimi
    HAL_I2C_Master_Transmit(hi2c, (deviceAddress << 1), buffer, 1 + numBytes, HAL_MAX_DELAY);
 800153e:	231b      	movs	r3, #27
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	18db      	adds	r3, r3, r3
 8001548:	b299      	uxth	r1, r3
 800154a:	193b      	adds	r3, r7, r4
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	b29c      	uxth	r4, r3
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	69f8      	ldr	r0, [r7, #28]
 8001558:	2301      	movs	r3, #1
 800155a:	425b      	negs	r3, r3
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0023      	movs	r3, r4
 8001560:	f001 fc8c 	bl	8002e7c <HAL_I2C_Master_Transmit>

    // STOP işlemi gerektiriyorsa ready durumunu sıfırla
    if (stopOrRestart == STOP)
 8001564:	232c      	movs	r3, #44	@ 0x2c
 8001566:	2218      	movs	r2, #24
 8001568:	189b      	adds	r3, r3, r2
 800156a:	19db      	adds	r3, r3, r7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <writeRandomBytes+0xdc>
    {
        iqs7222a_deviceRDY = false;
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <writeRandomBytes+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	46c5      	mov	sp, r8
    }
}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b00a      	add	sp, #40	@ 0x28
 8001580:	bc80      	pop	{r7}
 8001582:	46b8      	mov	r8, r7
 8001584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	2000011e 	.word	0x2000011e

0800158c <writeRandomBytes16>:

void writeRandomBytes16(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint16_t memoryAddress,
                        uint8_t numBytes, uint8_t *bytesArray, bool stopOrRestart)
{
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	46c6      	mov	lr, r8
 8001590:	b500      	push	{lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af02      	add	r7, sp, #8
 8001596:	61f8      	str	r0, [r7, #28]
 8001598:	000e      	movs	r6, r1
 800159a:	0010      	movs	r0, r2
 800159c:	0019      	movs	r1, r3
 800159e:	231b      	movs	r3, #27
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	1c32      	adds	r2, r6, #0
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	2318      	movs	r3, #24
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	1c02      	adds	r2, r0, #0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	201a      	movs	r0, #26
 80015b0:	183b      	adds	r3, r7, r0
 80015b2:	1c0a      	adds	r2, r1, #0
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	466b      	mov	r3, sp
 80015b8:	4698      	mov	r8, r3
    // Veriyi göndermek için [addr_high + addr_low + veriler] olacak şekilde buffer hazırla
    uint8_t buffer[2 + numBytes];
 80015ba:	183b      	adds	r3, r7, r0
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3302      	adds	r3, #2
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80015c4:	001a      	movs	r2, r3
 80015c6:	60ba      	str	r2, [r7, #8]
 80015c8:	2200      	movs	r2, #0
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	0002      	movs	r2, r0
 80015d2:	0f52      	lsrs	r2, r2, #29
 80015d4:	000e      	movs	r6, r1
 80015d6:	00f6      	lsls	r6, r6, #3
 80015d8:	617e      	str	r6, [r7, #20]
 80015da:	697e      	ldr	r6, [r7, #20]
 80015dc:	4316      	orrs	r6, r2
 80015de:	617e      	str	r6, [r7, #20]
 80015e0:	0002      	movs	r2, r0
 80015e2:	00d2      	lsls	r2, r2, #3
 80015e4:	613a      	str	r2, [r7, #16]
 80015e6:	001a      	movs	r2, r3
 80015e8:	603a      	str	r2, [r7, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	0002      	movs	r2, r0
 80015f4:	0f52      	lsrs	r2, r2, #29
 80015f6:	000e      	movs	r6, r1
 80015f8:	00f5      	lsls	r5, r6, #3
 80015fa:	4315      	orrs	r5, r2
 80015fc:	0002      	movs	r2, r0
 80015fe:	00d4      	lsls	r4, r2, #3
 8001600:	3307      	adds	r3, #7
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	466a      	mov	r2, sp
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	469d      	mov	sp, r3
 800160c:	ab02      	add	r3, sp, #8
 800160e:	3300      	adds	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    buffer[0] = (uint8_t)(memoryAddress >> 8);   // MSB
 8001612:	2518      	movs	r5, #24
 8001614:	197b      	adds	r3, r7, r5
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	b29b      	uxth	r3, r3
 800161c:	b2da      	uxtb	r2, r3
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	701a      	strb	r2, [r3, #0]
    buffer[1] = (uint8_t)(memoryAddress & 0xFF); // LSB
 8001622:	197b      	adds	r3, r7, r5
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	705a      	strb	r2, [r3, #1]
    memcpy(&buffer[2], bytesArray, numBytes);
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	1c98      	adds	r0, r3, #2
 8001630:	241a      	movs	r4, #26
 8001632:	193b      	adds	r3, r7, r4
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001638:	0019      	movs	r1, r3
 800163a:	f004 f9a4 	bl	8005986 <memcpy>

    // I2C veri gönderimi
    HAL_I2C_Master_Transmit(hi2c, (deviceAddress << 1), buffer, 2 + numBytes, HAL_MAX_DELAY);
 800163e:	231b      	movs	r3, #27
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	18db      	adds	r3, r3, r3
 8001648:	b299      	uxth	r1, r3
 800164a:	193b      	adds	r3, r7, r4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3302      	adds	r3, #2
 8001652:	b29c      	uxth	r4, r3
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	69f8      	ldr	r0, [r7, #28]
 8001658:	2301      	movs	r3, #1
 800165a:	425b      	negs	r3, r3
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	0023      	movs	r3, r4
 8001660:	f001 fc0c 	bl	8002e7c <HAL_I2C_Master_Transmit>

    // STOP işlemi gerektiriyorsa ready durumunu sıfırla
    if (stopOrRestart == STOP)
 8001664:	232c      	movs	r3, #44	@ 0x2c
 8001666:	195b      	adds	r3, r3, r5
 8001668:	19db      	adds	r3, r3, r7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <writeRandomBytes16+0xea>
    {
        iqs7222a_deviceRDY = false;
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <writeRandomBytes16+0xf8>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	46c5      	mov	sp, r8
    }
}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b00a      	add	sp, #40	@ 0x28
 800167e:	bc80      	pop	{r7}
 8001680:	46b8      	mov	r8, r7
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2000011e 	.word	0x2000011e

08001688 <IQS7222A_getBit>:
  * @param  bit_number -> a number between 0 and 7 representing the bit in question.
  * @retval The boolean value of the specific bit requested.
  */

bool IQS7222A_getBit(uint8_t data, uint8_t bit_number)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	0002      	movs	r2, r0
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	1c0a      	adds	r2, r1, #0
 8001698:	701a      	strb	r2, [r3, #0]
    return (data >> bit_number) & 0x01;
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	1dbb      	adds	r3, r7, #6
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	411a      	asrs	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	1e5a      	subs	r2, r3, #1
 80016ac:	4193      	sbcs	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <IQS7222A_setBit>:
  * @retval Returns an 8-bit unsigned integer value of the given data byte with
  *         the requested bit set.
  */

uint8_t IQS7222A_setBit(uint8_t data, uint8_t bit_number)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	0002      	movs	r2, r0
 80016c0:	1dfb      	adds	r3, r7, #7
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	1dbb      	adds	r3, r7, #6
 80016c6:	1c0a      	adds	r2, r1, #0
 80016c8:	701a      	strb	r2, [r3, #0]
    return data | (1U << bit_number);
 80016ca:	1dbb      	adds	r3, r7, #6
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <IQS7222A_clearBit>:
  * @retval Returns an 8-bit unsigned integer value of the given data byte with
  *         the requested bit cleared.
  */

uint8_t IQS7222A_clearBit(uint8_t data, uint8_t bit_number)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	0002      	movs	r2, r0
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	1dbb      	adds	r3, r7, #6
 80016f4:	1c0a      	adds	r2, r1, #0
 80016f6:	701a      	strb	r2, [r3, #0]
    return data & ~(1U << bit_number);
 80016f8:	1dbb      	adds	r3, r7, #6
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	1dfa      	adds	r2, r7, #7
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	4013      	ands	r3, r2
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	0219      	lsls	r1, r3, #8
 8001720:	2390      	movs	r3, #144	@ 0x90
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	2200      	movs	r2, #0
 8001726:	0018      	movs	r0, r3
 8001728:	f001 fae4 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	0219      	lsls	r1, r3, #8
 800173a:	2390      	movs	r3, #144	@ 0x90
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	2201      	movs	r2, #1
 8001740:	0018      	movs	r0, r3
 8001742:	f001 fad7 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <ST7735_Reset>:

void ST7735_Reset()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <ST7735_Reset+0x28>)
 8001752:	2200      	movs	r2, #0
 8001754:	2140      	movs	r1, #64	@ 0x40
 8001756:	0018      	movs	r0, r3
 8001758:	f001 facc 	bl	8002cf4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800175c:	2005      	movs	r0, #5
 800175e:	f001 f881 	bl	8002864 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001762:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <ST7735_Reset+0x28>)
 8001764:	2201      	movs	r2, #1
 8001766:	2140      	movs	r1, #64	@ 0x40
 8001768:	0018      	movs	r0, r3
 800176a:	f001 fac3 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	48000400 	.word	0x48000400

08001778 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	01d9      	lsls	r1, r3, #7
 8001788:	2390      	movs	r3, #144	@ 0x90
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	2200      	movs	r2, #0
 800178e:	0018      	movs	r0, r3
 8001790:	f001 fab0 	bl	8002cf4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001794:	2301      	movs	r3, #1
 8001796:	425b      	negs	r3, r3
 8001798:	1df9      	adds	r1, r7, #7
 800179a:	4804      	ldr	r0, [pc, #16]	@ (80017ac <ST7735_WriteCommand+0x34>)
 800179c:	2201      	movs	r2, #1
 800179e:	f002 fee5 	bl	800456c <HAL_SPI_Transmit>
}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	20000180 	.word	0x20000180

080017b0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	01d9      	lsls	r1, r3, #7
 80017be:	2390      	movs	r3, #144	@ 0x90
 80017c0:	05db      	lsls	r3, r3, #23
 80017c2:	2201      	movs	r2, #1
 80017c4:	0018      	movs	r0, r3
 80017c6:	f001 fa95 	bl	8002cf4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	425b      	negs	r3, r3
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <ST7735_WriteData+0x34>)
 80017d6:	f002 fec9 	bl	800456c <HAL_SPI_Transmit>
}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	20000180 	.word	0x20000180

080017e8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	220f      	movs	r2, #15
 80017f8:	18ba      	adds	r2, r7, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80017fe:	e04a      	b.n	8001896 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	210b      	movs	r1, #11
 8001808:	187a      	adds	r2, r7, r1
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800180e:	187b      	adds	r3, r7, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff ffb0 	bl	8001778 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	200a      	movs	r0, #10
 8001820:	183a      	adds	r2, r7, r0
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001826:	183b      	adds	r3, r7, r0
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
 800182c:	230c      	movs	r3, #12
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	400a      	ands	r2, r1
 8001834:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8001836:	183b      	adds	r3, r7, r0
 8001838:	183a      	adds	r2, r7, r0
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	217f      	movs	r1, #127	@ 0x7f
 800183e:	400a      	ands	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8001842:	183b      	adds	r3, r7, r0
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800184a:	0004      	movs	r4, r0
 800184c:	183b      	adds	r3, r7, r0
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff ffab 	bl	80017b0 <ST7735_WriteData>
            addr += numArgs;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001864:	210c      	movs	r1, #12
 8001866:	187b      	adds	r3, r7, r1
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d013      	beq.n	8001896 <DisplayInit+0xae>
            ms = *addr++;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	187b      	adds	r3, r7, r1
 8001878:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	2bff      	cmp	r3, #255	@ 0xff
 8001880:	d103      	bne.n	800188a <DisplayInit+0xa2>
 8001882:	187b      	adds	r3, r7, r1
 8001884:	22fa      	movs	r2, #250	@ 0xfa
 8001886:	0052      	lsls	r2, r2, #1
 8001888:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800188a:	230c      	movs	r3, #12
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 ffe7 	bl	8002864 <HAL_Delay>
    while(numCommands--) {
 8001896:	220f      	movs	r2, #15
 8001898:	18bb      	adds	r3, r7, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	18ba      	adds	r2, r7, r2
 800189e:	1e59      	subs	r1, r3, #1
 80018a0:	7011      	strb	r1, [r2, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ac      	bne.n	8001800 <DisplayInit+0x18>
        }
    }
}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b005      	add	sp, #20
 80018ae:	bd90      	pop	{r4, r7, pc}

080018b0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	0005      	movs	r5, r0
 80018b8:	000c      	movs	r4, r1
 80018ba:	0010      	movs	r0, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	1c2a      	adds	r2, r5, #0
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	1c22      	adds	r2, r4, #0
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	1d7b      	adds	r3, r7, #5
 80018cc:	1c02      	adds	r2, r0, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	1c0a      	adds	r2, r1, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80018d6:	202a      	movs	r0, #42	@ 0x2a
 80018d8:	f7ff ff4e 	bl	8001778 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80018dc:	210c      	movs	r1, #12
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <ST7735_SetAddressWindow+0xa8>)
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	705a      	strb	r2, [r3, #1]
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2200      	movs	r2, #0
 80018f8:	709a      	strb	r2, [r3, #2]
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <ST7735_SetAddressWindow+0xa8>)
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	1d7b      	adds	r3, r7, #5
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	b2da      	uxtb	r2, r3
 8001906:	187b      	adds	r3, r7, r1
 8001908:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800190a:	000c      	movs	r4, r1
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2104      	movs	r1, #4
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ff4d 	bl	80017b0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001916:	202b      	movs	r0, #43	@ 0x2b
 8001918:	f7ff ff2e 	bl	8001778 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <ST7735_SetAddressWindow+0xac>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	18d3      	adds	r3, r2, r3
 8001926:	b2da      	uxtb	r2, r3
 8001928:	0021      	movs	r1, r4
 800192a:	187b      	adds	r3, r7, r1
 800192c:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <ST7735_SetAddressWindow+0xac>)
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	18d3      	adds	r3, r2, r3
 8001938:	b2da      	uxtb	r2, r3
 800193a:	187b      	adds	r3, r7, r1
 800193c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2104      	movs	r1, #4
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff ff34 	bl	80017b0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001948:	202c      	movs	r0, #44	@ 0x2c
 800194a:	f7ff ff15 	bl	8001778 <ST7735_WriteCommand>
}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bdb0      	pop	{r4, r5, r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	20000127 	.word	0x20000127
 800195c:	20000128 	.word	0x20000128

08001960 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	0002      	movs	r2, r0
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 800196c:	f7ff fed4 	bl	8001718 <ST7735_Select>
    ST7735_Reset();
 8001970:	f7ff feec 	bl	800174c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <ST7735_Init+0x48>)
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff ff36 	bl	80017e8 <DisplayInit>
    //DisplayInit(init_cmds2);
    DisplayInit(init_cmds3);
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <ST7735_Init+0x4c>)
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff ff32 	bl	80017e8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <ST7735_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800198a:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <ST7735_Init+0x54>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001990:	1dfb      	adds	r3, r7, #7
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f80f 	bl	80019b8 <ST7735_SetRotation>
    ST7735_Unselect();
 800199a:	f7ff feca 	bl	8001732 <ST7735_Unselect>

}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	080066d8 	.word	0x080066d8
 80019ac:	08006710 	.word	0x08006710
 80019b0:	20000125 	.word	0x20000125
 80019b4:	20000126 	.word	0x20000126

080019b8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80019c4:	230f      	movs	r3, #15
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2203      	movs	r2, #3
 80019d2:	4013      	ands	r3, r2
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <ST7735_SetRotation+0xf8>)
 80019d8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80019da:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <ST7735_SetRotation+0xf8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d041      	beq.n	8001a66 <ST7735_SetRotation+0xae>
 80019e2:	dc53      	bgt.n	8001a8c <ST7735_SetRotation+0xd4>
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d02b      	beq.n	8001a40 <ST7735_SetRotation+0x88>
 80019e8:	dc50      	bgt.n	8001a8c <ST7735_SetRotation+0xd4>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <ST7735_SetRotation+0x3c>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d013      	beq.n	8001a1a <ST7735_SetRotation+0x62>
 80019f2:	e04b      	b.n	8001a8c <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80019f4:	230f      	movs	r3, #15
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	22c0      	movs	r2, #192	@ 0xc0
 80019fa:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <ST7735_SetRotation+0xfc>)
 80019fe:	2240      	movs	r2, #64	@ 0x40
 8001a00:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001a02:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <ST7735_SetRotation+0x100>)
 8001a04:	2280      	movs	r2, #128	@ 0x80
 8001a06:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001a08:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <ST7735_SetRotation+0x104>)
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <ST7735_SetRotation+0x108>)
 8001a0e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <ST7735_SetRotation+0x10c>)
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <ST7735_SetRotation+0x110>)
 8001a16:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a18:	e038      	b.n	8001a8c <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	22a0      	movs	r2, #160	@ 0xa0
 8001a20:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001a22:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <ST7735_SetRotation+0x100>)
 8001a24:	2240      	movs	r2, #64	@ 0x40
 8001a26:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <ST7735_SetRotation+0xfc>)
 8001a2a:	2280      	movs	r2, #128	@ 0x80
 8001a2c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <ST7735_SetRotation+0x104>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <ST7735_SetRotation+0x110>)
 8001a34:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001a36:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <ST7735_SetRotation+0x10c>)
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <ST7735_SetRotation+0x108>)
 8001a3c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a3e:	e025      	b.n	8001a8c <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001a40:	230f      	movs	r3, #15
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <ST7735_SetRotation+0xfc>)
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <ST7735_SetRotation+0x100>)
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <ST7735_SetRotation+0x104>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <ST7735_SetRotation+0x108>)
 8001a5a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <ST7735_SetRotation+0x10c>)
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <ST7735_SetRotation+0x110>)
 8001a62:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a64:	e012      	b.n	8001a8c <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001a66:	230f      	movs	r3, #15
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2260      	movs	r2, #96	@ 0x60
 8001a6c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <ST7735_SetRotation+0x100>)
 8001a70:	2240      	movs	r2, #64	@ 0x40
 8001a72:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <ST7735_SetRotation+0xfc>)
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <ST7735_SetRotation+0x104>)
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <ST7735_SetRotation+0x110>)
 8001a80:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <ST7735_SetRotation+0x10c>)
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <ST7735_SetRotation+0x108>)
 8001a88:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a8a:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8001a8c:	f7ff fe44 	bl	8001718 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001a90:	2036      	movs	r0, #54	@ 0x36
 8001a92:	f7ff fe71 	bl	8001778 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001a96:	230f      	movs	r3, #15
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fe87 	bl	80017b0 <ST7735_WriteData>
  ST7735_Unselect();
 8001aa2:	f7ff fe46 	bl	8001732 <ST7735_Unselect>
}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b004      	add	sp, #16
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	20000124 	.word	0x20000124
 8001ab4:	20000122 	.word	0x20000122
 8001ab8:	20000120 	.word	0x20000120
 8001abc:	20000125 	.word	0x20000125
 8001ac0:	20000127 	.word	0x20000127
 8001ac4:	20000126 	.word	0x20000126
 8001ac8:	20000128 	.word	0x20000128

08001acc <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	0005      	movs	r5, r0
 8001ad4:	000c      	movs	r4, r1
 8001ad6:	0010      	movs	r0, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	1c2a      	adds	r2, r5, #0
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	1c22      	adds	r2, r4, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	1cbb      	adds	r3, r7, #2
 8001ae8:	1c02      	adds	r2, r0, #0
 8001aea:	801a      	strh	r2, [r3, #0]
 8001aec:	003b      	movs	r3, r7
 8001aee:	1c0a      	adds	r2, r1, #0
 8001af0:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <ST7735_FillRectangle+0x154>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	5e52      	ldrsh	r2, [r2, r1]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	db00      	blt.n	8001b02 <ST7735_FillRectangle+0x36>
 8001b00:	e089      	b.n	8001c16 <ST7735_FillRectangle+0x14a>
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	4a47      	ldr	r2, [pc, #284]	@ (8001c24 <ST7735_FillRectangle+0x158>)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5e52      	ldrsh	r2, [r2, r1]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	db00      	blt.n	8001b12 <ST7735_FillRectangle+0x46>
 8001b10:	e081      	b.n	8001c16 <ST7735_FillRectangle+0x14a>
    if((x + w - 1) >= _width) w = _width - x;
 8001b12:	1dbb      	adds	r3, r7, #6
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	1cbb      	adds	r3, r7, #2
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	18d3      	adds	r3, r2, r3
 8001b1c:	4a40      	ldr	r2, [pc, #256]	@ (8001c20 <ST7735_FillRectangle+0x154>)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	5e52      	ldrsh	r2, [r2, r1]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	dd08      	ble.n	8001b38 <ST7735_FillRectangle+0x6c>
 8001b26:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <ST7735_FillRectangle+0x154>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	1cbb      	adds	r3, r7, #2
 8001b30:	1dba      	adds	r2, r7, #6
 8001b32:	8812      	ldrh	r2, [r2, #0]
 8001b34:	1a8a      	subs	r2, r1, r2
 8001b36:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	003b      	movs	r3, r7
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	4a38      	ldr	r2, [pc, #224]	@ (8001c24 <ST7735_FillRectangle+0x158>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	5e52      	ldrsh	r2, [r2, r1]
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	dd08      	ble.n	8001b5e <ST7735_FillRectangle+0x92>
 8001b4c:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <ST7735_FillRectangle+0x158>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	5e9b      	ldrsh	r3, [r3, r2]
 8001b52:	b299      	uxth	r1, r3
 8001b54:	003b      	movs	r3, r7
 8001b56:	1d3a      	adds	r2, r7, #4
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	1a8a      	subs	r2, r1, r2
 8001b5c:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001b5e:	f7ff fddb 	bl	8001718 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001b62:	1dbb      	adds	r3, r7, #6
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b2d8      	uxtb	r0, r3
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b2d9      	uxtb	r1, r3
 8001b6e:	1dbb      	adds	r3, r7, #6
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	1cbb      	adds	r3, r7, #2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	18d3      	adds	r3, r2, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b2dc      	uxtb	r4, r3
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	003b      	movs	r3, r7
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	0022      	movs	r2, r4
 8001b98:	f7ff fe8a 	bl	80018b0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	200c      	movs	r0, #12
 8001baa:	183b      	adds	r3, r7, r0
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	183b      	adds	r3, r7, r0
 8001bb6:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	01d9      	lsls	r1, r3, #7
 8001bbc:	2390      	movs	r3, #144	@ 0x90
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f001 f896 	bl	8002cf4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	003a      	movs	r2, r7
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	e01a      	b.n	8001c08 <ST7735_FillRectangle+0x13c>
        for(x = w; x > 0; x--) {
 8001bd2:	1dbb      	adds	r3, r7, #6
 8001bd4:	1cba      	adds	r2, r7, #2
 8001bd6:	8812      	ldrh	r2, [r2, #0]
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	e00c      	b.n	8001bf6 <ST7735_FillRectangle+0x12a>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001bdc:	2301      	movs	r3, #1
 8001bde:	425b      	negs	r3, r3
 8001be0:	220c      	movs	r2, #12
 8001be2:	18b9      	adds	r1, r7, r2
 8001be4:	4810      	ldr	r0, [pc, #64]	@ (8001c28 <ST7735_FillRectangle+0x15c>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	f002 fcc0 	bl	800456c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001bec:	1dbb      	adds	r3, r7, #6
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	1dbb      	adds	r3, r7, #6
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	1dbb      	adds	r3, r7, #6
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <ST7735_FillRectangle+0x110>
    for(y = h; y > 0; y--) {
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	3a01      	subs	r2, #1
 8001c06:	801a      	strh	r2, [r3, #0]
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e0      	bne.n	8001bd2 <ST7735_FillRectangle+0x106>
        }
    }

    ST7735_Unselect();
 8001c10:	f7ff fd8f 	bl	8001732 <ST7735_Unselect>
 8001c14:	e000      	b.n	8001c18 <ST7735_FillRectangle+0x14c>
    if((x >= _width) || (y >= _height)) return;
 8001c16:	46c0      	nop			@ (mov r8, r8)
}
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	20000120 	.word	0x20000120
 8001c24:	20000122 	.word	0x20000122
 8001c28:	20000180 	.word	0x20000180

08001c2c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	0005      	movs	r5, r0
 8001c34:	000c      	movs	r4, r1
 8001c36:	0010      	movs	r0, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	1c2a      	adds	r2, r5, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	1c22      	adds	r2, r4, #0
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	1c02      	adds	r2, r0, #0
 8001c4a:	801a      	strh	r2, [r3, #0]
 8001c4c:	003b      	movs	r3, r7
 8001c4e:	1c0a      	adds	r2, r1, #0
 8001c50:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	4a2a      	ldr	r2, [pc, #168]	@ (8001d00 <ST7735_DrawImage+0xd4>)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5e52      	ldrsh	r2, [r2, r1]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	da47      	bge.n	8001cf0 <ST7735_DrawImage+0xc4>
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <ST7735_DrawImage+0xd8>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	5e52      	ldrsh	r2, [r2, r1]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	da40      	bge.n	8001cf0 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	1cbb      	adds	r3, r7, #2
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	18d3      	adds	r3, r2, r3
 8001c78:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <ST7735_DrawImage+0xd4>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5e52      	ldrsh	r2, [r2, r1]
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	dc38      	bgt.n	8001cf4 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	003b      	movs	r3, r7
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d04 <ST7735_DrawImage+0xd8>)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5e52      	ldrsh	r2, [r2, r1]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	dc30      	bgt.n	8001cf8 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8001c96:	f7ff fd3f 	bl	8001718 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001c9a:	1dbb      	adds	r3, r7, #6
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b2d8      	uxtb	r0, r3
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b2d9      	uxtb	r1, r3
 8001ca6:	1dbb      	adds	r3, r7, #6
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	1cbb      	adds	r3, r7, #2
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	18d3      	adds	r3, r2, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b2dc      	uxtb	r4, r3
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	003b      	movs	r3, r7
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	18d3      	adds	r3, r2, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	0022      	movs	r2, r4
 8001cd0:	f7ff fdee 	bl	80018b0 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001cd4:	1cbb      	adds	r3, r7, #2
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	003a      	movs	r2, r7
 8001cda:	8812      	ldrh	r2, [r2, #0]
 8001cdc:	4353      	muls	r3, r2
 8001cde:	005a      	lsls	r2, r3, #1
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fd63 	bl	80017b0 <ST7735_WriteData>
    ST7735_Unselect();
 8001cea:	f7ff fd22 	bl	8001732 <ST7735_Unselect>
 8001cee:	e004      	b.n	8001cfa <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	e002      	b.n	8001cfa <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	e000      	b.n	8001cfa <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8001cf8:	46c0      	nop			@ (mov r8, r8)
}
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001d00:	20000120 	.word	0x20000120
 8001d04:	20000122 	.word	0x20000122

08001d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d0c:	f000 fd46 	bl	800279c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d10:	f000 f826 	bl	8001d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d14:	f000 f938 	bl	8001f88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d18:	f000 f8c8 	bl	8001eac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d1c:	f000 f904 	bl	8001f28 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d20:	f000 f884 	bl	8001e2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  ST7735_Init(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff fe1b 	bl	8001960 <ST7735_Init>

  IQS7222A_begin(0x44, GPIOB, GPIO_PIN_1);
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <main+0x50>)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	2044      	movs	r0, #68	@ 0x44
 8001d32:	f7fe fabf 	bl	80002b4 <IQS7222A_begin>

  drawMenu(0);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 fa28 	bl	800218c <drawMenu>
  {




	  IQS7222A_run();
 8001d3c:	f7fe fc1e 	bl	800057c <IQS7222A_run>

	  if(iqs7222a.new_data_available)
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <main+0x54>)
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	5c9b      	ldrb	r3, [r3, r2]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f8      	beq.n	8001d3c <main+0x34>
	  {
		  checkTouch();
 8001d4a:	f000 fad5 	bl	80022f8 <checkTouch>
	      iqs7222a.new_data_available = false;
 8001d4e:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <main+0x54>)
 8001d50:	2240      	movs	r2, #64	@ 0x40
 8001d52:	2100      	movs	r1, #0
 8001d54:	5499      	strb	r1, [r3, r2]
	  IQS7222A_run();
 8001d56:	e7f1      	b.n	8001d3c <main+0x34>
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	20000094 	.word	0x20000094

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b095      	sub	sp, #84	@ 0x54
 8001d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d66:	2420      	movs	r4, #32
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2330      	movs	r3, #48	@ 0x30
 8001d6e:	001a      	movs	r2, r3
 8001d70:	2100      	movs	r1, #0
 8001d72:	f003 fd85 	bl	8005880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d76:	2310      	movs	r3, #16
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	001a      	movs	r2, r3
 8001d80:	2100      	movs	r1, #0
 8001d82:	f003 fd7d 	bl	8005880 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d86:	003b      	movs	r3, r7
 8001d88:	0018      	movs	r0, r3
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f003 fd76 	bl	8005880 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d94:	0021      	movs	r1, r4
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2201      	movs	r2, #1
 8001da0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	2210      	movs	r2, #16
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	2202      	movs	r2, #2
 8001dac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2280      	movs	r2, #128	@ 0x80
 8001db2:	0212      	lsls	r2, r2, #8
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2280      	movs	r2, #128	@ 0x80
 8001dba:	0352      	lsls	r2, r2, #13
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f001 fde6 	bl	8003998 <HAL_RCC_OscConfig>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d001      	beq.n	8001dd4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001dd0:	f000 f9b0 	bl	8002134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2202      	movs	r2, #2
 8001de0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2101      	movs	r1, #1
 8001df2:	0018      	movs	r0, r3
 8001df4:	f002 f8ee 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8001df8:	1e03      	subs	r3, r0, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001dfc:	f000 f99a 	bl	8002134 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001e00:	003b      	movs	r3, r7
 8001e02:	2221      	movs	r2, #33	@ 0x21
 8001e04:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e06:	003b      	movs	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e0c:	003b      	movs	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e12:	003b      	movs	r3, r7
 8001e14:	0018      	movs	r0, r3
 8001e16:	f002 fa23 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e1e:	f000 f989 	bl	8002134 <Error_Handler>
  }
}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b015      	add	sp, #84	@ 0x54
 8001e28:	bd90      	pop	{r4, r7, pc}
	...

08001e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <MX_I2C1_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <MX_I2C1_Init+0x7c>)
 8001e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 ff61 	bl	8002d30 <HAL_I2C_Init>
 8001e6e:	1e03      	subs	r3, r0, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e72:	f000 f95f 	bl	8002134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f001 fcf4 	bl	8003868 <HAL_I2CEx_ConfigAnalogFilter>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d001      	beq.n	8001e88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e84:	f000 f956 	bl	8002134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f001 fd37 	bl	8003900 <HAL_I2CEx_ConfigDigitalFilter>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f000 f94d 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000012c 	.word	0x2000012c
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	00201d2b 	.word	0x00201d2b

08001eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <MX_SPI1_Init+0x78>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001eb8:	2282      	movs	r2, #130	@ 0x82
 8001eba:	0052      	lsls	r2, r2, #1
 8001ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ec6:	22c0      	movs	r2, #192	@ 0xc0
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001eda:	2280      	movs	r2, #128	@ 0x80
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ee2:	2218      	movs	r2, #24
 8001ee4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001f06:	2208      	movs	r2, #8
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <MX_SPI1_Init+0x74>)
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 fa75 	bl	80043fc <HAL_SPI_Init>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f16:	f000 f90d 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000180 	.word	0x20000180
 8001f24:	40013000 	.word	0x40013000

08001f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f2e:	4a15      	ldr	r2, [pc, #84]	@ (8001f84 <MX_USART1_UART_Init+0x5c>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f34:	22e1      	movs	r2, #225	@ 0xe1
 8001f36:	0252      	lsls	r2, r2, #9
 8001f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f002 fdd3 	bl	8004b18 <HAL_UART_Init>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f76:	f000 f8dd 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200001e4 	.word	0x200001e4
 8001f84:	40013800 	.word	0x40013800

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b08b      	sub	sp, #44	@ 0x2c
 8001f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	2414      	movs	r4, #20
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	0018      	movs	r0, r3
 8001f94:	2314      	movs	r3, #20
 8001f96:	001a      	movs	r2, r3
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f003 fc71 	bl	8005880 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b61      	ldr	r3, [pc, #388]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	4b60      	ldr	r3, [pc, #384]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fa4:	2180      	movs	r1, #128	@ 0x80
 8001fa6:	0309      	lsls	r1, r1, #12
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	031b      	lsls	r3, r3, #12
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fba:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	4b59      	ldr	r3, [pc, #356]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fc0:	2180      	movs	r1, #128	@ 0x80
 8001fc2:	03c9      	lsls	r1, r1, #15
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	4b56      	ldr	r3, [pc, #344]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	03db      	lsls	r3, r3, #15
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	02c9      	lsls	r1, r1, #11
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	02db      	lsls	r3, r3, #11
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8001ff8:	2180      	movs	r1, #128	@ 0x80
 8001ffa:	0289      	lsls	r1, r1, #10
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	4b48      	ldr	r3, [pc, #288]	@ (8002124 <MX_GPIO_Init+0x19c>)
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	4013      	ands	r3, r2
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800200e:	4b46      	ldr	r3, [pc, #280]	@ (8002128 <MX_GPIO_Init+0x1a0>)
 8002010:	2200      	movs	r2, #0
 8002012:	2102      	movs	r1, #2
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fe6d 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dc_pin_SPI_Pin|cs_pin_SPI_Pin, GPIO_PIN_RESET);
 800201a:	23c0      	movs	r3, #192	@ 0xc0
 800201c:	0219      	lsls	r1, r3, #8
 800201e:	2390      	movs	r3, #144	@ 0x90
 8002020:	05db      	lsls	r3, r3, #23
 8002022:	2200      	movs	r2, #0
 8002024:	0018      	movs	r0, r3
 8002026:	f000 fe65 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(reset_pin_SPI_GPIO_Port, reset_pin_SPI_Pin, GPIO_PIN_RESET);
 800202a:	4b40      	ldr	r3, [pc, #256]	@ (800212c <MX_GPIO_Init+0x1a4>)
 800202c:	2200      	movs	r2, #0
 800202e:	2140      	movs	r1, #64	@ 0x40
 8002030:	0018      	movs	r0, r3
 8002032:	f000 fe5f 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002036:	193b      	adds	r3, r7, r4
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	0192      	lsls	r2, r2, #6
 800203c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203e:	193b      	adds	r3, r7, r4
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002044:	193b      	adds	r3, r7, r4
 8002046:	2201      	movs	r2, #1
 8002048:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204a:	193b      	adds	r3, r7, r4
 800204c:	4a38      	ldr	r2, [pc, #224]	@ (8002130 <MX_GPIO_Init+0x1a8>)
 800204e:	0019      	movs	r1, r3
 8002050:	0010      	movs	r0, r2
 8002052:	f000 fcdf 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002056:	193b      	adds	r3, r7, r4
 8002058:	2202      	movs	r2, #2
 800205a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	193b      	adds	r3, r7, r4
 800205e:	2201      	movs	r2, #1
 8002060:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	193b      	adds	r3, r7, r4
 8002064:	2201      	movs	r2, #1
 8002066:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	193b      	adds	r3, r7, r4
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206e:	193b      	adds	r3, r7, r4
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <MX_GPIO_Init+0x1a0>)
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f000 fccd 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ready_pin_Pin */
  GPIO_InitStruct.Pin = ready_pin_Pin;
 800207a:	0021      	movs	r1, r4
 800207c:	187b      	adds	r3, r7, r1
 800207e:	2202      	movs	r2, #2
 8002080:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002082:	187b      	adds	r3, r7, r1
 8002084:	2284      	movs	r2, #132	@ 0x84
 8002086:	0392      	lsls	r2, r2, #14
 8002088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2201      	movs	r2, #1
 800208e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ready_pin_GPIO_Port, &GPIO_InitStruct);
 8002090:	000c      	movs	r4, r1
 8002092:	187b      	adds	r3, r7, r1
 8002094:	4a25      	ldr	r2, [pc, #148]	@ (800212c <MX_GPIO_Init+0x1a4>)
 8002096:	0019      	movs	r1, r3
 8002098:	0010      	movs	r0, r2
 800209a:	f000 fcbb 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : dc_pin_SPI_Pin */
  GPIO_InitStruct.Pin = dc_pin_SPI_Pin;
 800209e:	0021      	movs	r1, r4
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	2280      	movs	r2, #128	@ 0x80
 80020a4:	01d2      	lsls	r2, r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	000c      	movs	r4, r1
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	2201      	movs	r2, #1
 80020ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(dc_pin_SPI_GPIO_Port, &GPIO_InitStruct);
 80020bc:	193a      	adds	r2, r7, r4
 80020be:	2390      	movs	r3, #144	@ 0x90
 80020c0:	05db      	lsls	r3, r3, #23
 80020c2:	0011      	movs	r1, r2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fca5 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : cs_pin_SPI_Pin */
  GPIO_InitStruct.Pin = cs_pin_SPI_Pin;
 80020ca:	0021      	movs	r1, r4
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	0212      	lsls	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d4:	000c      	movs	r4, r1
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2201      	movs	r2, #1
 80020da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2201      	movs	r2, #1
 80020e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(cs_pin_SPI_GPIO_Port, &GPIO_InitStruct);
 80020e8:	193a      	adds	r2, r7, r4
 80020ea:	2390      	movs	r3, #144	@ 0x90
 80020ec:	05db      	lsls	r3, r3, #23
 80020ee:	0011      	movs	r1, r2
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 fc8f 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_pin_SPI_Pin */
  GPIO_InitStruct.Pin = reset_pin_SPI_Pin;
 80020f6:	0021      	movs	r1, r4
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2240      	movs	r2, #64	@ 0x40
 80020fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2201      	movs	r2, #1
 8002102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2201      	movs	r2, #1
 8002108:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(reset_pin_SPI_GPIO_Port, &GPIO_InitStruct);
 8002110:	187b      	adds	r3, r7, r1
 8002112:	4a06      	ldr	r2, [pc, #24]	@ (800212c <MX_GPIO_Init+0x1a4>)
 8002114:	0019      	movs	r1, r3
 8002116:	0010      	movs	r0, r2
 8002118:	f000 fc7c 	bl	8002a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b00b      	add	sp, #44	@ 0x2c
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	48001400 	.word	0x48001400
 800212c:	48000400 	.word	0x48000400
 8002130:	48000800 	.word	0x48000800

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213c:	46c0      	nop			@ (mov r8, r8)
 800213e:	e7fd      	b.n	800213c <Error_Handler+0x8>

08002140 <SendUART>:
MenuItem menu_items[MENU_ITEM_COUNT] = {
    { &home_icon, "Home" },
    { &light_bulb_icon, "Lamba" }
};

void SendUART(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	  if (selectedIndex < MENU_ITEM_COUNT) {
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <SendUART+0x40>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d813      	bhi.n	8002176 <SendUART+0x36>
	        const char* text = menu_items[selectedIndex].label;
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <SendUART+0x40>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <SendUART+0x44>)
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	18d3      	adds	r3, r2, r3
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	607b      	str	r3, [r7, #4]
	        HAL_UART_Transmit(&huart1, (uint8_t*)text, strlen(text), HAL_MAX_DELAY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f7fd ffcf 	bl	8000104 <strlen>
 8002166:	0003      	movs	r3, r0
 8002168:	b29a      	uxth	r2, r3
 800216a:	2301      	movs	r3, #1
 800216c:	425b      	negs	r3, r3
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4805      	ldr	r0, [pc, #20]	@ (8002188 <SendUART+0x48>)
 8002172:	f002 fd25 	bl	8004bc0 <HAL_UART_Transmit>
	    }
}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	2000026c 	.word	0x2000026c
 8002184:	20000000 	.word	0x20000000
 8002188:	200001e4 	.word	0x200001e4

0800218c <drawMenu>:


void drawMenu(uint8_t selectedIndex) {
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af02      	add	r7, sp, #8
 8002192:	0002      	movs	r2, r0
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	701a      	strb	r2, [r3, #0]
    FillScreen(0x8410);
 8002198:	4b45      	ldr	r3, [pc, #276]	@ (80022b0 <drawMenu+0x124>)
 800219a:	0018      	movs	r0, r3
 800219c:	f7fe f876 	bl	800028c <FillScreen>

    uint16_t spacing = 20;
 80021a0:	2114      	movs	r1, #20
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2214      	movs	r2, #20
 80021a6:	801a      	strh	r2, [r3, #0]
    uint16_t icon_width = menu_items[0].icon->width;
 80021a8:	4b42      	ldr	r3, [pc, #264]	@ (80022b4 <drawMenu+0x128>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2012      	movs	r0, #18
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	8892      	ldrh	r2, [r2, #4]
 80021b2:	801a      	strh	r2, [r3, #0]
    uint16_t icon_height = menu_items[0].icon->height;
 80021b4:	4b3f      	ldr	r3, [pc, #252]	@ (80022b4 <drawMenu+0x128>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2310      	movs	r3, #16
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	88d2      	ldrh	r2, [r2, #6]
 80021be:	801a      	strh	r2, [r3, #0]

    uint16_t start_x = (128 - (MENU_ITEM_COUNT * icon_width + (MENU_ITEM_COUNT - 1) * spacing)) / 2;
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	005a      	lsls	r2, r3, #1
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	18d3      	adds	r3, r2, r3
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	d500      	bpl.n	80021d4 <drawMenu+0x48>
 80021d2:	3301      	adds	r3, #1
 80021d4:	105b      	asrs	r3, r3, #1
 80021d6:	001a      	movs	r2, r3
 80021d8:	230e      	movs	r3, #14
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	801a      	strh	r2, [r3, #0]
    uint16_t y = (64 - icon_height) / 2;
 80021de:	2310      	movs	r3, #16
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2240      	movs	r2, #64	@ 0x40
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	d500      	bpl.n	80021ec <drawMenu+0x60>
 80021ea:	3301      	adds	r3, #1
 80021ec:	105b      	asrs	r3, r3, #1
 80021ee:	001a      	movs	r2, r3
 80021f0:	230c      	movs	r3, #12
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < MENU_ITEM_COUNT; i++) {
 80021f6:	2317      	movs	r3, #23
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e04d      	b.n	800229c <drawMenu+0x110>
        uint16_t x = start_x + i * (icon_width + spacing);
 8002200:	2017      	movs	r0, #23
 8002202:	183b      	adds	r3, r7, r0
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	2412      	movs	r4, #18
 800220a:	1939      	adds	r1, r7, r4
 800220c:	2214      	movs	r2, #20
 800220e:	18ba      	adds	r2, r7, r2
 8002210:	8809      	ldrh	r1, [r1, #0]
 8002212:	8812      	ldrh	r2, [r2, #0]
 8002214:	188a      	adds	r2, r1, r2
 8002216:	b292      	uxth	r2, r2
 8002218:	4353      	muls	r3, r2
 800221a:	b299      	uxth	r1, r3
 800221c:	250a      	movs	r5, #10
 800221e:	197b      	adds	r3, r7, r5
 8002220:	220e      	movs	r2, #14
 8002222:	18ba      	adds	r2, r7, r2
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	188a      	adds	r2, r1, r2
 8002228:	801a      	strh	r2, [r3, #0]

        if (i == selectedIndex) {
 800222a:	183a      	adds	r2, r7, r0
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d115      	bne.n	8002262 <drawMenu+0xd6>
        	ST7735_FillRectangle(x - 2, y - 2, icon_width + 4, icon_height + 4, 0xC618);
 8002236:	197b      	adds	r3, r7, r5
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	3b02      	subs	r3, #2
 800223c:	b298      	uxth	r0, r3
 800223e:	230c      	movs	r3, #12
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	3b02      	subs	r3, #2
 8002246:	b299      	uxth	r1, r3
 8002248:	193b      	adds	r3, r7, r4
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	3304      	adds	r3, #4
 800224e:	b29a      	uxth	r2, r3
 8002250:	2310      	movs	r3, #16
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	3304      	adds	r3, #4
 8002258:	b29b      	uxth	r3, r3
 800225a:	4c17      	ldr	r4, [pc, #92]	@ (80022b8 <drawMenu+0x12c>)
 800225c:	9400      	str	r4, [sp, #0]
 800225e:	f7ff fc35 	bl	8001acc <ST7735_FillRectangle>
        }

        ST7735_DrawImage(x, y, icon_width, icon_height, (const uint16_t*)menu_items[i].icon->data);
 8002262:	2617      	movs	r6, #23
 8002264:	19bb      	adds	r3, r7, r6
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <drawMenu+0x128>)
 800226a:	00d2      	lsls	r2, r2, #3
 800226c:	58d3      	ldr	r3, [r2, r3]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	18ba      	adds	r2, r7, r2
 8002274:	8815      	ldrh	r5, [r2, #0]
 8002276:	2212      	movs	r2, #18
 8002278:	18ba      	adds	r2, r7, r2
 800227a:	8814      	ldrh	r4, [r2, #0]
 800227c:	220c      	movs	r2, #12
 800227e:	18ba      	adds	r2, r7, r2
 8002280:	8811      	ldrh	r1, [r2, #0]
 8002282:	220a      	movs	r2, #10
 8002284:	18ba      	adds	r2, r7, r2
 8002286:	8810      	ldrh	r0, [r2, #0]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	002b      	movs	r3, r5
 800228c:	0022      	movs	r2, r4
 800228e:	f7ff fccd 	bl	8001c2c <ST7735_DrawImage>
    for (uint8_t i = 0; i < MENU_ITEM_COUNT; i++) {
 8002292:	19bb      	adds	r3, r7, r6
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	19bb      	adds	r3, r7, r6
 8002298:	3201      	adds	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	2317      	movs	r3, #23
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d9ac      	bls.n	8002200 <drawMenu+0x74>
    }
}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	46c0      	nop			@ (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b007      	add	sp, #28
 80022ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b0:	00008410 	.word	0x00008410
 80022b4:	20000000 	.word	0x20000000
 80022b8:	0000c618 	.word	0x0000c618

080022bc <IQS7222A_anyChannelTouched>:

bool IQS7222A_anyChannelTouched(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
    // Kanal ID'lerini sırayla kontrol ediyoruz
    for (iqs7222a_channel_e ch = IQS7222A_CH0; ch <= IQS7222A_HALL; ch++)
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e00d      	b.n	80022e6 <IQS7222A_anyChannelTouched+0x2a>
    {
        if (IQS7222A_channelTouchState(ch))
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7fe fbd2 	bl	8000a78 <IQS7222A_channelTouchState>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d001      	beq.n	80022dc <IQS7222A_anyChannelTouched+0x20>
            return true;  // Dokunma algılandı
 80022d8:	2301      	movs	r3, #1
 80022da:	e009      	b.n	80022f0 <IQS7222A_anyChannelTouched+0x34>
    for (iqs7222a_channel_e ch = IQS7222A_CH0; ch <= IQS7222A_HALL; ch++)
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	3201      	adds	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b0a      	cmp	r3, #10
 80022ec:	d9ed      	bls.n	80022ca <IQS7222A_anyChannelTouched+0xe>
    }

    return false ;  // Hiçbir kanalda dokunma yok
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <checkTouch>:

void checkTouch(void)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
    static uint32_t debounceTime = 0;
    uint32_t now = HAL_GetTick();
 80022fe:	f000 faa7 	bl	8002850 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	607b      	str	r3, [r7, #4]

    // Debounce için 200ms bekle
    if (now - debounceTime < 200)
 8002306:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <checkTouch+0xac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002310:	d944      	bls.n	800239c <checkTouch+0xa4>
        return;

    // Belirli bir kanala dokunulup dokunulmadığını kontrol et
    bool touch = IQS7222A_anyChannelTouched() ;
 8002312:	1cfc      	adds	r4, r7, #3
 8002314:	f7ff ffd2 	bl	80022bc <IQS7222A_anyChannelTouched>
 8002318:	0003      	movs	r3, r0
 800231a:	7023      	strb	r3, [r4, #0]

    if (touch && !last_touch)
 800231c:	1cfb      	adds	r3, r7, #3
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d036      	beq.n	8002392 <checkTouch+0x9a>
 8002324:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <checkTouch+0xb0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d132      	bne.n	8002392 <checkTouch+0x9a>
    {
        if (now - lastTapTime < 500)  // İki dokunuş arası süre 500ms'den küçükse çift tık
 800232c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <checkTouch+0xb4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	23fa      	movs	r3, #250	@ 0xfa
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d20f      	bcs.n	800235c <checkTouch+0x64>
        {
            tapCount++;
 800233c:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <checkTouch+0xb8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <checkTouch+0xb8>)
 8002346:	701a      	strb	r2, [r3, #0]

            if (tapCount == 2)
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <checkTouch+0xb8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11a      	bne.n	8002386 <checkTouch+0x8e>
            {
                SendUART();  // Seçili menü öğesini UART ile gönder
 8002350:	f7ff fef6 	bl	8002140 <SendUART>
                tapCount = 0;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <checkTouch+0xb8>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e014      	b.n	8002386 <checkTouch+0x8e>
            }
        }
        else
        {
            tapCount = 1;
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <checkTouch+0xb8>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
            selectedIndex++;
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <checkTouch+0xbc>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <checkTouch+0xbc>)
 800236c:	701a      	strb	r2, [r3, #0]

            if (selectedIndex >= MENU_ITEM_COUNT)
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <checkTouch+0xbc>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d902      	bls.n	800237c <checkTouch+0x84>
            	selectedIndex = 0;
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <checkTouch+0xbc>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]

            drawMenu(selectedIndex);  // Menüyü yeniden çiz
 800237c:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <checkTouch+0xbc>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff ff03 	bl	800218c <drawMenu>
        }

        lastTapTime = now;
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <checkTouch+0xb4>)
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
        debounceTime = now;
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <checkTouch+0xac>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
    }

    last_touch = touch;
 8002392:	1cfb      	adds	r3, r7, #3
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <checkTouch+0xb0>)
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e000      	b.n	800239e <checkTouch+0xa6>
        return;
 800239c:	46c0      	nop			@ (mov r8, r8)
}
 800239e:	46bd      	mov	sp, r7
 80023a0:	b003      	add	sp, #12
 80023a2:	bd90      	pop	{r4, r7, pc}
 80023a4:	20000278 	.word	0x20000278
 80023a8:	2000026d 	.word	0x2000026d
 80023ac:	20000270 	.word	0x20000270
 80023b0:	20000274 	.word	0x20000274
 80023b4:	2000026c 	.word	0x2000026c

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_MspInit+0x44>)
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_MspInit+0x44>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_MspInit+0x44>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_MspInit+0x44>)
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_MspInit+0x44>)
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	0549      	lsls	r1, r1, #21
 80023e0:	430a      	orrs	r2, r1
 80023e2:	61da      	str	r2, [r3, #28]
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_MspInit+0x44>)
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	4013      	ands	r3, r2
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b002      	add	sp, #8
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b08b      	sub	sp, #44	@ 0x2c
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	2414      	movs	r4, #20
 800240a:	193b      	adds	r3, r7, r4
 800240c:	0018      	movs	r0, r3
 800240e:	2314      	movs	r3, #20
 8002410:	001a      	movs	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f003 fa34 	bl	8005880 <memset>
  if(hi2c->Instance==I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1c      	ldr	r2, [pc, #112]	@ (8002490 <HAL_I2C_MspInit+0x90>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d132      	bne.n	8002488 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <HAL_I2C_MspInit+0x94>)
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_I2C_MspInit+0x94>)
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	02c9      	lsls	r1, r1, #11
 800242c:	430a      	orrs	r2, r1
 800242e:	615a      	str	r2, [r3, #20]
 8002430:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <HAL_I2C_MspInit+0x94>)
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	02db      	lsls	r3, r3, #11
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	22c0      	movs	r2, #192	@ 0xc0
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002446:	0021      	movs	r1, r4
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2212      	movs	r2, #18
 800244c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2201      	movs	r2, #1
 8002452:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2203      	movs	r2, #3
 8002458:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2201      	movs	r2, #1
 800245e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	187b      	adds	r3, r7, r1
 8002462:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <HAL_I2C_MspInit+0x98>)
 8002464:	0019      	movs	r1, r3
 8002466:	0010      	movs	r0, r2
 8002468:	f000 fad4 	bl	8002a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_I2C_MspInit+0x94>)
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <HAL_I2C_MspInit+0x94>)
 8002472:	2180      	movs	r1, #128	@ 0x80
 8002474:	0389      	lsls	r1, r1, #14
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_I2C_MspInit+0x94>)
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	039b      	lsls	r3, r3, #14
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002488:	46c0      	nop			@ (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b00b      	add	sp, #44	@ 0x2c
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	40005400 	.word	0x40005400
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400

0800249c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b08b      	sub	sp, #44	@ 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	2414      	movs	r4, #20
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	0018      	movs	r0, r3
 80024aa:	2314      	movs	r3, #20
 80024ac:	001a      	movs	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f003 f9e6 	bl	8005880 <memset>
  if(hspi->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <HAL_SPI_MspInit+0x90>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d131      	bne.n	8002522 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024be:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <HAL_SPI_MspInit+0x94>)
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_SPI_MspInit+0x94>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	0149      	lsls	r1, r1, #5
 80024c8:	430a      	orrs	r2, r1
 80024ca:	619a      	str	r2, [r3, #24]
 80024cc:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <HAL_SPI_MspInit+0x94>)
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_SPI_MspInit+0x94>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_SPI_MspInit+0x94>)
 80024e0:	2180      	movs	r1, #128	@ 0x80
 80024e2:	02c9      	lsls	r1, r1, #11
 80024e4:	430a      	orrs	r2, r1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_SPI_MspInit+0x94>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	02db      	lsls	r3, r3, #11
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024f6:	0021      	movs	r1, r4
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2238      	movs	r2, #56	@ 0x38
 80024fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2202      	movs	r2, #2
 8002502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2203      	movs	r2, #3
 800250e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	187b      	adds	r3, r7, r1
 8002518:	4a06      	ldr	r2, [pc, #24]	@ (8002534 <HAL_SPI_MspInit+0x98>)
 800251a:	0019      	movs	r1, r3
 800251c:	0010      	movs	r0, r2
 800251e:	f000 fa79 	bl	8002a14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b00b      	add	sp, #44	@ 0x2c
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	40013000 	.word	0x40013000
 8002530:	40021000 	.word	0x40021000
 8002534:	48000400 	.word	0x48000400

08002538 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b08b      	sub	sp, #44	@ 0x2c
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	2414      	movs	r4, #20
 8002542:	193b      	adds	r3, r7, r4
 8002544:	0018      	movs	r0, r3
 8002546:	2314      	movs	r3, #20
 8002548:	001a      	movs	r2, r3
 800254a:	2100      	movs	r1, #0
 800254c:	f003 f998 	bl	8005880 <memset>
  if(huart->Instance==USART1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_UART_MspInit+0x94>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d133      	bne.n	80025c2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 8002560:	2180      	movs	r1, #128	@ 0x80
 8002562:	01c9      	lsls	r1, r1, #7
 8002564:	430a      	orrs	r2, r1
 8002566:	619a      	str	r2, [r3, #24]
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	01db      	lsls	r3, r3, #7
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	0289      	lsls	r1, r1, #10
 8002580:	430a      	orrs	r2, r1
 8002582:	615a      	str	r2, [r3, #20]
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002592:	193b      	adds	r3, r7, r4
 8002594:	22c0      	movs	r2, #192	@ 0xc0
 8002596:	00d2      	lsls	r2, r2, #3
 8002598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	0021      	movs	r1, r4
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2202      	movs	r2, #2
 80025a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	2203      	movs	r2, #3
 80025ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	2201      	movs	r2, #1
 80025b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	187a      	adds	r2, r7, r1
 80025b6:	2390      	movs	r3, #144	@ 0x90
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fa29 	bl	8002a14 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b00b      	add	sp, #44	@ 0x2c
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40021000 	.word	0x40021000

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	e7fd      	b.n	80025d8 <NMI_Handler+0x4>

080025dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	e7fd      	b.n	80025e0 <HardFault_Handler+0x4>

080025e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025e8:	46c0      	nop			@ (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fc:	f000 f916 	bl	800282c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e00a      	b.n	800262e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002618:	e000      	b.n	800261c <_read+0x16>
 800261a:	bf00      	nop
 800261c:	0001      	movs	r1, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	b2ca      	uxtb	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	dbf0      	blt.n	8002618 <_read+0x12>
  }

  return len;
 8002636:	687b      	ldr	r3, [r7, #4]
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b006      	add	sp, #24
 800263e:	bd80      	pop	{r7, pc}

08002640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e009      	b.n	8002666 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	60ba      	str	r2, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	e000      	b.n	8002660 <_write+0x20>
 800265e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	dbf1      	blt.n	8002652 <_write+0x12>
  }
  return len;
 800266e:	687b      	ldr	r3, [r7, #4]
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b006      	add	sp, #24
 8002676:	bd80      	pop	{r7, pc}

08002678 <_close>:

int _close(int file)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	0192      	lsls	r2, r2, #6
 800269c:	605a      	str	r2, [r3, #4]
  return 0;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_isatty>:

int _isatty(int file)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	@ (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f003 f914 	bl	800592c <__errno>
 8002704:	0003      	movs	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	2301      	movs	r3, #1
 800270c:	425b      	negs	r3, r3
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	18d2      	adds	r2, r2, r3
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <_sbrk+0x64>)
 8002720:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20008000 	.word	0x20008000
 8002730:	00000400 	.word	0x00000400
 8002734:	2000027c 	.word	0x2000027c
 8002738:	200003d0 	.word	0x200003d0

0800273c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002748:	480d      	ldr	r0, [pc, #52]	@ (8002780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800274a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800274c:	f7ff fff6 	bl	800273c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002750:	480c      	ldr	r0, [pc, #48]	@ (8002784 <LoopForever+0x6>)
  ldr r1, =_edata
 8002752:	490d      	ldr	r1, [pc, #52]	@ (8002788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <LoopForever+0xe>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002758:	e002      	b.n	8002760 <LoopCopyDataInit>

0800275a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800275c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275e:	3304      	adds	r3, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002764:	d3f9      	bcc.n	800275a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002768:	4c0a      	ldr	r4, [pc, #40]	@ (8002794 <LoopForever+0x16>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800276c:	e001      	b.n	8002772 <LoopFillZerobss>

0800276e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002770:	3204      	adds	r2, #4

08002772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002774:	d3fb      	bcc.n	800276e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002776:	f003 f8df 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800277a:	f7ff fac5 	bl	8001d08 <main>

0800277e <LoopForever>:

LoopForever:
    b LoopForever
 800277e:	e7fe      	b.n	800277e <LoopForever>
  ldr   r0, =_estack
 8002780:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002788:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800278c:	080079c8 	.word	0x080079c8
  ldr r2, =_sbss
 8002790:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002794:	200003d0 	.word	0x200003d0

08002798 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC1_IRQHandler>
	...

0800279c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <HAL_Init+0x24>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_Init+0x24>)
 80027a6:	2110      	movs	r1, #16
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 f809 	bl	80027c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b2:	f7ff fe01 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <HAL_InitTick+0x5c>)
 80027ce:	681c      	ldr	r4, [r3, #0]
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_InitTick+0x60>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	0019      	movs	r1, r3
 80027d6:	23fa      	movs	r3, #250	@ 0xfa
 80027d8:	0098      	lsls	r0, r3, #2
 80027da:	f7fd fca5 	bl	8000128 <__udivsi3>
 80027de:	0003      	movs	r3, r0
 80027e0:	0019      	movs	r1, r3
 80027e2:	0020      	movs	r0, r4
 80027e4:	f7fd fca0 	bl	8000128 <__udivsi3>
 80027e8:	0003      	movs	r3, r0
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f905 	bl	80029fa <HAL_SYSTICK_Config>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e00f      	b.n	8002818 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d80b      	bhi.n	8002816 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	2301      	movs	r3, #1
 8002802:	425b      	negs	r3, r3
 8002804:	2200      	movs	r2, #0
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f8e2 	bl	80029d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_InitTick+0x64>)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b003      	add	sp, #12
 800281e:	bd90      	pop	{r4, r7, pc}
 8002820:	20000010 	.word	0x20000010
 8002824:	20000018 	.word	0x20000018
 8002828:	20000014 	.word	0x20000014

0800282c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <HAL_IncTick+0x1c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	001a      	movs	r2, r3
 8002836:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_IncTick+0x20>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	18d2      	adds	r2, r2, r3
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_IncTick+0x20>)
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	46c0      	nop			@ (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	20000018 	.word	0x20000018
 800284c:	20000280 	.word	0x20000280

08002850 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b02      	ldr	r3, [pc, #8]	@ (8002860 <HAL_GetTick+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	20000280 	.word	0x20000280

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff fff0 	bl	8002850 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3301      	adds	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <HAL_Delay+0x44>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	001a      	movs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	189b      	adds	r3, r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	f7ff ffe0 	bl	8002850 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	46c0      	nop			@ (mov r8, r8)
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	20000018 	.word	0x20000018

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b7f      	cmp	r3, #127	@ 0x7f
 80028c0:	d828      	bhi.n	8002914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002980 <__NVIC_SetPriority+0xd4>)
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	33c0      	adds	r3, #192	@ 0xc0
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	589b      	ldr	r3, [r3, r2]
 80028d2:	1dfa      	adds	r2, r7, #7
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	0011      	movs	r1, r2
 80028d8:	2203      	movs	r2, #3
 80028da:	400a      	ands	r2, r1
 80028dc:	00d2      	lsls	r2, r2, #3
 80028de:	21ff      	movs	r1, #255	@ 0xff
 80028e0:	4091      	lsls	r1, r2
 80028e2:	000a      	movs	r2, r1
 80028e4:	43d2      	mvns	r2, r2
 80028e6:	401a      	ands	r2, r3
 80028e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	22ff      	movs	r2, #255	@ 0xff
 80028f0:	401a      	ands	r2, r3
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	0018      	movs	r0, r3
 80028f8:	2303      	movs	r3, #3
 80028fa:	4003      	ands	r3, r0
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002900:	481f      	ldr	r0, [pc, #124]	@ (8002980 <__NVIC_SetPriority+0xd4>)
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b25b      	sxtb	r3, r3
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	430a      	orrs	r2, r1
 800290c:	33c0      	adds	r3, #192	@ 0xc0
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002912:	e031      	b.n	8002978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002914:	4a1b      	ldr	r2, [pc, #108]	@ (8002984 <__NVIC_SetPriority+0xd8>)
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	0019      	movs	r1, r3
 800291c:	230f      	movs	r3, #15
 800291e:	400b      	ands	r3, r1
 8002920:	3b08      	subs	r3, #8
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3306      	adds	r3, #6
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	3304      	adds	r3, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1dfa      	adds	r2, r7, #7
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	0011      	movs	r1, r2
 8002934:	2203      	movs	r2, #3
 8002936:	400a      	ands	r2, r1
 8002938:	00d2      	lsls	r2, r2, #3
 800293a:	21ff      	movs	r1, #255	@ 0xff
 800293c:	4091      	lsls	r1, r2
 800293e:	000a      	movs	r2, r1
 8002940:	43d2      	mvns	r2, r2
 8002942:	401a      	ands	r2, r3
 8002944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	22ff      	movs	r2, #255	@ 0xff
 800294c:	401a      	ands	r2, r3
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	0018      	movs	r0, r3
 8002954:	2303      	movs	r3, #3
 8002956:	4003      	ands	r3, r0
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800295c:	4809      	ldr	r0, [pc, #36]	@ (8002984 <__NVIC_SetPriority+0xd8>)
 800295e:	1dfb      	adds	r3, r7, #7
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	001c      	movs	r4, r3
 8002964:	230f      	movs	r3, #15
 8002966:	4023      	ands	r3, r4
 8002968:	3b08      	subs	r3, #8
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	430a      	orrs	r2, r1
 800296e:	3306      	adds	r3, #6
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	18c3      	adds	r3, r0, r3
 8002974:	3304      	adds	r3, #4
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b003      	add	sp, #12
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1e5a      	subs	r2, r3, #1
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	045b      	lsls	r3, r3, #17
 8002998:	429a      	cmp	r2, r3
 800299a:	d301      	bcc.n	80029a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299c:	2301      	movs	r3, #1
 800299e:	e010      	b.n	80029c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <SysTick_Config+0x44>)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3a01      	subs	r2, #1
 80029a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a8:	2301      	movs	r3, #1
 80029aa:	425b      	negs	r3, r3
 80029ac:	2103      	movs	r1, #3
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7ff ff7c 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <SysTick_Config+0x44>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ba:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <SysTick_Config+0x44>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b002      	add	sp, #8
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	210f      	movs	r1, #15
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	1c02      	adds	r2, r0, #0
 80029e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff ffbf 	bl	8002988 <SysTick_Config>
 8002a0a:	0003      	movs	r3, r0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a22:	e14f      	b.n	8002cc4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4091      	lsls	r1, r2
 8002a2e:	000a      	movs	r2, r1
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d100      	bne.n	8002a3c <HAL_GPIO_Init+0x28>
 8002a3a:	e140      	b.n	8002cbe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d130      	bne.n	8002ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	409a      	lsls	r2, r3
 8002a62:	0013      	movs	r3, r2
 8002a64:	43da      	mvns	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	43da      	mvns	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d017      	beq.n	8002af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2203      	movs	r2, #3
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d123      	bne.n	8002b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	58d3      	ldr	r3, [r2, r3]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2207      	movs	r2, #7
 8002b10:	4013      	ands	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2107      	movs	r1, #7
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	6939      	ldr	r1, [r7, #16]
 8002b44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	43da      	mvns	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	401a      	ands	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	23c0      	movs	r3, #192	@ 0xc0
 8002b80:	029b      	lsls	r3, r3, #10
 8002b82:	4013      	ands	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_GPIO_Init+0x174>
 8002b86:	e09a      	b.n	8002cbe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b88:	4b54      	ldr	r3, [pc, #336]	@ (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b53      	ldr	r3, [pc, #332]	@ (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	4b51      	ldr	r3, [pc, #324]	@ (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce0 <HAL_GPIO_Init+0x2cc>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	0013      	movs	r3, r2
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2390      	movs	r3, #144	@ 0x90
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x1e2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a44      	ldr	r2, [pc, #272]	@ (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x1de>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a43      	ldr	r2, [pc, #268]	@ (8002ce8 <HAL_GPIO_Init+0x2d4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x1da>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a42      	ldr	r2, [pc, #264]	@ (8002cec <HAL_GPIO_Init+0x2d8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x1d6>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c08:	4935      	ldr	r1, [pc, #212]	@ (8002ce0 <HAL_GPIO_Init+0x2cc>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b36      	ldr	r3, [pc, #216]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	035b      	lsls	r3, r3, #13
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c40:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	039b      	lsls	r3, r3, #14
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c64:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002c6a:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	4013      	ands	r3, r2
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002c94:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	4013      	ands	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	40da      	lsrs	r2, r3
 8002ccc:	1e13      	subs	r3, r2, #0
 8002cce:	d000      	beq.n	8002cd2 <HAL_GPIO_Init+0x2be>
 8002cd0:	e6a8      	b.n	8002a24 <HAL_GPIO_Init+0x10>
  } 
}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b006      	add	sp, #24
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	0008      	movs	r0, r1
 8002cfe:	0011      	movs	r1, r2
 8002d00:	1cbb      	adds	r3, r7, #2
 8002d02:	1c02      	adds	r2, r0, #0
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	1c7b      	adds	r3, r7, #1
 8002d08:	1c0a      	adds	r2, r1, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d0c:	1c7b      	adds	r3, r7, #1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d1e:	1cbb      	adds	r3, r7, #2
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08f      	b.n	8002e62 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2241      	movs	r2, #65	@ 0x41
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2240      	movs	r2, #64	@ 0x40
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fb51 	bl	8002400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	@ 0x41
 8002d62:	2124      	movs	r1, #36	@ 0x24
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	438a      	bics	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	493b      	ldr	r1, [pc, #236]	@ (8002e6c <HAL_I2C_Init+0x13c>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4938      	ldr	r1, [pc, #224]	@ (8002e70 <HAL_I2C_Init+0x140>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d108      	bne.n	8002dae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	0209      	lsls	r1, r1, #8
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	e007      	b.n	8002dbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2184      	movs	r1, #132	@ 0x84
 8002db8:	0209      	lsls	r1, r1, #8
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d109      	bne.n	8002dda <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2180      	movs	r1, #128	@ 0x80
 8002dd2:	0109      	lsls	r1, r1, #4
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	e007      	b.n	8002dea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4923      	ldr	r1, [pc, #140]	@ (8002e74 <HAL_I2C_Init+0x144>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4920      	ldr	r1, [pc, #128]	@ (8002e78 <HAL_I2C_Init+0x148>)
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	491a      	ldr	r1, [pc, #104]	@ (8002e70 <HAL_I2C_Init+0x140>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2101      	movs	r1, #1
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2241      	movs	r2, #65	@ 0x41
 8002e4e:	2120      	movs	r1, #32
 8002e50:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2242      	movs	r2, #66	@ 0x42
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	f0ffffff 	.word	0xf0ffffff
 8002e70:	ffff7fff 	.word	0xffff7fff
 8002e74:	fffff7ff 	.word	0xfffff7ff
 8002e78:	02008000 	.word	0x02008000

08002e7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	0008      	movs	r0, r1
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	0019      	movs	r1, r3
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	1c02      	adds	r2, r0, #0
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	2308      	movs	r3, #8
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	1c0a      	adds	r2, r1, #0
 8002e98:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2241      	movs	r2, #65	@ 0x41
 8002e9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d000      	beq.n	8002ea8 <HAL_I2C_Master_Transmit+0x2c>
 8002ea6:	e10a      	b.n	80030be <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	5c9b      	ldrb	r3, [r3, r2]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Master_Transmit+0x3a>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e104      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x244>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2240      	movs	r2, #64	@ 0x40
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ebe:	f7ff fcc7 	bl	8002850 <HAL_GetTick>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	0219      	lsls	r1, r3, #8
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2319      	movs	r3, #25
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f000 fab4 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0ef      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2241      	movs	r2, #65	@ 0x41
 8002ee4:	2121      	movs	r1, #33	@ 0x21
 8002ee6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2242      	movs	r2, #66	@ 0x42
 8002eec:	2110      	movs	r1, #16
 8002eee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2208      	movs	r2, #8
 8002f00:	18ba      	adds	r2, r7, r2
 8002f02:	8812      	ldrh	r2, [r2, #0]
 8002f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2bff      	cmp	r3, #255	@ 0xff
 8002f14:	d906      	bls.n	8002f24 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22ff      	movs	r2, #255	@ 0xff
 8002f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	045b      	lsls	r3, r3, #17
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	e007      	b.n	8002f34 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f2e:	2380      	movs	r3, #128	@ 0x80
 8002f30:	049b      	lsls	r3, r3, #18
 8002f32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d027      	beq.n	8002f8c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	697c      	ldr	r4, [r7, #20]
 8002f78:	230a      	movs	r3, #10
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	8819      	ldrh	r1, [r3, #0]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	4b51      	ldr	r3, [pc, #324]	@ (80030c8 <HAL_I2C_Master_Transmit+0x24c>)
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	0023      	movs	r3, r4
 8002f86:	f000 fc35 	bl	80037f4 <I2C_TransferConfig>
 8002f8a:	e06f      	b.n	800306c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	697c      	ldr	r4, [r7, #20]
 8002f94:	230a      	movs	r3, #10
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	8819      	ldrh	r1, [r3, #0]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <HAL_I2C_Master_Transmit+0x24c>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	0023      	movs	r3, r4
 8002fa2:	f000 fc27 	bl	80037f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fa6:	e061      	b.n	800306c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fa9e 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e081      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03a      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1f0>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d136      	bne.n	800306c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	0013      	movs	r3, r2
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	@ 0x80
 800300c:	f000 fa18 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e053      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2bff      	cmp	r3, #255	@ 0xff
 8003020:	d911      	bls.n	8003046 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	22ff      	movs	r2, #255	@ 0xff
 8003026:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302c:	b2da      	uxtb	r2, r3
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	045c      	lsls	r4, r3, #17
 8003032:	230a      	movs	r3, #10
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	8819      	ldrh	r1, [r3, #0]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	0023      	movs	r3, r4
 8003040:	f000 fbd8 	bl	80037f4 <I2C_TransferConfig>
 8003044:	e012      	b.n	800306c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	b2da      	uxtb	r2, r3
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	049c      	lsls	r4, r3, #18
 800305a:	230a      	movs	r3, #10
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	8819      	ldrh	r1, [r3, #0]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	0023      	movs	r3, r4
 8003068:	f000 fbc4 	bl	80037f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d198      	bne.n	8002fa8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 fa7d 	bl	800357c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e01a      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2220      	movs	r2, #32
 8003090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	490b      	ldr	r1, [pc, #44]	@ (80030cc <HAL_I2C_Master_Transmit+0x250>)
 800309e:	400a      	ands	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2241      	movs	r2, #65	@ 0x41
 80030a6:	2120      	movs	r1, #32
 80030a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2242      	movs	r2, #66	@ 0x42
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2240      	movs	r2, #64	@ 0x40
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b007      	add	sp, #28
 80030c6:	bd90      	pop	{r4, r7, pc}
 80030c8:	80002000 	.word	0x80002000
 80030cc:	fe00e800 	.word	0xfe00e800

080030d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	000c      	movs	r4, r1
 80030da:	0010      	movs	r0, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	230a      	movs	r3, #10
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	1c22      	adds	r2, r4, #0
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	2308      	movs	r3, #8
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	1c02      	adds	r2, r0, #0
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	1dbb      	adds	r3, r7, #6
 80030f0:	1c0a      	adds	r2, r1, #0
 80030f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2241      	movs	r2, #65	@ 0x41
 80030f8:	5c9b      	ldrb	r3, [r3, r2]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d000      	beq.n	8003102 <HAL_I2C_Mem_Read+0x32>
 8003100:	e110      	b.n	8003324 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_I2C_Mem_Read+0x42>
 8003108:	232c      	movs	r3, #44	@ 0x2c
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d105      	bne.n	800311e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2280      	movs	r2, #128	@ 0x80
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e103      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2240      	movs	r2, #64	@ 0x40
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_I2C_Mem_Read+0x5c>
 8003128:	2302      	movs	r3, #2
 800312a:	e0fc      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	@ 0x40
 8003130:	2101      	movs	r1, #1
 8003132:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003134:	f7ff fb8c 	bl	8002850 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	0219      	lsls	r1, r3, #8
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2319      	movs	r3, #25
 8003148:	2201      	movs	r2, #1
 800314a:	f000 f979 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0e7      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2241      	movs	r2, #65	@ 0x41
 800315a:	2122      	movs	r1, #34	@ 0x22
 800315c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2242      	movs	r2, #66	@ 0x42
 8003162:	2140      	movs	r1, #64	@ 0x40
 8003164:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	222c      	movs	r2, #44	@ 0x2c
 8003176:	18ba      	adds	r2, r7, r2
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	881c      	ldrh	r4, [r3, #0]
 8003186:	2308      	movs	r3, #8
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	230a      	movs	r3, #10
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	8819      	ldrh	r1, [r3, #0]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	0023      	movs	r3, r4
 800319e:	f000 f8cb 	bl	8003338 <I2C_RequestMemoryRead>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2240      	movs	r2, #64	@ 0x40
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0b9      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2bff      	cmp	r3, #255	@ 0xff
 80031ba:	d911      	bls.n	80031e0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	045c      	lsls	r4, r3, #17
 80031cc:	230a      	movs	r3, #10
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	8819      	ldrh	r1, [r3, #0]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	4b56      	ldr	r3, [pc, #344]	@ (8003330 <HAL_I2C_Mem_Read+0x260>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	0023      	movs	r3, r4
 80031da:	f000 fb0b 	bl	80037f4 <I2C_TransferConfig>
 80031de:	e012      	b.n	8003206 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	049c      	lsls	r4, r3, #18
 80031f4:	230a      	movs	r3, #10
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	8819      	ldrh	r1, [r3, #0]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003330 <HAL_I2C_Mem_Read+0x260>)
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	0023      	movs	r3, r4
 8003202:	f000 faf7 	bl	80037f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	0013      	movs	r3, r2
 8003210:	2200      	movs	r2, #0
 8003212:	2104      	movs	r1, #4
 8003214:	f000 f914 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e082      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03a      	beq.n	80032d2 <HAL_I2C_Mem_Read+0x202>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d136      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	0013      	movs	r3, r2
 800326e:	2200      	movs	r2, #0
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	f000 f8e5 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e053      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2bff      	cmp	r3, #255	@ 0xff
 8003286:	d911      	bls.n	80032ac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	b2da      	uxtb	r2, r3
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	045c      	lsls	r4, r3, #17
 8003298:	230a      	movs	r3, #10
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	8819      	ldrh	r1, [r3, #0]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	0023      	movs	r3, r4
 80032a6:	f000 faa5 	bl	80037f4 <I2C_TransferConfig>
 80032aa:	e012      	b.n	80032d2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	049c      	lsls	r4, r3, #18
 80032c0:	230a      	movs	r3, #10
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	8819      	ldrh	r1, [r3, #0]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	2300      	movs	r3, #0
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	0023      	movs	r3, r4
 80032ce:	f000 fa91 	bl	80037f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d194      	bne.n	8003206 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f94a 	bl	800357c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01a      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	490c      	ldr	r1, [pc, #48]	@ (8003334 <HAL_I2C_Mem_Read+0x264>)
 8003304:	400a      	ands	r2, r1
 8003306:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2241      	movs	r2, #65	@ 0x41
 800330c:	2120      	movs	r1, #32
 800330e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2242      	movs	r2, #66	@ 0x42
 8003314:	2100      	movs	r1, #0
 8003316:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	2100      	movs	r1, #0
 800331e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b007      	add	sp, #28
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	80002400 	.word	0x80002400
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	000c      	movs	r4, r1
 8003342:	0010      	movs	r0, r2
 8003344:	0019      	movs	r1, r3
 8003346:	250a      	movs	r5, #10
 8003348:	197b      	adds	r3, r7, r5
 800334a:	1c22      	adds	r2, r4, #0
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	2308      	movs	r3, #8
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	1c02      	adds	r2, r0, #0
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	1dbb      	adds	r3, r7, #6
 8003358:	1c0a      	adds	r2, r1, #0
 800335a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	197b      	adds	r3, r7, r5
 8003364:	8819      	ldrh	r1, [r3, #0]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <I2C_RequestMemoryRead+0xc0>)
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	f000 fa41 	bl	80037f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f8b9 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e033      	b.n	80033ee <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003386:	1dbb      	adds	r3, r7, #6
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800338e:	2308      	movs	r3, #8
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	629a      	str	r2, [r3, #40]	@ 0x28
 800339c:	e019      	b.n	80033d2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800339e:	2308      	movs	r3, #8
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	6a39      	ldr	r1, [r7, #32]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f89a 	bl	80034f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d001      	beq.n	80033c4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e014      	b.n	80033ee <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c4:	2308      	movs	r3, #8
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	0013      	movs	r3, r2
 80033dc:	2200      	movs	r2, #0
 80033de:	2140      	movs	r1, #64	@ 0x40
 80033e0:	f000 f82e 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d001      	beq.n	80033ec <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b004      	add	sp, #16
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	80002000 	.word	0x80002000

080033fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2202      	movs	r2, #2
 800340c:	4013      	ands	r3, r2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d103      	bne.n	800341a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2201      	movs	r2, #1
 8003422:	4013      	ands	r3, r2
 8003424:	2b01      	cmp	r3, #1
 8003426:	d007      	beq.n	8003438 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2101      	movs	r1, #1
 8003434:	430a      	orrs	r2, r1
 8003436:	619a      	str	r2, [r3, #24]
  }
}
 8003438:	46c0      	nop			@ (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003450:	e03a      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 f8d3 	bl	8003604 <I2C_IsErrorOccurred>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d001      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e040      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	d02d      	beq.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7ff f9f0 	bl	8002850 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x42>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d122      	bne.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	425a      	negs	r2, r3
 8003492:	4153      	adcs	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	001a      	movs	r2, r3
 8003498:	1dfb      	adds	r3, r7, #7
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d113      	bne.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a4:	2220      	movs	r2, #32
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2241      	movs	r2, #65	@ 0x41
 80034b0:	2120      	movs	r1, #32
 80034b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2242      	movs	r2, #66	@ 0x42
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	@ 0x40
 80034c0:	2100      	movs	r1, #0
 80034c2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e00f      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	425a      	negs	r2, r3
 80034d8:	4153      	adcs	r3, r2
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	001a      	movs	r2, r3
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d0b5      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034fc:	e032      	b.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f87d 	bl	8003604 <I2C_IsErrorOccurred>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e030      	b.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3301      	adds	r3, #1
 8003516:	d025      	beq.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003518:	f7ff f99a 	bl	8002850 <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	429a      	cmp	r2, r3
 8003526:	d302      	bcc.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11a      	bne.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2202      	movs	r2, #2
 8003536:	4013      	ands	r3, r2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d013      	beq.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	2220      	movs	r2, #32
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2241      	movs	r2, #65	@ 0x41
 800354c:	2120      	movs	r1, #32
 800354e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2242      	movs	r2, #66	@ 0x42
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	@ 0x40
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2202      	movs	r2, #2
 800356c:	4013      	ands	r3, r2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d1c5      	bne.n	80034fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003588:	e02f      	b.n	80035ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 f837 	bl	8003604 <I2C_IsErrorOccurred>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e02d      	b.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7ff f957 	bl	8002850 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d11a      	bne.n	80035ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2220      	movs	r2, #32
 80035bc:	4013      	ands	r3, r2
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d013      	beq.n	80035ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	2220      	movs	r2, #32
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2241      	movs	r2, #65	@ 0x41
 80035d2:	2120      	movs	r1, #32
 80035d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2242      	movs	r2, #66	@ 0x42
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2240      	movs	r2, #64	@ 0x40
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e007      	b.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2220      	movs	r2, #32
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d1c8      	bne.n	800358a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	@ 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2327      	movs	r3, #39	@ 0x27
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2210      	movs	r2, #16
 800362c:	4013      	ands	r3, r2
 800362e:	d100      	bne.n	8003632 <I2C_IsErrorOccurred+0x2e>
 8003630:	e079      	b.n	8003726 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800363a:	e057      	b.n	80036ec <I2C_IsErrorOccurred+0xe8>
 800363c:	2227      	movs	r2, #39	@ 0x27
 800363e:	18bb      	adds	r3, r7, r2
 8003640:	18ba      	adds	r2, r7, r2
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	d04f      	beq.n	80036ec <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7ff f900 	bl	8002850 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_IsErrorOccurred+0x5e>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d144      	bne.n	80036ec <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	4013      	ands	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003670:	2013      	movs	r0, #19
 8003672:	183b      	adds	r3, r7, r0
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	2142      	movs	r1, #66	@ 0x42
 8003678:	5c52      	ldrb	r2, [r2, r1]
 800367a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	401a      	ands	r2, r3
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	429a      	cmp	r2, r3
 800368e:	d126      	bne.n	80036de <I2C_IsErrorOccurred+0xda>
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	01db      	lsls	r3, r3, #7
 8003696:	429a      	cmp	r2, r3
 8003698:	d021      	beq.n	80036de <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800369a:	183b      	adds	r3, r7, r0
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d01d      	beq.n	80036de <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2180      	movs	r1, #128	@ 0x80
 80036ae:	01c9      	lsls	r1, r1, #7
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036b4:	f7ff f8cc 	bl	8002850 <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036bc:	e00f      	b.n	80036de <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036be:	f7ff f8c7 	bl	8002850 <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b19      	cmp	r3, #25
 80036ca:	d908      	bls.n	80036de <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2220      	movs	r2, #32
 80036d0:	4313      	orrs	r3, r2
 80036d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036d4:	2327      	movs	r3, #39	@ 0x27
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]

              break;
 80036dc:	e006      	b.n	80036ec <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2220      	movs	r2, #32
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d1e8      	bne.n	80036be <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2220      	movs	r2, #32
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d004      	beq.n	8003704 <I2C_IsErrorOccurred+0x100>
 80036fa:	2327      	movs	r3, #39	@ 0x27
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d09b      	beq.n	800363c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003704:	2327      	movs	r3, #39	@ 0x27
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2220      	movs	r2, #32
 8003714:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	2204      	movs	r2, #4
 800371a:	4313      	orrs	r3, r2
 800371c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800371e:	2327      	movs	r3, #39	@ 0x27
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	2380      	movs	r3, #128	@ 0x80
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4013      	ands	r3, r2
 8003736:	d00c      	beq.n	8003752 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	2201      	movs	r2, #1
 800373c:	4313      	orrs	r3, r2
 800373e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2280      	movs	r2, #128	@ 0x80
 8003746:	0052      	lsls	r2, r2, #1
 8003748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800374a:	2327      	movs	r3, #39	@ 0x27
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4013      	ands	r3, r2
 800375a:	d00c      	beq.n	8003776 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2208      	movs	r2, #8
 8003760:	4313      	orrs	r3, r2
 8003762:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2280      	movs	r2, #128	@ 0x80
 800376a:	00d2      	lsls	r2, r2, #3
 800376c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800376e:	2327      	movs	r3, #39	@ 0x27
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	2380      	movs	r3, #128	@ 0x80
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d00c      	beq.n	800379a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2202      	movs	r2, #2
 8003784:	4313      	orrs	r3, r2
 8003786:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2280      	movs	r2, #128	@ 0x80
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003792:	2327      	movs	r3, #39	@ 0x27
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800379a:	2327      	movs	r3, #39	@ 0x27
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01d      	beq.n	80037e0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff fe28 	bl	80033fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	490e      	ldr	r1, [pc, #56]	@ (80037f0 <I2C_IsErrorOccurred+0x1ec>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2241      	movs	r2, #65	@ 0x41
 80037cc:	2120      	movs	r1, #32
 80037ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2242      	movs	r2, #66	@ 0x42
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2240      	movs	r2, #64	@ 0x40
 80037dc:	2100      	movs	r1, #0
 80037de:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037e0:	2327      	movs	r3, #39	@ 0x27
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	781b      	ldrb	r3, [r3, #0]
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b00a      	add	sp, #40	@ 0x28
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	fe00e800 	.word	0xfe00e800

080037f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	0008      	movs	r0, r1
 80037fe:	0011      	movs	r1, r2
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	240a      	movs	r4, #10
 8003804:	193b      	adds	r3, r7, r4
 8003806:	1c02      	adds	r2, r0, #0
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	2009      	movs	r0, #9
 800380c:	183b      	adds	r3, r7, r0
 800380e:	1c0a      	adds	r2, r1, #0
 8003810:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003812:	193b      	adds	r3, r7, r4
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	059b      	lsls	r3, r3, #22
 8003818:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800381a:	183b      	adds	r3, r7, r0
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	0419      	lsls	r1, r3, #16
 8003820:	23ff      	movs	r3, #255	@ 0xff
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003826:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	4313      	orrs	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800383e:	0d51      	lsrs	r1, r2, #21
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	00d2      	lsls	r2, r2, #3
 8003844:	400a      	ands	r2, r1
 8003846:	4907      	ldr	r1, [pc, #28]	@ (8003864 <I2C_TransferConfig+0x70>)
 8003848:	430a      	orrs	r2, r1
 800384a:	43d2      	mvns	r2, r2
 800384c:	401a      	ands	r2, r3
 800384e:	0011      	movs	r1, r2
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b007      	add	sp, #28
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	03ff63ff 	.word	0x03ff63ff

08003868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2241      	movs	r2, #65	@ 0x41
 8003876:	5c9b      	ldrb	r3, [r3, r2]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d138      	bne.n	80038f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2240      	movs	r2, #64	@ 0x40
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003888:	2302      	movs	r3, #2
 800388a:	e032      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	@ 0x40
 8003890:	2101      	movs	r1, #1
 8003892:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2241      	movs	r2, #65	@ 0x41
 8003898:	2124      	movs	r1, #36	@ 0x24
 800389a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2101      	movs	r1, #1
 80038a8:	438a      	bics	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4911      	ldr	r1, [pc, #68]	@ (80038fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2241      	movs	r2, #65	@ 0x41
 80038e0:	2120      	movs	r1, #32
 80038e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2240      	movs	r2, #64	@ 0x40
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	ffffefff 	.word	0xffffefff

08003900 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2241      	movs	r2, #65	@ 0x41
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d139      	bne.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2240      	movs	r2, #64	@ 0x40
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003920:	2302      	movs	r3, #2
 8003922:	e033      	b.n	800398c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2240      	movs	r2, #64	@ 0x40
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2241      	movs	r2, #65	@ 0x41
 8003930:	2124      	movs	r1, #36	@ 0x24
 8003932:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a11      	ldr	r2, [pc, #68]	@ (8003994 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2241      	movs	r2, #65	@ 0x41
 800397a:	2120      	movs	r1, #32
 800397c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2240      	movs	r2, #64	@ 0x40
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b004      	add	sp, #16
 8003992:	bd80      	pop	{r7, pc}
 8003994:	fffff0ff 	.word	0xfffff0ff

08003998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e305      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	4013      	ands	r3, r2
 80039b2:	d100      	bne.n	80039b6 <HAL_RCC_OscConfig+0x1e>
 80039b4:	e08d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039b6:	4bc5      	ldr	r3, [pc, #788]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	220c      	movs	r2, #12
 80039bc:	4013      	ands	r3, r2
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d00e      	beq.n	80039e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c2:	4bc2      	ldr	r3, [pc, #776]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	220c      	movs	r2, #12
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x64>
 80039ce:	4bbf      	ldr	r3, [pc, #764]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	23c0      	movs	r3, #192	@ 0xc0
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	401a      	ands	r2, r3
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	429a      	cmp	r2, r3
 80039de:	d10d      	bne.n	80039fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4bba      	ldr	r3, [pc, #744]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	@ 0x80
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	4013      	ands	r3, r2
 80039ea:	d100      	bne.n	80039ee <HAL_RCC_OscConfig+0x56>
 80039ec:	e070      	b.n	8003ad0 <HAL_RCC_OscConfig+0x138>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d000      	beq.n	80039f8 <HAL_RCC_OscConfig+0x60>
 80039f6:	e06b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2dc      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_OscConfig+0x7c>
 8003a04:	4bb1      	ldr	r3, [pc, #708]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4bb0      	ldr	r3, [pc, #704]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a0a:	2180      	movs	r1, #128	@ 0x80
 8003a0c:	0249      	lsls	r1, r1, #9
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e02f      	b.n	8003a74 <HAL_RCC_OscConfig+0xdc>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x9e>
 8003a1c:	4bab      	ldr	r3, [pc, #684]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4baa      	ldr	r3, [pc, #680]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a22:	49ab      	ldr	r1, [pc, #684]	@ (8003cd0 <HAL_RCC_OscConfig+0x338>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	4ba8      	ldr	r3, [pc, #672]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4ba7      	ldr	r3, [pc, #668]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a2e:	49a9      	ldr	r1, [pc, #676]	@ (8003cd4 <HAL_RCC_OscConfig+0x33c>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e01e      	b.n	8003a74 <HAL_RCC_OscConfig+0xdc>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d10e      	bne.n	8003a5c <HAL_RCC_OscConfig+0xc4>
 8003a3e:	4ba3      	ldr	r3, [pc, #652]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4ba2      	ldr	r3, [pc, #648]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	02c9      	lsls	r1, r1, #11
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	4b9f      	ldr	r3, [pc, #636]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b9e      	ldr	r3, [pc, #632]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a52:	2180      	movs	r1, #128	@ 0x80
 8003a54:	0249      	lsls	r1, r1, #9
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xdc>
 8003a5c:	4b9b      	ldr	r3, [pc, #620]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b9a      	ldr	r3, [pc, #616]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a62:	499b      	ldr	r1, [pc, #620]	@ (8003cd0 <HAL_RCC_OscConfig+0x338>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	4b98      	ldr	r3, [pc, #608]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b97      	ldr	r3, [pc, #604]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a6e:	4999      	ldr	r1, [pc, #612]	@ (8003cd4 <HAL_RCC_OscConfig+0x33c>)
 8003a70:	400a      	ands	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d014      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fee8 	bl	8002850 <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a86:	f7fe fee3 	bl	8002850 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	@ 0x64
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e28e      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a98:	4b8c      	ldr	r3, [pc, #560]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0xee>
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fed3 	bl	8002850 <HAL_GetTick>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fece 	bl	8002850 <HAL_GetTick>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	@ 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e279      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	4b82      	ldr	r3, [pc, #520]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	029b      	lsls	r3, r3, #10
 8003aca:	4013      	ands	r3, r2
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x118>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d100      	bne.n	8003ade <HAL_RCC_OscConfig+0x146>
 8003adc:	e06c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ade:	4b7b      	ldr	r3, [pc, #492]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ae8:	4b78      	ldr	r3, [pc, #480]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	220c      	movs	r2, #12
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d11f      	bne.n	8003b34 <HAL_RCC_OscConfig+0x19c>
 8003af4:	4b75      	ldr	r3, [pc, #468]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	23c0      	movs	r3, #192	@ 0xc0
 8003afa:	025b      	lsls	r3, r3, #9
 8003afc:	401a      	ands	r2, r3
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b71      	ldr	r3, [pc, #452]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_OscConfig+0x184>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e24c      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	22f8      	movs	r2, #248	@ 0xf8
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	4b67      	ldr	r3, [pc, #412]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e041      	b.n	8003bb8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d024      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b63      	ldr	r3, [pc, #396]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b42:	2101      	movs	r1, #1
 8003b44:	430a      	orrs	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fe82 	bl	8002850 <HAL_GetTick>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe fe7d 	bl	8002850 <HAL_GetTick>
 8003b56:	0002      	movs	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e228      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b59      	ldr	r3, [pc, #356]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d0f1      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	22f8      	movs	r2, #248	@ 0xf8
 8003b74:	4393      	bics	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	00da      	lsls	r2, r3, #3
 8003b7e:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e018      	b.n	8003bb8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b51      	ldr	r3, [pc, #324]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b50      	ldr	r3, [pc, #320]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	438a      	bics	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fe fe5d 	bl	8002850 <HAL_GetTick>
 8003b96:	0003      	movs	r3, r0
 8003b98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fe58 	bl	8002850 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e203      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d1f1      	bne.n	8003b9c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d036      	beq.n	8003c30 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fe3b 	bl	8002850 <HAL_GetTick>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fe fe36 	bl	8002850 <HAL_GetTick>
 8003be4:	0002      	movs	r2, r0
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1e1      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d0f1      	beq.n	8003be0 <HAL_RCC_OscConfig+0x248>
 8003bfc:	e018      	b.n	8003c30 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c02:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	438a      	bics	r2, r1
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fe21 	bl	8002850 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fe fe1c 	bl	8002850 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1c7      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c26:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d1f1      	bne.n	8003c14 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2204      	movs	r2, #4
 8003c36:	4013      	ands	r3, r2
 8003c38:	d100      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2a4>
 8003c3a:	e0b5      	b.n	8003da8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	201f      	movs	r0, #31
 8003c3e:	183b      	adds	r3, r7, r0
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c44:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	055b      	lsls	r3, r3, #21
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d110      	bne.n	8003c72 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c56:	2180      	movs	r1, #128	@ 0x80
 8003c58:	0549      	lsls	r1, r1, #21
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	61da      	str	r2, [r3, #28]
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	055b      	lsls	r3, r3, #21
 8003c66:	4013      	ands	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <HAL_RCC_OscConfig+0x340>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <HAL_RCC_OscConfig+0x340>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_RCC_OscConfig+0x340>)
 8003c84:	2180      	movs	r1, #128	@ 0x80
 8003c86:	0049      	lsls	r1, r1, #1
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fde0 	bl	8002850 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fe fddb 	bl	8002850 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	@ 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e186      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_OscConfig+0x340>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10f      	bne.n	8003cdc <HAL_RCC_OscConfig+0x344>
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	4b02      	ldr	r3, [pc, #8]	@ (8003ccc <HAL_RCC_OscConfig+0x334>)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	621a      	str	r2, [r3, #32]
 8003cc8:	e036      	b.n	8003d38 <HAL_RCC_OscConfig+0x3a0>
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	fffeffff 	.word	0xfffeffff
 8003cd4:	fffbffff 	.word	0xfffbffff
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x366>
 8003ce4:	4bb6      	ldr	r3, [pc, #728]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	4bb5      	ldr	r3, [pc, #724]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	621a      	str	r2, [r3, #32]
 8003cf0:	4bb3      	ldr	r3, [pc, #716]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	4bb2      	ldr	r3, [pc, #712]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	621a      	str	r2, [r3, #32]
 8003cfc:	e01c      	b.n	8003d38 <HAL_RCC_OscConfig+0x3a0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x388>
 8003d06:	4bae      	ldr	r3, [pc, #696]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	4bad      	ldr	r3, [pc, #692]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	621a      	str	r2, [r3, #32]
 8003d12:	4bab      	ldr	r3, [pc, #684]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	4baa      	ldr	r3, [pc, #680]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	621a      	str	r2, [r3, #32]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0x3a0>
 8003d20:	4ba7      	ldr	r3, [pc, #668]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	4ba6      	ldr	r3, [pc, #664]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	438a      	bics	r2, r1
 8003d2a:	621a      	str	r2, [r3, #32]
 8003d2c:	4ba4      	ldr	r3, [pc, #656]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	4ba3      	ldr	r3, [pc, #652]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d32:	2104      	movs	r1, #4
 8003d34:	438a      	bics	r2, r1
 8003d36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d014      	beq.n	8003d6a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7fe fd86 	bl	8002850 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e009      	b.n	8003d5e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fe fd81 	bl	8002850 <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	4a9b      	ldr	r2, [pc, #620]	@ (8003fc4 <HAL_RCC_OscConfig+0x62c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e12b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	4b98      	ldr	r3, [pc, #608]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	2202      	movs	r2, #2
 8003d64:	4013      	ands	r3, r2
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x3b2>
 8003d68:	e013      	b.n	8003d92 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe fd71 	bl	8002850 <HAL_GetTick>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d72:	e009      	b.n	8003d88 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fe fd6c 	bl	8002850 <HAL_GetTick>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	4a91      	ldr	r2, [pc, #580]	@ (8003fc4 <HAL_RCC_OscConfig+0x62c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e116      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d88:	4b8d      	ldr	r3, [pc, #564]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d92:	231f      	movs	r3, #31
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9c:	4b88      	ldr	r3, [pc, #544]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	4b87      	ldr	r3, [pc, #540]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003da2:	4989      	ldr	r1, [pc, #548]	@ (8003fc8 <HAL_RCC_OscConfig+0x630>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	4013      	ands	r3, r2
 8003db0:	d063      	beq.n	8003e7a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d12a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dba:	4b81      	ldr	r3, [pc, #516]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dbe:	4b80      	ldr	r3, [pc, #512]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dca:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fd3d 	bl	8002850 <HAL_GetTick>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ddc:	f7fe fd38 	bl	8002850 <HAL_GetTick>
 8003de0:	0002      	movs	r2, r0
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0e3      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dee:	4b74      	ldr	r3, [pc, #464]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	2202      	movs	r2, #2
 8003df4:	4013      	ands	r3, r2
 8003df6:	d0f1      	beq.n	8003ddc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003df8:	4b71      	ldr	r3, [pc, #452]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfc:	22f8      	movs	r2, #248	@ 0xf8
 8003dfe:	4393      	bics	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	00da      	lsls	r2, r3, #3
 8003e08:	4b6d      	ldr	r3, [pc, #436]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e0e:	e034      	b.n	8003e7a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	3305      	adds	r3, #5
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e18:	4b69      	ldr	r3, [pc, #420]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1c:	4b68      	ldr	r3, [pc, #416]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e1e:	2104      	movs	r1, #4
 8003e20:	438a      	bics	r2, r1
 8003e22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e24:	4b66      	ldr	r3, [pc, #408]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e28:	22f8      	movs	r2, #248	@ 0xf8
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	00da      	lsls	r2, r3, #3
 8003e34:	4b62      	ldr	r3, [pc, #392]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e3a:	e01e      	b.n	8003e7a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e3c:	4b60      	ldr	r3, [pc, #384]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e40:	4b5f      	ldr	r3, [pc, #380]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e42:	2104      	movs	r1, #4
 8003e44:	430a      	orrs	r2, r1
 8003e46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e48:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	438a      	bics	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e54:	f7fe fcfc 	bl	8002850 <HAL_GetTick>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e5e:	f7fe fcf7 	bl	8002850 <HAL_GetTick>
 8003e62:	0002      	movs	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0a2      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e70:	4b53      	ldr	r3, [pc, #332]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	2202      	movs	r2, #2
 8003e76:	4013      	ands	r3, r2
 8003e78:	d1f1      	bne.n	8003e5e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d100      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4ec>
 8003e82:	e097      	b.n	8003fb4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e84:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	220c      	movs	r2, #12
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d100      	bne.n	8003e92 <HAL_RCC_OscConfig+0x4fa>
 8003e90:	e06b      	b.n	8003f6a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d14c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	4b49      	ldr	r3, [pc, #292]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b48      	ldr	r3, [pc, #288]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ea0:	494a      	ldr	r1, [pc, #296]	@ (8003fcc <HAL_RCC_OscConfig+0x634>)
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fcd3 	bl	8002850 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe fcce 	bl	8002850 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e079      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	049b      	lsls	r3, r3, #18
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ece:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	4393      	bics	r3, r2
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003edc:	4b38      	ldr	r3, [pc, #224]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ee2:	4b37      	ldr	r3, [pc, #220]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd0 <HAL_RCC_OscConfig+0x638>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	0019      	movs	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	4b32      	ldr	r3, [pc, #200]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efc:	4b30      	ldr	r3, [pc, #192]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f02:	2180      	movs	r1, #128	@ 0x80
 8003f04:	0449      	lsls	r1, r1, #17
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fca1 	bl	8002850 <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fc9c 	bl	8002850 <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e047      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f26:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	2380      	movs	r3, #128	@ 0x80
 8003f2c:	049b      	lsls	r3, r3, #18
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x57c>
 8003f32:	e03f      	b.n	8003fb4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b21      	ldr	r3, [pc, #132]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f3a:	4924      	ldr	r1, [pc, #144]	@ (8003fcc <HAL_RCC_OscConfig+0x634>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fc86 	bl	8002850 <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fe fc81 	bl	8002850 <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e02c      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5c:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	2380      	movs	r3, #128	@ 0x80
 8003f62:	049b      	lsls	r3, r3, #18
 8003f64:	4013      	ands	r3, r2
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x5b2>
 8003f68:	e024      	b.n	8003fb4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e01f      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f76:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <HAL_RCC_OscConfig+0x628>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	23c0      	movs	r3, #192	@ 0xc0
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10e      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	220f      	movs	r2, #15
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	23f0      	movs	r3, #240	@ 0xf0
 8003fa4:	039b      	lsls	r3, r3, #14
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b008      	add	sp, #32
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	00001388 	.word	0x00001388
 8003fc8:	efffffff 	.word	0xefffffff
 8003fcc:	feffffff 	.word	0xfeffffff
 8003fd0:	ffc27fff 	.word	0xffc27fff

08003fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b3      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2201      	movs	r2, #1
 8003fee:	4013      	ands	r3, r2
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d911      	bls.n	800401a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b58      	ldr	r3, [pc, #352]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	0019      	movs	r1, r3
 8004000:	4b55      	ldr	r3, [pc, #340]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004008:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	4013      	ands	r3, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d001      	beq.n	800401a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e09a      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2202      	movs	r2, #2
 8004020:	4013      	ands	r3, r2
 8004022:	d015      	beq.n	8004050 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2204      	movs	r2, #4
 800402a:	4013      	ands	r3, r2
 800402c:	d006      	beq.n	800403c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800402e:	4b4b      	ldr	r3, [pc, #300]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4b4a      	ldr	r3, [pc, #296]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 8004034:	21e0      	movs	r1, #224	@ 0xe0
 8004036:	00c9      	lsls	r1, r1, #3
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	22f0      	movs	r2, #240	@ 0xf0
 8004042:	4393      	bics	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	4b44      	ldr	r3, [pc, #272]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	029b      	lsls	r3, r3, #10
 800406a:	4013      	ands	r3, r2
 800406c:	d114      	bne.n	8004098 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06e      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	4b38      	ldr	r3, [pc, #224]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	049b      	lsls	r3, r3, #18
 8004082:	4013      	ands	r3, r2
 8004084:	d108      	bne.n	8004098 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e062      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	4b34      	ldr	r3, [pc, #208]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2202      	movs	r2, #2
 8004090:	4013      	ands	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e05b      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004098:	4b30      	ldr	r3, [pc, #192]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2203      	movs	r2, #3
 800409e:	4393      	bics	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4b2d      	ldr	r3, [pc, #180]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fe fbd0 	bl	8002850 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b4:	e009      	b.n	80040ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b6:	f7fe fbcb 	bl	8002850 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	4a27      	ldr	r2, [pc, #156]	@ (8004160 <HAL_RCC_ClockConfig+0x18c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e042      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	4b24      	ldr	r3, [pc, #144]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	220c      	movs	r2, #12
 80040d0:	401a      	ands	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	429a      	cmp	r2, r3
 80040da:	d1ec      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	4013      	ands	r3, r2
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d211      	bcs.n	800410e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	4393      	bics	r3, r2
 80040f2:	0019      	movs	r1, r3
 80040f4:	4b18      	ldr	r3, [pc, #96]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fc:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <HAL_RCC_ClockConfig+0x184>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2201      	movs	r2, #1
 8004102:	4013      	ands	r3, r2
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e020      	b.n	8004150 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2204      	movs	r2, #4
 8004114:	4013      	ands	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004118:	4b10      	ldr	r3, [pc, #64]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a11      	ldr	r2, [pc, #68]	@ (8004164 <HAL_RCC_ClockConfig+0x190>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800412c:	f000 f820 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 8004130:	0001      	movs	r1, r0
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <HAL_RCC_ClockConfig+0x188>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	220f      	movs	r2, #15
 800413a:	4013      	ands	r3, r2
 800413c:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <HAL_RCC_ClockConfig+0x194>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	000a      	movs	r2, r1
 8004142:	40da      	lsrs	r2, r3
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x198>)
 8004146:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004148:	2003      	movs	r0, #3
 800414a:	f7fe fb3b 	bl	80027c4 <HAL_InitTick>
  
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b004      	add	sp, #16
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40022000 	.word	0x40022000
 800415c:	40021000 	.word	0x40021000
 8004160:	00001388 	.word	0x00001388
 8004164:	fffff8ff 	.word	0xfffff8ff
 8004168:	08007954 	.word	0x08007954
 800416c:	20000010 	.word	0x20000010

08004170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800418a:	4b21      	ldr	r3, [pc, #132]	@ (8004210 <HAL_RCC_GetSysClockFreq+0xa0>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	220c      	movs	r2, #12
 8004194:	4013      	ands	r3, r2
 8004196:	2b04      	cmp	r3, #4
 8004198:	d002      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x30>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x36>
 800419e:	e02e      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041a2:	613b      	str	r3, [r7, #16]
      break;
 80041a4:	e02e      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	0c9b      	lsrs	r3, r3, #18
 80041aa:	220f      	movs	r2, #15
 80041ac:	4013      	ands	r3, r2
 80041ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xa8>)
 80041b0:	5cd3      	ldrb	r3, [r2, r3]
 80041b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041b4:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	220f      	movs	r2, #15
 80041ba:	4013      	ands	r3, r2
 80041bc:	4a17      	ldr	r2, [pc, #92]	@ (800421c <HAL_RCC_GetSysClockFreq+0xac>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	23c0      	movs	r3, #192	@ 0xc0
 80041c6:	025b      	lsls	r3, r3, #9
 80041c8:	401a      	ands	r2, r3
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	480f      	ldr	r0, [pc, #60]	@ (8004214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041d6:	f7fb ffa7 	bl	8000128 <__udivsi3>
 80041da:	0003      	movs	r3, r0
 80041dc:	001a      	movs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4353      	muls	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	480a      	ldr	r0, [pc, #40]	@ (8004214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041ea:	f7fb ff9d 	bl	8000128 <__udivsi3>
 80041ee:	0003      	movs	r3, r0
 80041f0:	001a      	movs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4353      	muls	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	613b      	str	r3, [r7, #16]
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004200:	613b      	str	r3, [r7, #16]
      break;
 8004202:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004204:	693b      	ldr	r3, [r7, #16]
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b006      	add	sp, #24
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	40021000 	.word	0x40021000
 8004214:	007a1200 	.word	0x007a1200
 8004218:	0800796c 	.word	0x0800796c
 800421c:	0800797c 	.word	0x0800797c

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b02      	ldr	r3, [pc, #8]	@ (8004230 <HAL_RCC_GetHCLKFreq+0x10>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	20000010 	.word	0x20000010

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004238:	f7ff fff2 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 800423c:	0001      	movs	r1, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	2207      	movs	r2, #7
 8004246:	4013      	ands	r3, r2
 8004248:	4a04      	ldr	r2, [pc, #16]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x28>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	40d9      	lsrs	r1, r3
 800424e:	000b      	movs	r3, r1
}    
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	40021000 	.word	0x40021000
 800425c:	08007964 	.word	0x08007964

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	025b      	lsls	r3, r3, #9
 8004278:	4013      	ands	r3, r2
 800427a:	d100      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800427c:	e08e      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2017      	movs	r0, #23
 8004280:	183b      	adds	r3, r7, r0
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	055b      	lsls	r3, r3, #21
 800428e:	4013      	ands	r3, r2
 8004290:	d110      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	4b54      	ldr	r3, [pc, #336]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	4b53      	ldr	r3, [pc, #332]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004298:	2180      	movs	r1, #128	@ 0x80
 800429a:	0549      	lsls	r1, r1, #21
 800429c:	430a      	orrs	r2, r1
 800429e:	61da      	str	r2, [r3, #28]
 80042a0:	4b50      	ldr	r3, [pc, #320]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	2380      	movs	r3, #128	@ 0x80
 80042a6:	055b      	lsls	r3, r3, #21
 80042a8:	4013      	ands	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	4b4c      	ldr	r3, [pc, #304]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4013      	ands	r3, r2
 80042be:	d11a      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c0:	4b49      	ldr	r3, [pc, #292]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b48      	ldr	r3, [pc, #288]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042c6:	2180      	movs	r1, #128	@ 0x80
 80042c8:	0049      	lsls	r1, r1, #1
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fe fabf 	bl	8002850 <HAL_GetTick>
 80042d2:	0003      	movs	r3, r0
 80042d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fe faba 	bl	8002850 <HAL_GetTick>
 80042dc:	0002      	movs	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	@ 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e077      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042f6:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	23c0      	movs	r3, #192	@ 0xc0
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d034      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	23c0      	movs	r3, #192	@ 0xc0
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4013      	ands	r3, r2
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d02c      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004318:	4b32      	ldr	r3, [pc, #200]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a33      	ldr	r2, [pc, #204]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800431e:	4013      	ands	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004322:	4b30      	ldr	r3, [pc, #192]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	4b2f      	ldr	r3, [pc, #188]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0249      	lsls	r1, r1, #9
 800432c:	430a      	orrs	r2, r1
 800432e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004330:	4b2c      	ldr	r3, [pc, #176]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004336:	492e      	ldr	r1, [pc, #184]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004338:	400a      	ands	r2, r1
 800433a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800433c:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fe fa81 	bl	8002850 <HAL_GetTick>
 800434e:	0003      	movs	r3, r0
 8004350:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	e009      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fe fa7c 	bl	8002850 <HAL_GetTick>
 8004358:	0002      	movs	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	4a25      	ldr	r2, [pc, #148]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e038      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	4b1e      	ldr	r3, [pc, #120]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	2202      	movs	r2, #2
 800436e:	4013      	ands	r3, r2
 8004370:	d0f0      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004372:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004378:	4013      	ands	r3, r2
 800437a:	0019      	movs	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004382:	430a      	orrs	r2, r1
 8004384:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004386:	2317      	movs	r3, #23
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004396:	4918      	ldr	r1, [pc, #96]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004398:	400a      	ands	r2, r1
 800439a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4013      	ands	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043a6:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	2203      	movs	r2, #3
 80043ac:	4393      	bics	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043b6:	430a      	orrs	r2, r1
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2220      	movs	r2, #32
 80043c0:	4013      	ands	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	2210      	movs	r2, #16
 80043ca:	4393      	bics	r3, r2
 80043cc:	0019      	movs	r1, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043d4:	430a      	orrs	r2, r1
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b006      	add	sp, #24
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40007000 	.word	0x40007000
 80043ec:	fffffcff 	.word	0xfffffcff
 80043f0:	fffeffff 	.word	0xfffeffff
 80043f4:	00001388 	.word	0x00001388
 80043f8:	efffffff 	.word	0xefffffff

080043fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0a8      	b.n	8004560 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	2382      	movs	r3, #130	@ 0x82
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	429a      	cmp	r2, r3
 8004420:	d009      	beq.n	8004436 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e005      	b.n	8004436 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	225d      	movs	r2, #93	@ 0x5d
 8004440:	5c9b      	ldrb	r3, [r3, r2]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	225c      	movs	r2, #92	@ 0x5c
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0018      	movs	r0, r3
 8004454:	f7fe f822 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	225d      	movs	r2, #93	@ 0x5d
 800445c:	2102      	movs	r1, #2
 800445e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2140      	movs	r1, #64	@ 0x40
 800446c:	438a      	bics	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	23e0      	movs	r3, #224	@ 0xe0
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	429a      	cmp	r2, r3
 800447a:	d902      	bls.n	8004482 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e002      	b.n	8004488 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	015b      	lsls	r3, r3, #5
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	23f0      	movs	r3, #240	@ 0xf0
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	429a      	cmp	r2, r3
 8004492:	d008      	beq.n	80044a6 <HAL_SPI_Init+0xaa>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	23e0      	movs	r3, #224	@ 0xe0
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	429a      	cmp	r2, r3
 800449e:	d002      	beq.n	80044a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	2382      	movs	r3, #130	@ 0x82
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	401a      	ands	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	2384      	movs	r3, #132	@ 0x84
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	400b      	ands	r3, r1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2102      	movs	r1, #2
 80044c2:	400b      	ands	r3, r1
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2101      	movs	r1, #1
 80044cc:	400b      	ands	r3, r1
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6999      	ldr	r1, [r3, #24]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	400b      	ands	r3, r1
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	2138      	movs	r1, #56	@ 0x38
 80044e2:	400b      	ands	r3, r1
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	2180      	movs	r1, #128	@ 0x80
 80044ec:	400b      	ands	r3, r1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	0011      	movs	r1, r2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	401a      	ands	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	2204      	movs	r2, #4
 800450c:	401a      	ands	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	2110      	movs	r1, #16
 8004514:	400b      	ands	r3, r1
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451c:	2108      	movs	r1, #8
 800451e:	400b      	ands	r3, r1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68d9      	ldr	r1, [r3, #12]
 8004526:	23f0      	movs	r3, #240	@ 0xf0
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	400b      	ands	r3, r1
 800452c:	431a      	orrs	r2, r3
 800452e:	0011      	movs	r1, r2
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	2380      	movs	r3, #128	@ 0x80
 8004534:	015b      	lsls	r3, r3, #5
 8004536:	401a      	ands	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4907      	ldr	r1, [pc, #28]	@ (8004568 <HAL_SPI_Init+0x16c>)
 800454c:	400a      	ands	r2, r1
 800454e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	225d      	movs	r2, #93	@ 0x5d
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b004      	add	sp, #16
 8004566:	bd80      	pop	{r7, pc}
 8004568:	fffff7ff 	.word	0xfffff7ff

0800456c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	1dbb      	adds	r3, r7, #6
 800457a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800457c:	231f      	movs	r3, #31
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	225c      	movs	r2, #92	@ 0x5c
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Transmit+0x26>
 800458e:	2302      	movs	r3, #2
 8004590:	e147      	b.n	8004822 <HAL_SPI_Transmit+0x2b6>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	225c      	movs	r2, #92	@ 0x5c
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459a:	f7fe f959 	bl	8002850 <HAL_GetTick>
 800459e:	0003      	movs	r3, r0
 80045a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045a2:	2316      	movs	r3, #22
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	1dba      	adds	r2, r7, #6
 80045a8:	8812      	ldrh	r2, [r2, #0]
 80045aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	225d      	movs	r2, #93	@ 0x5d
 80045b0:	5c9b      	ldrb	r3, [r3, r2]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d004      	beq.n	80045c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80045b8:	231f      	movs	r3, #31
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	2202      	movs	r2, #2
 80045be:	701a      	strb	r2, [r3, #0]
    goto error;
 80045c0:	e128      	b.n	8004814 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_SPI_Transmit+0x64>
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80045d0:	231f      	movs	r3, #31
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80045d8:	e11c      	b.n	8004814 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	225d      	movs	r2, #93	@ 0x5d
 80045de:	2103      	movs	r1, #3
 80045e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1dba      	adds	r2, r7, #6
 80045f2:	8812      	ldrh	r2, [r2, #0]
 80045f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1dba      	adds	r2, r7, #6
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2244      	movs	r2, #68	@ 0x44
 8004608:	2100      	movs	r1, #0
 800460a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2246      	movs	r2, #70	@ 0x46
 8004610:	2100      	movs	r1, #0
 8004612:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	429a      	cmp	r2, r3
 800462a:	d110      	bne.n	800464e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2140      	movs	r1, #64	@ 0x40
 8004638:	438a      	bics	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2180      	movs	r1, #128	@ 0x80
 8004648:	01c9      	lsls	r1, r1, #7
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2240      	movs	r2, #64	@ 0x40
 8004656:	4013      	ands	r3, r2
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d007      	beq.n	800466c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2140      	movs	r1, #64	@ 0x40
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	23e0      	movs	r3, #224	@ 0xe0
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	429a      	cmp	r2, r3
 8004676:	d952      	bls.n	800471e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <HAL_SPI_Transmit+0x11e>
 8004680:	2316      	movs	r3, #22
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d143      	bne.n	8004712 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046ae:	e030      	b.n	8004712 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2202      	movs	r2, #2
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d112      	bne.n	80046e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	881a      	ldrh	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046e2:	e016      	b.n	8004712 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e4:	f7fe f8b4 	bl	8002850 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d802      	bhi.n	80046fa <HAL_SPI_Transmit+0x18e>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	d102      	bne.n	8004700 <HAL_SPI_Transmit+0x194>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d108      	bne.n	8004712 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004700:	231f      	movs	r3, #31
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	2203      	movs	r2, #3
 8004706:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	225d      	movs	r2, #93	@ 0x5d
 800470c:	2101      	movs	r1, #1
 800470e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004710:	e080      	b.n	8004814 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1c9      	bne.n	80046b0 <HAL_SPI_Transmit+0x144>
 800471c:	e053      	b.n	80047c6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_SPI_Transmit+0x1c4>
 8004726:	2316      	movs	r3, #22
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d145      	bne.n	80047bc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004756:	e031      	b.n	80047bc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2202      	movs	r2, #2
 8004760:	4013      	ands	r3, r2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d113      	bne.n	800478e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800478c:	e016      	b.n	80047bc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800478e:	f7fe f85f 	bl	8002850 <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d802      	bhi.n	80047a4 <HAL_SPI_Transmit+0x238>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Transmit+0x23e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80047aa:	231f      	movs	r3, #31
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2203      	movs	r2, #3
 80047b0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	225d      	movs	r2, #93	@ 0x5d
 80047b6:	2101      	movs	r1, #1
 80047b8:	5499      	strb	r1, [r3, r2]
          goto error;
 80047ba:	e02b      	b.n	8004814 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1c8      	bne.n	8004758 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f95d 	bl	8004a8c <SPI_EndRxTxTransaction>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d002      	beq.n	80047dc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004802:	231f      	movs	r3, #31
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e003      	b.n	8004814 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	225d      	movs	r2, #93	@ 0x5d
 8004810:	2101      	movs	r1, #1
 8004812:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	225c      	movs	r2, #92	@ 0x5c
 8004818:	2100      	movs	r1, #0
 800481a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800481c:	231f      	movs	r3, #31
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b008      	add	sp, #32
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	1dfb      	adds	r3, r7, #7
 800483a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800483c:	f7fe f808 	bl	8002850 <HAL_GetTick>
 8004840:	0002      	movs	r2, r0
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	18d3      	adds	r3, r2, r3
 800484a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800484c:	f7fe f800 	bl	8002850 <HAL_GetTick>
 8004850:	0003      	movs	r3, r0
 8004852:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004854:	4b3a      	ldr	r3, [pc, #232]	@ (8004940 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	015b      	lsls	r3, r3, #5
 800485a:	0d1b      	lsrs	r3, r3, #20
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	4353      	muls	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004862:	e058      	b.n	8004916 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	d055      	beq.n	8004916 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800486a:	f7fd fff1 	bl	8002850 <HAL_GetTick>
 800486e:	0002      	movs	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	429a      	cmp	r2, r3
 8004878:	d902      	bls.n	8004880 <SPI_WaitFlagStateUntilTimeout+0x54>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d142      	bne.n	8004906 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	21e0      	movs	r1, #224	@ 0xe0
 800488c:	438a      	bics	r2, r1
 800488e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	2382      	movs	r3, #130	@ 0x82
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	429a      	cmp	r2, r3
 800489a:	d113      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d005      	beq.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2140      	movs	r1, #64	@ 0x40
 80048c0:	438a      	bics	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	019b      	lsls	r3, r3, #6
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d110      	bne.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	491a      	ldr	r1, [pc, #104]	@ (8004944 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80048dc:	400a      	ands	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2180      	movs	r1, #128	@ 0x80
 80048ec:	0189      	lsls	r1, r1, #6
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	225d      	movs	r2, #93	@ 0x5d
 80048f6:	2101      	movs	r1, #1
 80048f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	225c      	movs	r2, #92	@ 0x5c
 80048fe:	2100      	movs	r1, #0
 8004900:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e017      	b.n	8004936 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	3b01      	subs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	425a      	negs	r2, r3
 8004926:	4153      	adcs	r3, r2
 8004928:	b2db      	uxtb	r3, r3
 800492a:	001a      	movs	r2, r3
 800492c:	1dfb      	adds	r3, r7, #7
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d197      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b008      	add	sp, #32
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	20000010 	.word	0x20000010
 8004944:	ffffdfff 	.word	0xffffdfff

08004948 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	@ 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004956:	2317      	movs	r3, #23
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800495e:	f7fd ff77 	bl	8002850 <HAL_GetTick>
 8004962:	0002      	movs	r2, r0
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	18d3      	adds	r3, r2, r3
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800496e:	f7fd ff6f 	bl	8002850 <HAL_GetTick>
 8004972:	0003      	movs	r3, r0
 8004974:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800497e:	4b41      	ldr	r3, [pc, #260]	@ (8004a84 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	0013      	movs	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	189b      	adds	r3, r3, r2
 8004988:	00da      	lsls	r2, r3, #3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	0d1b      	lsrs	r3, r3, #20
 800498e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004990:	4353      	muls	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004994:	e068      	b.n	8004a68 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	23c0      	movs	r3, #192	@ 0xc0
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	429a      	cmp	r2, r3
 800499e:	d10a      	bne.n	80049b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	2117      	movs	r1, #23
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049b2:	187b      	adds	r3, r7, r1
 80049b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	d055      	beq.n	8004a68 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049bc:	f7fd ff48 	bl	8002850 <HAL_GetTick>
 80049c0:	0002      	movs	r2, r0
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d902      	bls.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d142      	bne.n	8004a58 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	21e0      	movs	r1, #224	@ 0xe0
 80049de:	438a      	bics	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	2382      	movs	r3, #130	@ 0x82
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d113      	bne.n	8004a16 <SPI_WaitFifoStateUntilTimeout+0xce>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d005      	beq.n	8004a06 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	2380      	movs	r3, #128	@ 0x80
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d107      	bne.n	8004a16 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2140      	movs	r1, #64	@ 0x40
 8004a12:	438a      	bics	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	019b      	lsls	r3, r3, #6
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d110      	bne.n	8004a44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4916      	ldr	r1, [pc, #88]	@ (8004a88 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2180      	movs	r1, #128	@ 0x80
 8004a3e:	0189      	lsls	r1, r1, #6
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	225d      	movs	r2, #93	@ 0x5d
 8004a48:	2101      	movs	r1, #1
 8004a4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	225c      	movs	r2, #92	@ 0x5c
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e010      	b.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d18e      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b00a      	add	sp, #40	@ 0x28
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	20000010 	.word	0x20000010
 8004a88:	ffffdfff 	.word	0xffffdfff

08004a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	23c0      	movs	r3, #192	@ 0xc0
 8004a9c:	0159      	lsls	r1, r3, #5
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	0013      	movs	r3, r2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f7ff ff4e 	bl	8004948 <SPI_WaitFifoStateUntilTimeout>
 8004aac:	1e03      	subs	r3, r0, #0
 8004aae:	d007      	beq.n	8004ac0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e027      	b.n	8004b10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	0013      	movs	r3, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	2180      	movs	r1, #128	@ 0x80
 8004ace:	f7ff fead 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d007      	beq.n	8004ae6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ada:	2220      	movs	r2, #32
 8004adc:	431a      	orrs	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e014      	b.n	8004b10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	23c0      	movs	r3, #192	@ 0xc0
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	0013      	movs	r3, r2
 8004af4:	2200      	movs	r2, #0
 8004af6:	f7ff ff27 	bl	8004948 <SPI_WaitFifoStateUntilTimeout>
 8004afa:	1e03      	subs	r3, r0, #0
 8004afc:	d007      	beq.n	8004b0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	2220      	movs	r2, #32
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e000      	b.n	8004b10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e044      	b.n	8004bb4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2278      	movs	r2, #120	@ 0x78
 8004b36:	2100      	movs	r1, #0
 8004b38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fd fcfb 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2224      	movs	r2, #36	@ 0x24
 8004b46:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2101      	movs	r1, #1
 8004b54:	438a      	bics	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 fa3c 	bl	8004fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 f8c8 	bl	8004d00 <UART_SetConfig>
 8004b70:	0003      	movs	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e01c      	b.n	8004bb4 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	490d      	ldr	r1, [pc, #52]	@ (8004bbc <HAL_UART_Init+0xa4>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2108      	movs	r1, #8
 8004b96:	438a      	bics	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 facb 	bl	8005148 <UART_CheckIdleState>
 8004bb2:	0003      	movs	r3, r0
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	fffff7ff 	.word	0xfffff7ff

08004bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	@ 0x28
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d000      	beq.n	8004bda <HAL_UART_Transmit+0x1a>
 8004bd8:	e08c      	b.n	8004cf4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_UART_Transmit+0x28>
 8004be0:	1dbb      	adds	r3, r7, #6
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e084      	b.n	8004cf6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	015b      	lsls	r3, r3, #5
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d109      	bne.n	8004c0c <HAL_UART_Transmit+0x4c>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2201      	movs	r2, #1
 8004c04:	4013      	ands	r3, r2
 8004c06:	d001      	beq.n	8004c0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e074      	b.n	8004cf6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2284      	movs	r2, #132	@ 0x84
 8004c10:	2100      	movs	r1, #0
 8004c12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2221      	movs	r2, #33	@ 0x21
 8004c18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1a:	f7fd fe19 	bl	8002850 <HAL_GetTick>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1dba      	adds	r2, r7, #6
 8004c26:	2150      	movs	r1, #80	@ 0x50
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1dba      	adds	r2, r7, #6
 8004c30:	2152      	movs	r1, #82	@ 0x52
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	2380      	movs	r3, #128	@ 0x80
 8004c3c:	015b      	lsls	r3, r3, #5
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d108      	bne.n	8004c54 <HAL_UART_Transmit+0x94>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	e003      	b.n	8004c5c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c5c:	e02f      	b.n	8004cbe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	0013      	movs	r3, r2
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2180      	movs	r1, #128	@ 0x80
 8004c6c:	f000 fb14 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004c70:	1e03      	subs	r3, r0, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e03b      	b.n	8004cf6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	05d2      	lsls	r2, r2, #23
 8004c8e:	0dd2      	lsrs	r2, r2, #23
 8004c90:	b292      	uxth	r2, r2
 8004c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	3302      	adds	r3, #2
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e007      	b.n	8004cac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2252      	movs	r2, #82	@ 0x52
 8004cb0:	5a9b      	ldrh	r3, [r3, r2]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b299      	uxth	r1, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2252      	movs	r2, #82	@ 0x52
 8004cbc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2252      	movs	r2, #82	@ 0x52
 8004cc2:	5a9b      	ldrh	r3, [r3, r2]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1c9      	bne.n	8004c5e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	0013      	movs	r3, r2
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2140      	movs	r1, #64	@ 0x40
 8004cd8:	f000 fade 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004cdc:	1e03      	subs	r3, r0, #0
 8004cde:	d004      	beq.n	8004cea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e005      	b.n	8004cf6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b008      	add	sp, #32
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d08:	231e      	movs	r3, #30
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4aa1      	ldr	r2, [pc, #644]	@ (8004fb4 <UART_SetConfig+0x2b4>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a9c      	ldr	r2, [pc, #624]	@ (8004fb8 <UART_SetConfig+0x2b8>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a93      	ldr	r2, [pc, #588]	@ (8004fbc <UART_SetConfig+0x2bc>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a8f      	ldr	r2, [pc, #572]	@ (8004fc0 <UART_SetConfig+0x2c0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d127      	bne.n	8004dd6 <UART_SetConfig+0xd6>
 8004d86:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc4 <UART_SetConfig+0x2c4>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d00d      	beq.n	8004dae <UART_SetConfig+0xae>
 8004d92:	d81b      	bhi.n	8004dcc <UART_SetConfig+0xcc>
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d014      	beq.n	8004dc2 <UART_SetConfig+0xc2>
 8004d98:	d818      	bhi.n	8004dcc <UART_SetConfig+0xcc>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <UART_SetConfig+0xa4>
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d00a      	beq.n	8004db8 <UART_SetConfig+0xb8>
 8004da2:	e013      	b.n	8004dcc <UART_SetConfig+0xcc>
 8004da4:	231f      	movs	r3, #31
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e049      	b.n	8004e42 <UART_SetConfig+0x142>
 8004dae:	231f      	movs	r3, #31
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	2202      	movs	r2, #2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e044      	b.n	8004e42 <UART_SetConfig+0x142>
 8004db8:	231f      	movs	r3, #31
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e03f      	b.n	8004e42 <UART_SetConfig+0x142>
 8004dc2:	231f      	movs	r3, #31
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e03a      	b.n	8004e42 <UART_SetConfig+0x142>
 8004dcc:	231f      	movs	r3, #31
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e035      	b.n	8004e42 <UART_SetConfig+0x142>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7b      	ldr	r2, [pc, #492]	@ (8004fc8 <UART_SetConfig+0x2c8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d104      	bne.n	8004dea <UART_SetConfig+0xea>
 8004de0:	231f      	movs	r3, #31
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e02b      	b.n	8004e42 <UART_SetConfig+0x142>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a77      	ldr	r2, [pc, #476]	@ (8004fcc <UART_SetConfig+0x2cc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d104      	bne.n	8004dfe <UART_SetConfig+0xfe>
 8004df4:	231f      	movs	r3, #31
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	e021      	b.n	8004e42 <UART_SetConfig+0x142>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a73      	ldr	r2, [pc, #460]	@ (8004fd0 <UART_SetConfig+0x2d0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d104      	bne.n	8004e12 <UART_SetConfig+0x112>
 8004e08:	231f      	movs	r3, #31
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e017      	b.n	8004e42 <UART_SetConfig+0x142>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6f      	ldr	r2, [pc, #444]	@ (8004fd4 <UART_SetConfig+0x2d4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d104      	bne.n	8004e26 <UART_SetConfig+0x126>
 8004e1c:	231f      	movs	r3, #31
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e00d      	b.n	8004e42 <UART_SetConfig+0x142>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd8 <UART_SetConfig+0x2d8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d104      	bne.n	8004e3a <UART_SetConfig+0x13a>
 8004e30:	231f      	movs	r3, #31
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e003      	b.n	8004e42 <UART_SetConfig+0x142>
 8004e3a:	231f      	movs	r3, #31
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2210      	movs	r2, #16
 8004e40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d15c      	bne.n	8004f08 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8004e4e:	231f      	movs	r3, #31
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d015      	beq.n	8004e84 <UART_SetConfig+0x184>
 8004e58:	dc18      	bgt.n	8004e8c <UART_SetConfig+0x18c>
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d00d      	beq.n	8004e7a <UART_SetConfig+0x17a>
 8004e5e:	dc15      	bgt.n	8004e8c <UART_SetConfig+0x18c>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <UART_SetConfig+0x16a>
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d005      	beq.n	8004e74 <UART_SetConfig+0x174>
 8004e68:	e010      	b.n	8004e8c <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e6a:	f7ff f9e3 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	61bb      	str	r3, [r7, #24]
        break;
 8004e72:	e012      	b.n	8004e9a <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e74:	4b59      	ldr	r3, [pc, #356]	@ (8004fdc <UART_SetConfig+0x2dc>)
 8004e76:	61bb      	str	r3, [r7, #24]
        break;
 8004e78:	e00f      	b.n	8004e9a <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7a:	f7ff f979 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	61bb      	str	r3, [r7, #24]
        break;
 8004e82:	e00a      	b.n	8004e9a <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e84:	2380      	movs	r3, #128	@ 0x80
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	61bb      	str	r3, [r7, #24]
        break;
 8004e8a:	e006      	b.n	8004e9a <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e90:	231e      	movs	r3, #30
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
        break;
 8004e98:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d100      	bne.n	8004ea2 <UART_SetConfig+0x1a2>
 8004ea0:	e07a      	b.n	8004f98 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	005a      	lsls	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	18d2      	adds	r2, r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	0010      	movs	r0, r2
 8004eb6:	f7fb f937 	bl	8000128 <__udivsi3>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b0f      	cmp	r3, #15
 8004ec2:	d91c      	bls.n	8004efe <UART_SetConfig+0x1fe>
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d217      	bcs.n	8004efe <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	200e      	movs	r0, #14
 8004ed4:	183b      	adds	r3, r7, r0
 8004ed6:	210f      	movs	r1, #15
 8004ed8:	438a      	bics	r2, r1
 8004eda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2207      	movs	r2, #7
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	183b      	adds	r3, r7, r0
 8004eea:	183a      	adds	r2, r7, r0
 8004eec:	8812      	ldrh	r2, [r2, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	183a      	adds	r2, r7, r0
 8004ef8:	8812      	ldrh	r2, [r2, #0]
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e04c      	b.n	8004f98 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8004efe:	231e      	movs	r3, #30
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e047      	b.n	8004f98 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f08:	231f      	movs	r3, #31
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d015      	beq.n	8004f3e <UART_SetConfig+0x23e>
 8004f12:	dc18      	bgt.n	8004f46 <UART_SetConfig+0x246>
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d00d      	beq.n	8004f34 <UART_SetConfig+0x234>
 8004f18:	dc15      	bgt.n	8004f46 <UART_SetConfig+0x246>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <UART_SetConfig+0x224>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d005      	beq.n	8004f2e <UART_SetConfig+0x22e>
 8004f22:	e010      	b.n	8004f46 <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7ff f986 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	61bb      	str	r3, [r7, #24]
        break;
 8004f2c:	e012      	b.n	8004f54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fdc <UART_SetConfig+0x2dc>)
 8004f30:	61bb      	str	r3, [r7, #24]
        break;
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f34:	f7ff f91c 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	61bb      	str	r3, [r7, #24]
        break;
 8004f3c:	e00a      	b.n	8004f54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	61bb      	str	r3, [r7, #24]
        break;
 8004f44:	e006      	b.n	8004f54 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f4a:	231e      	movs	r3, #30
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
        break;
 8004f52:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01e      	beq.n	8004f98 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085a      	lsrs	r2, r3, #1
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	18d2      	adds	r2, r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0019      	movs	r1, r3
 8004f6a:	0010      	movs	r0, r2
 8004f6c:	f7fb f8dc 	bl	8000128 <__udivsi3>
 8004f70:	0003      	movs	r3, r0
 8004f72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d90a      	bls.n	8004f90 <UART_SetConfig+0x290>
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	025b      	lsls	r3, r3, #9
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d205      	bcs.n	8004f90 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	e003      	b.n	8004f98 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8004f90:	231e      	movs	r3, #30
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fa4:	231e      	movs	r3, #30
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b008      	add	sp, #32
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	efff69f3 	.word	0xefff69f3
 8004fb8:	ffffcfff 	.word	0xffffcfff
 8004fbc:	fffff4ff 	.word	0xfffff4ff
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	40004800 	.word	0x40004800
 8004fd0:	40004c00 	.word	0x40004c00
 8004fd4:	40005000 	.word	0x40005000
 8004fd8:	40011400 	.word	0x40011400
 8004fdc:	007a1200 	.word	0x007a1200

08004fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	2208      	movs	r2, #8
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d00b      	beq.n	800500a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8005124 <UART_AdvFeatureConfig+0x144>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	2201      	movs	r2, #1
 8005010:	4013      	ands	r3, r2
 8005012:	d00b      	beq.n	800502c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4a43      	ldr	r2, [pc, #268]	@ (8005128 <UART_AdvFeatureConfig+0x148>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	2202      	movs	r2, #2
 8005032:	4013      	ands	r3, r2
 8005034:	d00b      	beq.n	800504e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a3b      	ldr	r2, [pc, #236]	@ (800512c <UART_AdvFeatureConfig+0x14c>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	2204      	movs	r2, #4
 8005054:	4013      	ands	r3, r2
 8005056:	d00b      	beq.n	8005070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a34      	ldr	r2, [pc, #208]	@ (8005130 <UART_AdvFeatureConfig+0x150>)
 8005060:	4013      	ands	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	2210      	movs	r2, #16
 8005076:	4013      	ands	r3, r2
 8005078:	d00b      	beq.n	8005092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a2c      	ldr	r2, [pc, #176]	@ (8005134 <UART_AdvFeatureConfig+0x154>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	2220      	movs	r2, #32
 8005098:	4013      	ands	r3, r2
 800509a:	d00b      	beq.n	80050b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4a25      	ldr	r2, [pc, #148]	@ (8005138 <UART_AdvFeatureConfig+0x158>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	2240      	movs	r2, #64	@ 0x40
 80050ba:	4013      	ands	r3, r2
 80050bc:	d01d      	beq.n	80050fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <UART_AdvFeatureConfig+0x15c>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050da:	2380      	movs	r3, #128	@ 0x80
 80050dc:	035b      	lsls	r3, r3, #13
 80050de:	429a      	cmp	r2, r3
 80050e0:	d10b      	bne.n	80050fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <UART_AdvFeatureConfig+0x160>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	2280      	movs	r2, #128	@ 0x80
 8005100:	4013      	ands	r3, r2
 8005102:	d00b      	beq.n	800511c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <UART_AdvFeatureConfig+0x164>)
 800510c:	4013      	ands	r3, r2
 800510e:	0019      	movs	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }
}
 800511c:	46c0      	nop			@ (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b002      	add	sp, #8
 8005122:	bd80      	pop	{r7, pc}
 8005124:	ffff7fff 	.word	0xffff7fff
 8005128:	fffdffff 	.word	0xfffdffff
 800512c:	fffeffff 	.word	0xfffeffff
 8005130:	fffbffff 	.word	0xfffbffff
 8005134:	ffffefff 	.word	0xffffefff
 8005138:	ffffdfff 	.word	0xffffdfff
 800513c:	ffefffff 	.word	0xffefffff
 8005140:	ff9fffff 	.word	0xff9fffff
 8005144:	fff7ffff 	.word	0xfff7ffff

08005148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b092      	sub	sp, #72	@ 0x48
 800514c:	af02      	add	r7, sp, #8
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2284      	movs	r2, #132	@ 0x84
 8005154:	2100      	movs	r1, #0
 8005156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005158:	f7fd fb7a 	bl	8002850 <HAL_GetTick>
 800515c:	0003      	movs	r3, r0
 800515e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2208      	movs	r2, #8
 8005168:	4013      	ands	r3, r2
 800516a:	2b08      	cmp	r3, #8
 800516c:	d12c      	bne.n	80051c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005170:	2280      	movs	r2, #128	@ 0x80
 8005172:	0391      	lsls	r1, r2, #14
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4a46      	ldr	r2, [pc, #280]	@ (8005290 <UART_CheckIdleState+0x148>)
 8005178:	9200      	str	r2, [sp, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	f000 f88c 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8005180:	1e03      	subs	r3, r0, #0
 8005182:	d021      	beq.n	80051c8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800518c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800518e:	2301      	movs	r3, #1
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2180      	movs	r1, #128	@ 0x80
 80051a6:	438a      	bics	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2278      	movs	r2, #120	@ 0x78
 80051c0:	2100      	movs	r1, #0
 80051c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e05f      	b.n	8005288 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2204      	movs	r2, #4
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d146      	bne.n	8005264 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d8:	2280      	movs	r2, #128	@ 0x80
 80051da:	03d1      	lsls	r1, r2, #15
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <UART_CheckIdleState+0x148>)
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f000 f858 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 80051e8:	1e03      	subs	r3, r0, #0
 80051ea:	d03b      	beq.n	8005264 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ec:	f3ef 8310 	mrs	r3, PRIMASK
 80051f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80051f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f6:	2301      	movs	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			@ (mov r8, r8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4921      	ldr	r1, [pc, #132]	@ (8005294 <UART_CheckIdleState+0x14c>)
 800520e:	400a      	ands	r2, r1
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8310 	mrs	r3, PRIMASK
 8005222:	61bb      	str	r3, [r7, #24]
  return(result);
 8005224:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005226:	633b      	str	r3, [r7, #48]	@ 0x30
 8005228:	2301      	movs	r3, #1
 800522a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2101      	movs	r1, #1
 8005240:	438a      	bics	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2280      	movs	r2, #128	@ 0x80
 8005254:	2120      	movs	r1, #32
 8005256:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2278      	movs	r2, #120	@ 0x78
 800525c:	2100      	movs	r1, #0
 800525e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e011      	b.n	8005288 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2280      	movs	r2, #128	@ 0x80
 800526e:	2120      	movs	r1, #32
 8005270:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2278      	movs	r2, #120	@ 0x78
 8005282:	2100      	movs	r1, #0
 8005284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b010      	add	sp, #64	@ 0x40
 800528e:	bd80      	pop	{r7, pc}
 8005290:	01ffffff 	.word	0x01ffffff
 8005294:	fffffedf 	.word	0xfffffedf

08005298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	e051      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	3301      	adds	r3, #1
 80052ae:	d04e      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b0:	f7fd face 	bl	8002850 <HAL_GetTick>
 80052b4:	0002      	movs	r2, r0
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d302      	bcc.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e051      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2204      	movs	r2, #4
 80052d2:	4013      	ands	r3, r2
 80052d4:	d03b      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0xb6>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b80      	cmp	r3, #128	@ 0x80
 80052da:	d038      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0xb6>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d035      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	2208      	movs	r2, #8
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d111      	bne.n	8005314 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2208      	movs	r2, #8
 80052f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 f83c 	bl	8005378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2284      	movs	r2, #132	@ 0x84
 8005304:	2108      	movs	r1, #8
 8005306:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2278      	movs	r2, #120	@ 0x78
 800530c:	2100      	movs	r1, #0
 800530e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e02c      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	2380      	movs	r3, #128	@ 0x80
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	401a      	ands	r2, r3
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	429a      	cmp	r2, r3
 8005326:	d112      	bne.n	800534e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2280      	movs	r2, #128	@ 0x80
 800532e:	0112      	lsls	r2, r2, #4
 8005330:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 f81f 	bl	8005378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2284      	movs	r2, #132	@ 0x84
 800533e:	2120      	movs	r1, #32
 8005340:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2278      	movs	r2, #120	@ 0x78
 8005346:	2100      	movs	r1, #0
 8005348:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e00f      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	425a      	negs	r2, r3
 800535e:	4153      	adcs	r3, r2
 8005360:	b2db      	uxtb	r3, r3
 8005362:	001a      	movs	r2, r3
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d09e      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	0018      	movs	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	b004      	add	sp, #16
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	@ 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	617b      	str	r3, [r7, #20]
  return(result);
 8005386:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			@ (mov r8, r8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4926      	ldr	r1, [pc, #152]	@ (800543c <UART_EndRxTransfer+0xc4>)
 80053a2:	400a      	ands	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f383 8810 	msr	PRIMASK, r3
}
 80053b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b2:	f3ef 8310 	mrs	r3, PRIMASK
 80053b6:	623b      	str	r3, [r7, #32]
  return(result);
 80053b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80053bc:	2301      	movs	r3, #1
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2101      	movs	r1, #1
 80053d4:	438a      	bics	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	f383 8810 	msr	PRIMASK, r3
}
 80053e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d118      	bne.n	800541e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ec:	f3ef 8310 	mrs	r3, PRIMASK
 80053f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f6:	2301      	movs	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2110      	movs	r1, #16
 800540e:	438a      	bics	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2280      	movs	r2, #128	@ 0x80
 8005422:	2120      	movs	r1, #32
 8005424:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b00e      	add	sp, #56	@ 0x38
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	fffffedf 	.word	0xfffffedf

08005440 <std>:
 8005440:	2300      	movs	r3, #0
 8005442:	b510      	push	{r4, lr}
 8005444:	0004      	movs	r4, r0
 8005446:	6003      	str	r3, [r0, #0]
 8005448:	6043      	str	r3, [r0, #4]
 800544a:	6083      	str	r3, [r0, #8]
 800544c:	8181      	strh	r1, [r0, #12]
 800544e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005450:	81c2      	strh	r2, [r0, #14]
 8005452:	6103      	str	r3, [r0, #16]
 8005454:	6143      	str	r3, [r0, #20]
 8005456:	6183      	str	r3, [r0, #24]
 8005458:	0019      	movs	r1, r3
 800545a:	2208      	movs	r2, #8
 800545c:	305c      	adds	r0, #92	@ 0x5c
 800545e:	f000 fa0f 	bl	8005880 <memset>
 8005462:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <std+0x50>)
 8005464:	6224      	str	r4, [r4, #32]
 8005466:	6263      	str	r3, [r4, #36]	@ 0x24
 8005468:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <std+0x54>)
 800546a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800546c:	4b0a      	ldr	r3, [pc, #40]	@ (8005498 <std+0x58>)
 800546e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <std+0x5c>)
 8005472:	6323      	str	r3, [r4, #48]	@ 0x30
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <std+0x60>)
 8005476:	429c      	cmp	r4, r3
 8005478:	d005      	beq.n	8005486 <std+0x46>
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <std+0x64>)
 800547c:	429c      	cmp	r4, r3
 800547e:	d002      	beq.n	8005486 <std+0x46>
 8005480:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <std+0x68>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d103      	bne.n	800548e <std+0x4e>
 8005486:	0020      	movs	r0, r4
 8005488:	3058      	adds	r0, #88	@ 0x58
 800548a:	f000 fa79 	bl	8005980 <__retarget_lock_init_recursive>
 800548e:	bd10      	pop	{r4, pc}
 8005490:	080056a9 	.word	0x080056a9
 8005494:	080056d1 	.word	0x080056d1
 8005498:	08005709 	.word	0x08005709
 800549c:	08005735 	.word	0x08005735
 80054a0:	20000284 	.word	0x20000284
 80054a4:	200002ec 	.word	0x200002ec
 80054a8:	20000354 	.word	0x20000354

080054ac <stdio_exit_handler>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4a03      	ldr	r2, [pc, #12]	@ (80054bc <stdio_exit_handler+0x10>)
 80054b0:	4903      	ldr	r1, [pc, #12]	@ (80054c0 <stdio_exit_handler+0x14>)
 80054b2:	4804      	ldr	r0, [pc, #16]	@ (80054c4 <stdio_exit_handler+0x18>)
 80054b4:	f000 f86c 	bl	8005590 <_fwalk_sglue>
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	2000001c 	.word	0x2000001c
 80054c0:	0800621d 	.word	0x0800621d
 80054c4:	2000002c 	.word	0x2000002c

080054c8 <cleanup_stdio>:
 80054c8:	6841      	ldr	r1, [r0, #4]
 80054ca:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <cleanup_stdio+0x30>)
 80054cc:	b510      	push	{r4, lr}
 80054ce:	0004      	movs	r4, r0
 80054d0:	4299      	cmp	r1, r3
 80054d2:	d001      	beq.n	80054d8 <cleanup_stdio+0x10>
 80054d4:	f000 fea2 	bl	800621c <_fflush_r>
 80054d8:	68a1      	ldr	r1, [r4, #8]
 80054da:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <cleanup_stdio+0x34>)
 80054dc:	4299      	cmp	r1, r3
 80054de:	d002      	beq.n	80054e6 <cleanup_stdio+0x1e>
 80054e0:	0020      	movs	r0, r4
 80054e2:	f000 fe9b 	bl	800621c <_fflush_r>
 80054e6:	68e1      	ldr	r1, [r4, #12]
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <cleanup_stdio+0x38>)
 80054ea:	4299      	cmp	r1, r3
 80054ec:	d002      	beq.n	80054f4 <cleanup_stdio+0x2c>
 80054ee:	0020      	movs	r0, r4
 80054f0:	f000 fe94 	bl	800621c <_fflush_r>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	20000284 	.word	0x20000284
 80054fc:	200002ec 	.word	0x200002ec
 8005500:	20000354 	.word	0x20000354

08005504 <global_stdio_init.part.0>:
 8005504:	b510      	push	{r4, lr}
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <global_stdio_init.part.0+0x28>)
 8005508:	4a09      	ldr	r2, [pc, #36]	@ (8005530 <global_stdio_init.part.0+0x2c>)
 800550a:	2104      	movs	r1, #4
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	4809      	ldr	r0, [pc, #36]	@ (8005534 <global_stdio_init.part.0+0x30>)
 8005510:	2200      	movs	r2, #0
 8005512:	f7ff ff95 	bl	8005440 <std>
 8005516:	2201      	movs	r2, #1
 8005518:	2109      	movs	r1, #9
 800551a:	4807      	ldr	r0, [pc, #28]	@ (8005538 <global_stdio_init.part.0+0x34>)
 800551c:	f7ff ff90 	bl	8005440 <std>
 8005520:	2202      	movs	r2, #2
 8005522:	2112      	movs	r1, #18
 8005524:	4805      	ldr	r0, [pc, #20]	@ (800553c <global_stdio_init.part.0+0x38>)
 8005526:	f7ff ff8b 	bl	8005440 <std>
 800552a:	bd10      	pop	{r4, pc}
 800552c:	200003bc 	.word	0x200003bc
 8005530:	080054ad 	.word	0x080054ad
 8005534:	20000284 	.word	0x20000284
 8005538:	200002ec 	.word	0x200002ec
 800553c:	20000354 	.word	0x20000354

08005540 <__sfp_lock_acquire>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4802      	ldr	r0, [pc, #8]	@ (800554c <__sfp_lock_acquire+0xc>)
 8005544:	f000 fa1d 	bl	8005982 <__retarget_lock_acquire_recursive>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	200003c5 	.word	0x200003c5

08005550 <__sfp_lock_release>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4802      	ldr	r0, [pc, #8]	@ (800555c <__sfp_lock_release+0xc>)
 8005554:	f000 fa16 	bl	8005984 <__retarget_lock_release_recursive>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	200003c5 	.word	0x200003c5

08005560 <__sinit>:
 8005560:	b510      	push	{r4, lr}
 8005562:	0004      	movs	r4, r0
 8005564:	f7ff ffec 	bl	8005540 <__sfp_lock_acquire>
 8005568:	6a23      	ldr	r3, [r4, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <__sinit+0x14>
 800556e:	f7ff ffef 	bl	8005550 <__sfp_lock_release>
 8005572:	bd10      	pop	{r4, pc}
 8005574:	4b04      	ldr	r3, [pc, #16]	@ (8005588 <__sinit+0x28>)
 8005576:	6223      	str	r3, [r4, #32]
 8005578:	4b04      	ldr	r3, [pc, #16]	@ (800558c <__sinit+0x2c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f6      	bne.n	800556e <__sinit+0xe>
 8005580:	f7ff ffc0 	bl	8005504 <global_stdio_init.part.0>
 8005584:	e7f3      	b.n	800556e <__sinit+0xe>
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	080054c9 	.word	0x080054c9
 800558c:	200003bc 	.word	0x200003bc

08005590 <_fwalk_sglue>:
 8005590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005592:	0014      	movs	r4, r2
 8005594:	2600      	movs	r6, #0
 8005596:	9000      	str	r0, [sp, #0]
 8005598:	9101      	str	r1, [sp, #4]
 800559a:	68a5      	ldr	r5, [r4, #8]
 800559c:	6867      	ldr	r7, [r4, #4]
 800559e:	3f01      	subs	r7, #1
 80055a0:	d504      	bpl.n	80055ac <_fwalk_sglue+0x1c>
 80055a2:	6824      	ldr	r4, [r4, #0]
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	d1f8      	bne.n	800559a <_fwalk_sglue+0xa>
 80055a8:	0030      	movs	r0, r6
 80055aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055ac:	89ab      	ldrh	r3, [r5, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d908      	bls.n	80055c4 <_fwalk_sglue+0x34>
 80055b2:	220e      	movs	r2, #14
 80055b4:	5eab      	ldrsh	r3, [r5, r2]
 80055b6:	3301      	adds	r3, #1
 80055b8:	d004      	beq.n	80055c4 <_fwalk_sglue+0x34>
 80055ba:	0029      	movs	r1, r5
 80055bc:	9800      	ldr	r0, [sp, #0]
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	4798      	blx	r3
 80055c2:	4306      	orrs	r6, r0
 80055c4:	3568      	adds	r5, #104	@ 0x68
 80055c6:	e7ea      	b.n	800559e <_fwalk_sglue+0xe>

080055c8 <iprintf>:
 80055c8:	b40f      	push	{r0, r1, r2, r3}
 80055ca:	b507      	push	{r0, r1, r2, lr}
 80055cc:	4905      	ldr	r1, [pc, #20]	@ (80055e4 <iprintf+0x1c>)
 80055ce:	ab04      	add	r3, sp, #16
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	cb04      	ldmia	r3!, {r2}
 80055d4:	6881      	ldr	r1, [r0, #8]
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	f000 fb02 	bl	8005be0 <_vfiprintf_r>
 80055dc:	b003      	add	sp, #12
 80055de:	bc08      	pop	{r3}
 80055e0:	b004      	add	sp, #16
 80055e2:	4718      	bx	r3
 80055e4:	20000028 	.word	0x20000028

080055e8 <_puts_r>:
 80055e8:	6a03      	ldr	r3, [r0, #32]
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	0005      	movs	r5, r0
 80055ee:	000e      	movs	r6, r1
 80055f0:	6884      	ldr	r4, [r0, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <_puts_r+0x12>
 80055f6:	f7ff ffb3 	bl	8005560 <__sinit>
 80055fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d405      	bmi.n	800560c <_puts_r+0x24>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	059b      	lsls	r3, r3, #22
 8005604:	d402      	bmi.n	800560c <_puts_r+0x24>
 8005606:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005608:	f000 f9bb 	bl	8005982 <__retarget_lock_acquire_recursive>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	071b      	lsls	r3, r3, #28
 8005610:	d502      	bpl.n	8005618 <_puts_r+0x30>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d11f      	bne.n	8005658 <_puts_r+0x70>
 8005618:	0021      	movs	r1, r4
 800561a:	0028      	movs	r0, r5
 800561c:	f000 f8d2 	bl	80057c4 <__swsetup_r>
 8005620:	2800      	cmp	r0, #0
 8005622:	d019      	beq.n	8005658 <_puts_r+0x70>
 8005624:	2501      	movs	r5, #1
 8005626:	426d      	negs	r5, r5
 8005628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800562a:	07db      	lsls	r3, r3, #31
 800562c:	d405      	bmi.n	800563a <_puts_r+0x52>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	059b      	lsls	r3, r3, #22
 8005632:	d402      	bmi.n	800563a <_puts_r+0x52>
 8005634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005636:	f000 f9a5 	bl	8005984 <__retarget_lock_release_recursive>
 800563a:	0028      	movs	r0, r5
 800563c:	bd70      	pop	{r4, r5, r6, pc}
 800563e:	3601      	adds	r6, #1
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da04      	bge.n	8005650 <_puts_r+0x68>
 8005646:	69a2      	ldr	r2, [r4, #24]
 8005648:	429a      	cmp	r2, r3
 800564a:	dc16      	bgt.n	800567a <_puts_r+0x92>
 800564c:	290a      	cmp	r1, #10
 800564e:	d014      	beq.n	800567a <_puts_r+0x92>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	7019      	strb	r1, [r3, #0]
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	7831      	ldrb	r1, [r6, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	2900      	cmp	r1, #0
 8005660:	d1ed      	bne.n	800563e <_puts_r+0x56>
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da0f      	bge.n	8005688 <_puts_r+0xa0>
 8005668:	0022      	movs	r2, r4
 800566a:	0028      	movs	r0, r5
 800566c:	310a      	adds	r1, #10
 800566e:	f000 f867 	bl	8005740 <__swbuf_r>
 8005672:	3001      	adds	r0, #1
 8005674:	d0d6      	beq.n	8005624 <_puts_r+0x3c>
 8005676:	250a      	movs	r5, #10
 8005678:	e7d6      	b.n	8005628 <_puts_r+0x40>
 800567a:	0022      	movs	r2, r4
 800567c:	0028      	movs	r0, r5
 800567e:	f000 f85f 	bl	8005740 <__swbuf_r>
 8005682:	3001      	adds	r0, #1
 8005684:	d1e8      	bne.n	8005658 <_puts_r+0x70>
 8005686:	e7cd      	b.n	8005624 <_puts_r+0x3c>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	220a      	movs	r2, #10
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e7f0      	b.n	8005676 <_puts_r+0x8e>

08005694 <puts>:
 8005694:	b510      	push	{r4, lr}
 8005696:	4b03      	ldr	r3, [pc, #12]	@ (80056a4 <puts+0x10>)
 8005698:	0001      	movs	r1, r0
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	f7ff ffa4 	bl	80055e8 <_puts_r>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	20000028 	.word	0x20000028

080056a8 <__sread>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	000c      	movs	r4, r1
 80056ac:	250e      	movs	r5, #14
 80056ae:	5f49      	ldrsh	r1, [r1, r5]
 80056b0:	f000 f914 	bl	80058dc <_read_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	db03      	blt.n	80056c0 <__sread+0x18>
 80056b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80056ba:	181b      	adds	r3, r3, r0
 80056bc:	6563      	str	r3, [r4, #84]	@ 0x54
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	4a02      	ldr	r2, [pc, #8]	@ (80056cc <__sread+0x24>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	e7f9      	b.n	80056be <__sread+0x16>
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	ffffefff 	.word	0xffffefff

080056d0 <__swrite>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	001f      	movs	r7, r3
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	0005      	movs	r5, r0
 80056d8:	000c      	movs	r4, r1
 80056da:	0016      	movs	r6, r2
 80056dc:	05db      	lsls	r3, r3, #23
 80056de:	d505      	bpl.n	80056ec <__swrite+0x1c>
 80056e0:	230e      	movs	r3, #14
 80056e2:	5ec9      	ldrsh	r1, [r1, r3]
 80056e4:	2200      	movs	r2, #0
 80056e6:	2302      	movs	r3, #2
 80056e8:	f000 f8e4 	bl	80058b4 <_lseek_r>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	4a05      	ldr	r2, [pc, #20]	@ (8005704 <__swrite+0x34>)
 80056f0:	0028      	movs	r0, r5
 80056f2:	4013      	ands	r3, r2
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	0032      	movs	r2, r6
 80056f8:	230e      	movs	r3, #14
 80056fa:	5ee1      	ldrsh	r1, [r4, r3]
 80056fc:	003b      	movs	r3, r7
 80056fe:	f000 f901 	bl	8005904 <_write_r>
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005704:	ffffefff 	.word	0xffffefff

08005708 <__sseek>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	000c      	movs	r4, r1
 800570c:	250e      	movs	r5, #14
 800570e:	5f49      	ldrsh	r1, [r1, r5]
 8005710:	f000 f8d0 	bl	80058b4 <_lseek_r>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	1c42      	adds	r2, r0, #1
 8005718:	d103      	bne.n	8005722 <__sseek+0x1a>
 800571a:	4a05      	ldr	r2, [pc, #20]	@ (8005730 <__sseek+0x28>)
 800571c:	4013      	ands	r3, r2
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	2280      	movs	r2, #128	@ 0x80
 8005724:	0152      	lsls	r2, r2, #5
 8005726:	4313      	orrs	r3, r2
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	6560      	str	r0, [r4, #84]	@ 0x54
 800572c:	e7f8      	b.n	8005720 <__sseek+0x18>
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	ffffefff 	.word	0xffffefff

08005734 <__sclose>:
 8005734:	b510      	push	{r4, lr}
 8005736:	230e      	movs	r3, #14
 8005738:	5ec9      	ldrsh	r1, [r1, r3]
 800573a:	f000 f8a9 	bl	8005890 <_close_r>
 800573e:	bd10      	pop	{r4, pc}

08005740 <__swbuf_r>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	0006      	movs	r6, r0
 8005744:	000d      	movs	r5, r1
 8005746:	0014      	movs	r4, r2
 8005748:	2800      	cmp	r0, #0
 800574a:	d004      	beq.n	8005756 <__swbuf_r+0x16>
 800574c:	6a03      	ldr	r3, [r0, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <__swbuf_r+0x16>
 8005752:	f7ff ff05 	bl	8005560 <__sinit>
 8005756:	69a3      	ldr	r3, [r4, #24]
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	071b      	lsls	r3, r3, #28
 800575e:	d502      	bpl.n	8005766 <__swbuf_r+0x26>
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <__swbuf_r+0x3a>
 8005766:	0021      	movs	r1, r4
 8005768:	0030      	movs	r0, r6
 800576a:	f000 f82b 	bl	80057c4 <__swsetup_r>
 800576e:	2800      	cmp	r0, #0
 8005770:	d003      	beq.n	800577a <__swbuf_r+0x3a>
 8005772:	2501      	movs	r5, #1
 8005774:	426d      	negs	r5, r5
 8005776:	0028      	movs	r0, r5
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	b2ef      	uxtb	r7, r5
 8005780:	1ac0      	subs	r0, r0, r3
 8005782:	6963      	ldr	r3, [r4, #20]
 8005784:	b2ed      	uxtb	r5, r5
 8005786:	4283      	cmp	r3, r0
 8005788:	dc05      	bgt.n	8005796 <__swbuf_r+0x56>
 800578a:	0021      	movs	r1, r4
 800578c:	0030      	movs	r0, r6
 800578e:	f000 fd45 	bl	800621c <_fflush_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	d1ed      	bne.n	8005772 <__swbuf_r+0x32>
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	3001      	adds	r0, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	60a3      	str	r3, [r4, #8]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	701f      	strb	r7, [r3, #0]
 80057a6:	6963      	ldr	r3, [r4, #20]
 80057a8:	4283      	cmp	r3, r0
 80057aa:	d004      	beq.n	80057b6 <__swbuf_r+0x76>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	07db      	lsls	r3, r3, #31
 80057b0:	d5e1      	bpl.n	8005776 <__swbuf_r+0x36>
 80057b2:	2d0a      	cmp	r5, #10
 80057b4:	d1df      	bne.n	8005776 <__swbuf_r+0x36>
 80057b6:	0021      	movs	r1, r4
 80057b8:	0030      	movs	r0, r6
 80057ba:	f000 fd2f 	bl	800621c <_fflush_r>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d0d9      	beq.n	8005776 <__swbuf_r+0x36>
 80057c2:	e7d6      	b.n	8005772 <__swbuf_r+0x32>

080057c4 <__swsetup_r>:
 80057c4:	4b2d      	ldr	r3, [pc, #180]	@ (800587c <__swsetup_r+0xb8>)
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	0005      	movs	r5, r0
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	000c      	movs	r4, r1
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d004      	beq.n	80057dc <__swsetup_r+0x18>
 80057d2:	6a03      	ldr	r3, [r0, #32]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <__swsetup_r+0x18>
 80057d8:	f7ff fec2 	bl	8005560 <__sinit>
 80057dc:	220c      	movs	r2, #12
 80057de:	5ea3      	ldrsh	r3, [r4, r2]
 80057e0:	071a      	lsls	r2, r3, #28
 80057e2:	d423      	bmi.n	800582c <__swsetup_r+0x68>
 80057e4:	06da      	lsls	r2, r3, #27
 80057e6:	d407      	bmi.n	80057f8 <__swsetup_r+0x34>
 80057e8:	2209      	movs	r2, #9
 80057ea:	602a      	str	r2, [r5, #0]
 80057ec:	2240      	movs	r2, #64	@ 0x40
 80057ee:	2001      	movs	r0, #1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	4240      	negs	r0, r0
 80057f6:	e03a      	b.n	800586e <__swsetup_r+0xaa>
 80057f8:	075b      	lsls	r3, r3, #29
 80057fa:	d513      	bpl.n	8005824 <__swsetup_r+0x60>
 80057fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057fe:	2900      	cmp	r1, #0
 8005800:	d008      	beq.n	8005814 <__swsetup_r+0x50>
 8005802:	0023      	movs	r3, r4
 8005804:	3344      	adds	r3, #68	@ 0x44
 8005806:	4299      	cmp	r1, r3
 8005808:	d002      	beq.n	8005810 <__swsetup_r+0x4c>
 800580a:	0028      	movs	r0, r5
 800580c:	f000 f8c4 	bl	8005998 <_free_r>
 8005810:	2300      	movs	r3, #0
 8005812:	6363      	str	r3, [r4, #52]	@ 0x34
 8005814:	2224      	movs	r2, #36	@ 0x24
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	4393      	bics	r3, r2
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	2300      	movs	r3, #0
 800581e:	6063      	str	r3, [r4, #4]
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	2308      	movs	r3, #8
 8005826:	89a2      	ldrh	r2, [r4, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <__swsetup_r+0x86>
 8005832:	21a0      	movs	r1, #160	@ 0xa0
 8005834:	2280      	movs	r2, #128	@ 0x80
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	0089      	lsls	r1, r1, #2
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	400b      	ands	r3, r1
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <__swsetup_r+0x86>
 8005842:	0021      	movs	r1, r4
 8005844:	0028      	movs	r0, r5
 8005846:	f000 fd3f 	bl	80062c8 <__smakebuf_r>
 800584a:	220c      	movs	r2, #12
 800584c:	5ea3      	ldrsh	r3, [r4, r2]
 800584e:	2101      	movs	r1, #1
 8005850:	001a      	movs	r2, r3
 8005852:	400a      	ands	r2, r1
 8005854:	420b      	tst	r3, r1
 8005856:	d00b      	beq.n	8005870 <__swsetup_r+0xac>
 8005858:	2200      	movs	r2, #0
 800585a:	60a2      	str	r2, [r4, #8]
 800585c:	6962      	ldr	r2, [r4, #20]
 800585e:	4252      	negs	r2, r2
 8005860:	61a2      	str	r2, [r4, #24]
 8005862:	2000      	movs	r0, #0
 8005864:	6922      	ldr	r2, [r4, #16]
 8005866:	4282      	cmp	r2, r0
 8005868:	d101      	bne.n	800586e <__swsetup_r+0xaa>
 800586a:	061a      	lsls	r2, r3, #24
 800586c:	d4be      	bmi.n	80057ec <__swsetup_r+0x28>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	0799      	lsls	r1, r3, #30
 8005872:	d400      	bmi.n	8005876 <__swsetup_r+0xb2>
 8005874:	6962      	ldr	r2, [r4, #20]
 8005876:	60a2      	str	r2, [r4, #8]
 8005878:	e7f3      	b.n	8005862 <__swsetup_r+0x9e>
 800587a:	46c0      	nop			@ (mov r8, r8)
 800587c:	20000028 	.word	0x20000028

08005880 <memset>:
 8005880:	0003      	movs	r3, r0
 8005882:	1882      	adds	r2, r0, r2
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <memset+0xa>
 8005888:	4770      	bx	lr
 800588a:	7019      	strb	r1, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	e7f9      	b.n	8005884 <memset+0x4>

08005890 <_close_r>:
 8005890:	2300      	movs	r3, #0
 8005892:	b570      	push	{r4, r5, r6, lr}
 8005894:	4d06      	ldr	r5, [pc, #24]	@ (80058b0 <_close_r+0x20>)
 8005896:	0004      	movs	r4, r0
 8005898:	0008      	movs	r0, r1
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	f7fc feec 	bl	8002678 <_close>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d103      	bne.n	80058ac <_close_r+0x1c>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d000      	beq.n	80058ac <_close_r+0x1c>
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	200003c0 	.word	0x200003c0

080058b4 <_lseek_r>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	0004      	movs	r4, r0
 80058b8:	0008      	movs	r0, r1
 80058ba:	0011      	movs	r1, r2
 80058bc:	001a      	movs	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	4d05      	ldr	r5, [pc, #20]	@ (80058d8 <_lseek_r+0x24>)
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f7fc fef9 	bl	80026ba <_lseek>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d103      	bne.n	80058d4 <_lseek_r+0x20>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d000      	beq.n	80058d4 <_lseek_r+0x20>
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	200003c0 	.word	0x200003c0

080058dc <_read_r>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	0004      	movs	r4, r0
 80058e0:	0008      	movs	r0, r1
 80058e2:	0011      	movs	r1, r2
 80058e4:	001a      	movs	r2, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	4d05      	ldr	r5, [pc, #20]	@ (8005900 <_read_r+0x24>)
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fc fe8b 	bl	8002606 <_read>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d103      	bne.n	80058fc <_read_r+0x20>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d000      	beq.n	80058fc <_read_r+0x20>
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	200003c0 	.word	0x200003c0

08005904 <_write_r>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	0004      	movs	r4, r0
 8005908:	0008      	movs	r0, r1
 800590a:	0011      	movs	r1, r2
 800590c:	001a      	movs	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	4d05      	ldr	r5, [pc, #20]	@ (8005928 <_write_r+0x24>)
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fc fe94 	bl	8002640 <_write>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d103      	bne.n	8005924 <_write_r+0x20>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d000      	beq.n	8005924 <_write_r+0x20>
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	200003c0 	.word	0x200003c0

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	@ (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	20000028 	.word	0x20000028

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	2600      	movs	r6, #0
 800593c:	4c0c      	ldr	r4, [pc, #48]	@ (8005970 <__libc_init_array+0x38>)
 800593e:	4d0d      	ldr	r5, [pc, #52]	@ (8005974 <__libc_init_array+0x3c>)
 8005940:	1b64      	subs	r4, r4, r5
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	2600      	movs	r6, #0
 800594a:	f000 fd41 	bl	80063d0 <_init>
 800594e:	4c0a      	ldr	r4, [pc, #40]	@ (8005978 <__libc_init_array+0x40>)
 8005950:	4d0a      	ldr	r5, [pc, #40]	@ (800597c <__libc_init_array+0x44>)
 8005952:	1b64      	subs	r4, r4, r5
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	00b3      	lsls	r3, r6, #2
 800595e:	58eb      	ldr	r3, [r5, r3]
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	00b3      	lsls	r3, r6, #2
 8005968:	58eb      	ldr	r3, [r5, r3]
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	080079c0 	.word	0x080079c0
 8005974:	080079c0 	.word	0x080079c0
 8005978:	080079c4 	.word	0x080079c4
 800597c:	080079c0 	.word	0x080079c0

08005980 <__retarget_lock_init_recursive>:
 8005980:	4770      	bx	lr

08005982 <__retarget_lock_acquire_recursive>:
 8005982:	4770      	bx	lr

08005984 <__retarget_lock_release_recursive>:
 8005984:	4770      	bx	lr

08005986 <memcpy>:
 8005986:	2300      	movs	r3, #0
 8005988:	b510      	push	{r4, lr}
 800598a:	429a      	cmp	r2, r3
 800598c:	d100      	bne.n	8005990 <memcpy+0xa>
 800598e:	bd10      	pop	{r4, pc}
 8005990:	5ccc      	ldrb	r4, [r1, r3]
 8005992:	54c4      	strb	r4, [r0, r3]
 8005994:	3301      	adds	r3, #1
 8005996:	e7f8      	b.n	800598a <memcpy+0x4>

08005998 <_free_r>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	0005      	movs	r5, r0
 800599c:	1e0c      	subs	r4, r1, #0
 800599e:	d010      	beq.n	80059c2 <_free_r+0x2a>
 80059a0:	3c04      	subs	r4, #4
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	da00      	bge.n	80059aa <_free_r+0x12>
 80059a8:	18e4      	adds	r4, r4, r3
 80059aa:	0028      	movs	r0, r5
 80059ac:	f000 f8e0 	bl	8005b70 <__malloc_lock>
 80059b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a28 <_free_r+0x90>)
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <_free_r+0x2c>
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6014      	str	r4, [r2, #0]
 80059bc:	0028      	movs	r0, r5
 80059be:	f000 f8df 	bl	8005b80 <__malloc_unlock>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	d908      	bls.n	80059da <_free_r+0x42>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	1821      	adds	r1, r4, r0
 80059cc:	428b      	cmp	r3, r1
 80059ce:	d1f3      	bne.n	80059b8 <_free_r+0x20>
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	1809      	adds	r1, r1, r0
 80059d6:	6021      	str	r1, [r4, #0]
 80059d8:	e7ee      	b.n	80059b8 <_free_r+0x20>
 80059da:	001a      	movs	r2, r3
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <_free_r+0x4e>
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	d9f9      	bls.n	80059da <_free_r+0x42>
 80059e6:	6811      	ldr	r1, [r2, #0]
 80059e8:	1850      	adds	r0, r2, r1
 80059ea:	42a0      	cmp	r0, r4
 80059ec:	d10b      	bne.n	8005a06 <_free_r+0x6e>
 80059ee:	6820      	ldr	r0, [r4, #0]
 80059f0:	1809      	adds	r1, r1, r0
 80059f2:	1850      	adds	r0, r2, r1
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	4283      	cmp	r3, r0
 80059f8:	d1e0      	bne.n	80059bc <_free_r+0x24>
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	1841      	adds	r1, r0, r1
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	6053      	str	r3, [r2, #4]
 8005a04:	e7da      	b.n	80059bc <_free_r+0x24>
 8005a06:	42a0      	cmp	r0, r4
 8005a08:	d902      	bls.n	8005a10 <_free_r+0x78>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	e7d5      	b.n	80059bc <_free_r+0x24>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428b      	cmp	r3, r1
 8005a16:	d103      	bne.n	8005a20 <_free_r+0x88>
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	1809      	adds	r1, r1, r0
 8005a1e:	6021      	str	r1, [r4, #0]
 8005a20:	6063      	str	r3, [r4, #4]
 8005a22:	6054      	str	r4, [r2, #4]
 8005a24:	e7ca      	b.n	80059bc <_free_r+0x24>
 8005a26:	46c0      	nop			@ (mov r8, r8)
 8005a28:	200003cc 	.word	0x200003cc

08005a2c <sbrk_aligned>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005a6c <sbrk_aligned+0x40>)
 8005a30:	000d      	movs	r5, r1
 8005a32:	6831      	ldr	r1, [r6, #0]
 8005a34:	0004      	movs	r4, r0
 8005a36:	2900      	cmp	r1, #0
 8005a38:	d102      	bne.n	8005a40 <sbrk_aligned+0x14>
 8005a3a:	f000 fcab 	bl	8006394 <_sbrk_r>
 8005a3e:	6030      	str	r0, [r6, #0]
 8005a40:	0029      	movs	r1, r5
 8005a42:	0020      	movs	r0, r4
 8005a44:	f000 fca6 	bl	8006394 <_sbrk_r>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d103      	bne.n	8005a54 <sbrk_aligned+0x28>
 8005a4c:	2501      	movs	r5, #1
 8005a4e:	426d      	negs	r5, r5
 8005a50:	0028      	movs	r0, r5
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	2303      	movs	r3, #3
 8005a56:	1cc5      	adds	r5, r0, #3
 8005a58:	439d      	bics	r5, r3
 8005a5a:	42a8      	cmp	r0, r5
 8005a5c:	d0f8      	beq.n	8005a50 <sbrk_aligned+0x24>
 8005a5e:	1a29      	subs	r1, r5, r0
 8005a60:	0020      	movs	r0, r4
 8005a62:	f000 fc97 	bl	8006394 <_sbrk_r>
 8005a66:	3001      	adds	r0, #1
 8005a68:	d1f2      	bne.n	8005a50 <sbrk_aligned+0x24>
 8005a6a:	e7ef      	b.n	8005a4c <sbrk_aligned+0x20>
 8005a6c:	200003c8 	.word	0x200003c8

08005a70 <_malloc_r>:
 8005a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a72:	2203      	movs	r2, #3
 8005a74:	1ccb      	adds	r3, r1, #3
 8005a76:	4393      	bics	r3, r2
 8005a78:	3308      	adds	r3, #8
 8005a7a:	0005      	movs	r5, r0
 8005a7c:	001f      	movs	r7, r3
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d234      	bcs.n	8005aec <_malloc_r+0x7c>
 8005a82:	270c      	movs	r7, #12
 8005a84:	42b9      	cmp	r1, r7
 8005a86:	d833      	bhi.n	8005af0 <_malloc_r+0x80>
 8005a88:	0028      	movs	r0, r5
 8005a8a:	f000 f871 	bl	8005b70 <__malloc_lock>
 8005a8e:	4e37      	ldr	r6, [pc, #220]	@ (8005b6c <_malloc_r+0xfc>)
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	001c      	movs	r4, r3
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	d12f      	bne.n	8005af8 <_malloc_r+0x88>
 8005a98:	0039      	movs	r1, r7
 8005a9a:	0028      	movs	r0, r5
 8005a9c:	f7ff ffc6 	bl	8005a2c <sbrk_aligned>
 8005aa0:	0004      	movs	r4, r0
 8005aa2:	1c43      	adds	r3, r0, #1
 8005aa4:	d15f      	bne.n	8005b66 <_malloc_r+0xf6>
 8005aa6:	6834      	ldr	r4, [r6, #0]
 8005aa8:	9400      	str	r4, [sp, #0]
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d14a      	bne.n	8005b46 <_malloc_r+0xd6>
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	d052      	beq.n	8005b5a <_malloc_r+0xea>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	18e3      	adds	r3, r4, r3
 8005aba:	9900      	ldr	r1, [sp, #0]
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	f000 fc69 	bl	8006394 <_sbrk_r>
 8005ac2:	9b01      	ldr	r3, [sp, #4]
 8005ac4:	4283      	cmp	r3, r0
 8005ac6:	d148      	bne.n	8005b5a <_malloc_r+0xea>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	0028      	movs	r0, r5
 8005acc:	1aff      	subs	r7, r7, r3
 8005ace:	0039      	movs	r1, r7
 8005ad0:	f7ff ffac 	bl	8005a2c <sbrk_aligned>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d040      	beq.n	8005b5a <_malloc_r+0xea>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	19db      	adds	r3, r3, r7
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	6833      	ldr	r3, [r6, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d133      	bne.n	8005b4e <_malloc_r+0xde>
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	6033      	str	r3, [r6, #0]
 8005aea:	e019      	b.n	8005b20 <_malloc_r+0xb0>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dac9      	bge.n	8005a84 <_malloc_r+0x14>
 8005af0:	230c      	movs	r3, #12
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	2000      	movs	r0, #0
 8005af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005af8:	6821      	ldr	r1, [r4, #0]
 8005afa:	1bc9      	subs	r1, r1, r7
 8005afc:	d420      	bmi.n	8005b40 <_malloc_r+0xd0>
 8005afe:	290b      	cmp	r1, #11
 8005b00:	d90a      	bls.n	8005b18 <_malloc_r+0xa8>
 8005b02:	19e2      	adds	r2, r4, r7
 8005b04:	6027      	str	r7, [r4, #0]
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	d104      	bne.n	8005b14 <_malloc_r+0xa4>
 8005b0a:	6032      	str	r2, [r6, #0]
 8005b0c:	6863      	ldr	r3, [r4, #4]
 8005b0e:	6011      	str	r1, [r2, #0]
 8005b10:	6053      	str	r3, [r2, #4]
 8005b12:	e005      	b.n	8005b20 <_malloc_r+0xb0>
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	e7f9      	b.n	8005b0c <_malloc_r+0x9c>
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	d10e      	bne.n	8005b3c <_malloc_r+0xcc>
 8005b1e:	6032      	str	r2, [r6, #0]
 8005b20:	0028      	movs	r0, r5
 8005b22:	f000 f82d 	bl	8005b80 <__malloc_unlock>
 8005b26:	0020      	movs	r0, r4
 8005b28:	2207      	movs	r2, #7
 8005b2a:	300b      	adds	r0, #11
 8005b2c:	1d23      	adds	r3, r4, #4
 8005b2e:	4390      	bics	r0, r2
 8005b30:	1ac2      	subs	r2, r0, r3
 8005b32:	4298      	cmp	r0, r3
 8005b34:	d0df      	beq.n	8005af6 <_malloc_r+0x86>
 8005b36:	1a1b      	subs	r3, r3, r0
 8005b38:	50a3      	str	r3, [r4, r2]
 8005b3a:	e7dc      	b.n	8005af6 <_malloc_r+0x86>
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e7ef      	b.n	8005b20 <_malloc_r+0xb0>
 8005b40:	0023      	movs	r3, r4
 8005b42:	6864      	ldr	r4, [r4, #4]
 8005b44:	e7a6      	b.n	8005a94 <_malloc_r+0x24>
 8005b46:	9c00      	ldr	r4, [sp, #0]
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	e7ad      	b.n	8005aaa <_malloc_r+0x3a>
 8005b4e:	001a      	movs	r2, r3
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	d1fb      	bne.n	8005b4e <_malloc_r+0xde>
 8005b56:	2300      	movs	r3, #0
 8005b58:	e7da      	b.n	8005b10 <_malloc_r+0xa0>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	0028      	movs	r0, r5
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f000 f80e 	bl	8005b80 <__malloc_unlock>
 8005b64:	e7c6      	b.n	8005af4 <_malloc_r+0x84>
 8005b66:	6007      	str	r7, [r0, #0]
 8005b68:	e7da      	b.n	8005b20 <_malloc_r+0xb0>
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	200003cc 	.word	0x200003cc

08005b70 <__malloc_lock>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	4802      	ldr	r0, [pc, #8]	@ (8005b7c <__malloc_lock+0xc>)
 8005b74:	f7ff ff05 	bl	8005982 <__retarget_lock_acquire_recursive>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	200003c4 	.word	0x200003c4

08005b80 <__malloc_unlock>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4802      	ldr	r0, [pc, #8]	@ (8005b8c <__malloc_unlock+0xc>)
 8005b84:	f7ff fefe 	bl	8005984 <__retarget_lock_release_recursive>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	200003c4 	.word	0x200003c4

08005b90 <__sfputc_r>:
 8005b90:	6893      	ldr	r3, [r2, #8]
 8005b92:	b510      	push	{r4, lr}
 8005b94:	3b01      	subs	r3, #1
 8005b96:	6093      	str	r3, [r2, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da04      	bge.n	8005ba6 <__sfputc_r+0x16>
 8005b9c:	6994      	ldr	r4, [r2, #24]
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	db07      	blt.n	8005bb2 <__sfputc_r+0x22>
 8005ba2:	290a      	cmp	r1, #10
 8005ba4:	d005      	beq.n	8005bb2 <__sfputc_r+0x22>
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	1c58      	adds	r0, r3, #1
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	7019      	strb	r1, [r3, #0]
 8005bae:	0008      	movs	r0, r1
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	f7ff fdc5 	bl	8005740 <__swbuf_r>
 8005bb6:	0001      	movs	r1, r0
 8005bb8:	e7f9      	b.n	8005bae <__sfputc_r+0x1e>

08005bba <__sfputs_r>:
 8005bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbc:	0006      	movs	r6, r0
 8005bbe:	000f      	movs	r7, r1
 8005bc0:	0014      	movs	r4, r2
 8005bc2:	18d5      	adds	r5, r2, r3
 8005bc4:	42ac      	cmp	r4, r5
 8005bc6:	d101      	bne.n	8005bcc <__sfputs_r+0x12>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	e007      	b.n	8005bdc <__sfputs_r+0x22>
 8005bcc:	7821      	ldrb	r1, [r4, #0]
 8005bce:	003a      	movs	r2, r7
 8005bd0:	0030      	movs	r0, r6
 8005bd2:	f7ff ffdd 	bl	8005b90 <__sfputc_r>
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d1f3      	bne.n	8005bc4 <__sfputs_r+0xa>
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be0 <_vfiprintf_r>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b0a1      	sub	sp, #132	@ 0x84
 8005be4:	000f      	movs	r7, r1
 8005be6:	0015      	movs	r5, r2
 8005be8:	001e      	movs	r6, r3
 8005bea:	9003      	str	r0, [sp, #12]
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d004      	beq.n	8005bfa <_vfiprintf_r+0x1a>
 8005bf0:	6a03      	ldr	r3, [r0, #32]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <_vfiprintf_r+0x1a>
 8005bf6:	f7ff fcb3 	bl	8005560 <__sinit>
 8005bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bfc:	07db      	lsls	r3, r3, #31
 8005bfe:	d405      	bmi.n	8005c0c <_vfiprintf_r+0x2c>
 8005c00:	89bb      	ldrh	r3, [r7, #12]
 8005c02:	059b      	lsls	r3, r3, #22
 8005c04:	d402      	bmi.n	8005c0c <_vfiprintf_r+0x2c>
 8005c06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c08:	f7ff febb 	bl	8005982 <__retarget_lock_acquire_recursive>
 8005c0c:	89bb      	ldrh	r3, [r7, #12]
 8005c0e:	071b      	lsls	r3, r3, #28
 8005c10:	d502      	bpl.n	8005c18 <_vfiprintf_r+0x38>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d113      	bne.n	8005c40 <_vfiprintf_r+0x60>
 8005c18:	0039      	movs	r1, r7
 8005c1a:	9803      	ldr	r0, [sp, #12]
 8005c1c:	f7ff fdd2 	bl	80057c4 <__swsetup_r>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d00d      	beq.n	8005c40 <_vfiprintf_r+0x60>
 8005c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c26:	07db      	lsls	r3, r3, #31
 8005c28:	d503      	bpl.n	8005c32 <_vfiprintf_r+0x52>
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	4240      	negs	r0, r0
 8005c2e:	b021      	add	sp, #132	@ 0x84
 8005c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	d4f8      	bmi.n	8005c2a <_vfiprintf_r+0x4a>
 8005c38:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c3a:	f7ff fea3 	bl	8005984 <__retarget_lock_release_recursive>
 8005c3e:	e7f4      	b.n	8005c2a <_vfiprintf_r+0x4a>
 8005c40:	2300      	movs	r3, #0
 8005c42:	ac08      	add	r4, sp, #32
 8005c44:	6163      	str	r3, [r4, #20]
 8005c46:	3320      	adds	r3, #32
 8005c48:	7663      	strb	r3, [r4, #25]
 8005c4a:	3310      	adds	r3, #16
 8005c4c:	76a3      	strb	r3, [r4, #26]
 8005c4e:	9607      	str	r6, [sp, #28]
 8005c50:	002e      	movs	r6, r5
 8005c52:	7833      	ldrb	r3, [r6, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <_vfiprintf_r+0x7c>
 8005c58:	2b25      	cmp	r3, #37	@ 0x25
 8005c5a:	d148      	bne.n	8005cee <_vfiprintf_r+0x10e>
 8005c5c:	1b73      	subs	r3, r6, r5
 8005c5e:	9305      	str	r3, [sp, #20]
 8005c60:	42ae      	cmp	r6, r5
 8005c62:	d00b      	beq.n	8005c7c <_vfiprintf_r+0x9c>
 8005c64:	002a      	movs	r2, r5
 8005c66:	0039      	movs	r1, r7
 8005c68:	9803      	ldr	r0, [sp, #12]
 8005c6a:	f7ff ffa6 	bl	8005bba <__sfputs_r>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d100      	bne.n	8005c74 <_vfiprintf_r+0x94>
 8005c72:	e0ae      	b.n	8005dd2 <_vfiprintf_r+0x1f2>
 8005c74:	6963      	ldr	r3, [r4, #20]
 8005c76:	9a05      	ldr	r2, [sp, #20]
 8005c78:	189b      	adds	r3, r3, r2
 8005c7a:	6163      	str	r3, [r4, #20]
 8005c7c:	7833      	ldrb	r3, [r6, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d100      	bne.n	8005c84 <_vfiprintf_r+0xa4>
 8005c82:	e0a6      	b.n	8005dd2 <_vfiprintf_r+0x1f2>
 8005c84:	2201      	movs	r2, #1
 8005c86:	2300      	movs	r3, #0
 8005c88:	4252      	negs	r2, r2
 8005c8a:	6062      	str	r2, [r4, #4]
 8005c8c:	a904      	add	r1, sp, #16
 8005c8e:	3254      	adds	r2, #84	@ 0x54
 8005c90:	1852      	adds	r2, r2, r1
 8005c92:	1c75      	adds	r5, r6, #1
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	60e3      	str	r3, [r4, #12]
 8005c98:	60a3      	str	r3, [r4, #8]
 8005c9a:	7013      	strb	r3, [r2, #0]
 8005c9c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005c9e:	4b59      	ldr	r3, [pc, #356]	@ (8005e04 <_vfiprintf_r+0x224>)
 8005ca0:	2205      	movs	r2, #5
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	7829      	ldrb	r1, [r5, #0]
 8005ca6:	9305      	str	r3, [sp, #20]
 8005ca8:	f000 fb86 	bl	80063b8 <memchr>
 8005cac:	1c6e      	adds	r6, r5, #1
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d11f      	bne.n	8005cf2 <_vfiprintf_r+0x112>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	06d3      	lsls	r3, r2, #27
 8005cb6:	d504      	bpl.n	8005cc2 <_vfiprintf_r+0xe2>
 8005cb8:	2353      	movs	r3, #83	@ 0x53
 8005cba:	a904      	add	r1, sp, #16
 8005cbc:	185b      	adds	r3, r3, r1
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	7019      	strb	r1, [r3, #0]
 8005cc2:	0713      	lsls	r3, r2, #28
 8005cc4:	d504      	bpl.n	8005cd0 <_vfiprintf_r+0xf0>
 8005cc6:	2353      	movs	r3, #83	@ 0x53
 8005cc8:	a904      	add	r1, sp, #16
 8005cca:	185b      	adds	r3, r3, r1
 8005ccc:	212b      	movs	r1, #43	@ 0x2b
 8005cce:	7019      	strb	r1, [r3, #0]
 8005cd0:	782b      	ldrb	r3, [r5, #0]
 8005cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cd4:	d016      	beq.n	8005d04 <_vfiprintf_r+0x124>
 8005cd6:	002e      	movs	r6, r5
 8005cd8:	2100      	movs	r1, #0
 8005cda:	200a      	movs	r0, #10
 8005cdc:	68e3      	ldr	r3, [r4, #12]
 8005cde:	7832      	ldrb	r2, [r6, #0]
 8005ce0:	1c75      	adds	r5, r6, #1
 8005ce2:	3a30      	subs	r2, #48	@ 0x30
 8005ce4:	2a09      	cmp	r2, #9
 8005ce6:	d950      	bls.n	8005d8a <_vfiprintf_r+0x1aa>
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d111      	bne.n	8005d10 <_vfiprintf_r+0x130>
 8005cec:	e017      	b.n	8005d1e <_vfiprintf_r+0x13e>
 8005cee:	3601      	adds	r6, #1
 8005cf0:	e7af      	b.n	8005c52 <_vfiprintf_r+0x72>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	1ac0      	subs	r0, r0, r3
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4083      	lsls	r3, r0
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	0035      	movs	r5, r6
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	e7cc      	b.n	8005c9e <_vfiprintf_r+0xbe>
 8005d04:	9b07      	ldr	r3, [sp, #28]
 8005d06:	1d19      	adds	r1, r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	9107      	str	r1, [sp, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	db01      	blt.n	8005d14 <_vfiprintf_r+0x134>
 8005d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d12:	e004      	b.n	8005d1e <_vfiprintf_r+0x13e>
 8005d14:	425b      	negs	r3, r3
 8005d16:	60e3      	str	r3, [r4, #12]
 8005d18:	2302      	movs	r3, #2
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	7833      	ldrb	r3, [r6, #0]
 8005d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d22:	d10c      	bne.n	8005d3e <_vfiprintf_r+0x15e>
 8005d24:	7873      	ldrb	r3, [r6, #1]
 8005d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d28:	d134      	bne.n	8005d94 <_vfiprintf_r+0x1b4>
 8005d2a:	9b07      	ldr	r3, [sp, #28]
 8005d2c:	3602      	adds	r6, #2
 8005d2e:	1d1a      	adds	r2, r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	9207      	str	r2, [sp, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da01      	bge.n	8005d3c <_vfiprintf_r+0x15c>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	425b      	negs	r3, r3
 8005d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d3e:	4d32      	ldr	r5, [pc, #200]	@ (8005e08 <_vfiprintf_r+0x228>)
 8005d40:	2203      	movs	r2, #3
 8005d42:	0028      	movs	r0, r5
 8005d44:	7831      	ldrb	r1, [r6, #0]
 8005d46:	f000 fb37 	bl	80063b8 <memchr>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d006      	beq.n	8005d5c <_vfiprintf_r+0x17c>
 8005d4e:	2340      	movs	r3, #64	@ 0x40
 8005d50:	1b40      	subs	r0, r0, r5
 8005d52:	4083      	lsls	r3, r0
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	3601      	adds	r6, #1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	7831      	ldrb	r1, [r6, #0]
 8005d5e:	2206      	movs	r2, #6
 8005d60:	482a      	ldr	r0, [pc, #168]	@ (8005e0c <_vfiprintf_r+0x22c>)
 8005d62:	1c75      	adds	r5, r6, #1
 8005d64:	7621      	strb	r1, [r4, #24]
 8005d66:	f000 fb27 	bl	80063b8 <memchr>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d040      	beq.n	8005df0 <_vfiprintf_r+0x210>
 8005d6e:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <_vfiprintf_r+0x230>)
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d122      	bne.n	8005dba <_vfiprintf_r+0x1da>
 8005d74:	2207      	movs	r2, #7
 8005d76:	9b07      	ldr	r3, [sp, #28]
 8005d78:	3307      	adds	r3, #7
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	6963      	ldr	r3, [r4, #20]
 8005d82:	9a04      	ldr	r2, [sp, #16]
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	6163      	str	r3, [r4, #20]
 8005d88:	e762      	b.n	8005c50 <_vfiprintf_r+0x70>
 8005d8a:	4343      	muls	r3, r0
 8005d8c:	002e      	movs	r6, r5
 8005d8e:	2101      	movs	r1, #1
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	e7a4      	b.n	8005cde <_vfiprintf_r+0xfe>
 8005d94:	2300      	movs	r3, #0
 8005d96:	200a      	movs	r0, #10
 8005d98:	0019      	movs	r1, r3
 8005d9a:	3601      	adds	r6, #1
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	7832      	ldrb	r2, [r6, #0]
 8005da0:	1c75      	adds	r5, r6, #1
 8005da2:	3a30      	subs	r2, #48	@ 0x30
 8005da4:	2a09      	cmp	r2, #9
 8005da6:	d903      	bls.n	8005db0 <_vfiprintf_r+0x1d0>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0c8      	beq.n	8005d3e <_vfiprintf_r+0x15e>
 8005dac:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dae:	e7c6      	b.n	8005d3e <_vfiprintf_r+0x15e>
 8005db0:	4341      	muls	r1, r0
 8005db2:	002e      	movs	r6, r5
 8005db4:	2301      	movs	r3, #1
 8005db6:	1889      	adds	r1, r1, r2
 8005db8:	e7f1      	b.n	8005d9e <_vfiprintf_r+0x1be>
 8005dba:	aa07      	add	r2, sp, #28
 8005dbc:	9200      	str	r2, [sp, #0]
 8005dbe:	0021      	movs	r1, r4
 8005dc0:	003a      	movs	r2, r7
 8005dc2:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <_vfiprintf_r+0x234>)
 8005dc4:	9803      	ldr	r0, [sp, #12]
 8005dc6:	e000      	b.n	8005dca <_vfiprintf_r+0x1ea>
 8005dc8:	bf00      	nop
 8005dca:	9004      	str	r0, [sp, #16]
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	d1d6      	bne.n	8005d80 <_vfiprintf_r+0x1a0>
 8005dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd4:	07db      	lsls	r3, r3, #31
 8005dd6:	d405      	bmi.n	8005de4 <_vfiprintf_r+0x204>
 8005dd8:	89bb      	ldrh	r3, [r7, #12]
 8005dda:	059b      	lsls	r3, r3, #22
 8005ddc:	d402      	bmi.n	8005de4 <_vfiprintf_r+0x204>
 8005dde:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005de0:	f7ff fdd0 	bl	8005984 <__retarget_lock_release_recursive>
 8005de4:	89bb      	ldrh	r3, [r7, #12]
 8005de6:	065b      	lsls	r3, r3, #25
 8005de8:	d500      	bpl.n	8005dec <_vfiprintf_r+0x20c>
 8005dea:	e71e      	b.n	8005c2a <_vfiprintf_r+0x4a>
 8005dec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005dee:	e71e      	b.n	8005c2e <_vfiprintf_r+0x4e>
 8005df0:	aa07      	add	r2, sp, #28
 8005df2:	9200      	str	r2, [sp, #0]
 8005df4:	0021      	movs	r1, r4
 8005df6:	003a      	movs	r2, r7
 8005df8:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <_vfiprintf_r+0x234>)
 8005dfa:	9803      	ldr	r0, [sp, #12]
 8005dfc:	f000 f87c 	bl	8005ef8 <_printf_i>
 8005e00:	e7e3      	b.n	8005dca <_vfiprintf_r+0x1ea>
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	0800798c 	.word	0x0800798c
 8005e08:	08007992 	.word	0x08007992
 8005e0c:	08007996 	.word	0x08007996
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005bbb 	.word	0x08005bbb

08005e18 <_printf_common>:
 8005e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e1a:	0016      	movs	r6, r2
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	688a      	ldr	r2, [r1, #8]
 8005e20:	690b      	ldr	r3, [r1, #16]
 8005e22:	000c      	movs	r4, r1
 8005e24:	9000      	str	r0, [sp, #0]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	da00      	bge.n	8005e2c <_printf_common+0x14>
 8005e2a:	0013      	movs	r3, r2
 8005e2c:	0022      	movs	r2, r4
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	3243      	adds	r2, #67	@ 0x43
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	d001      	beq.n	8005e3c <_printf_common+0x24>
 8005e38:	3301      	adds	r3, #1
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	069b      	lsls	r3, r3, #26
 8005e40:	d502      	bpl.n	8005e48 <_printf_common+0x30>
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	3302      	adds	r3, #2
 8005e46:	6033      	str	r3, [r6, #0]
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	2306      	movs	r3, #6
 8005e4c:	0015      	movs	r5, r2
 8005e4e:	401d      	ands	r5, r3
 8005e50:	421a      	tst	r2, r3
 8005e52:	d027      	beq.n	8005ea4 <_printf_common+0x8c>
 8005e54:	0023      	movs	r3, r4
 8005e56:	3343      	adds	r3, #67	@ 0x43
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	4193      	sbcs	r3, r2
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	0692      	lsls	r2, r2, #26
 8005e62:	d430      	bmi.n	8005ec6 <_printf_common+0xae>
 8005e64:	0022      	movs	r2, r4
 8005e66:	9901      	ldr	r1, [sp, #4]
 8005e68:	9800      	ldr	r0, [sp, #0]
 8005e6a:	9d08      	ldr	r5, [sp, #32]
 8005e6c:	3243      	adds	r2, #67	@ 0x43
 8005e6e:	47a8      	blx	r5
 8005e70:	3001      	adds	r0, #1
 8005e72:	d025      	beq.n	8005ec0 <_printf_common+0xa8>
 8005e74:	2206      	movs	r2, #6
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	2500      	movs	r5, #0
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d105      	bne.n	8005e8c <_printf_common+0x74>
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	68e5      	ldr	r5, [r4, #12]
 8005e84:	1aed      	subs	r5, r5, r3
 8005e86:	43eb      	mvns	r3, r5
 8005e88:	17db      	asrs	r3, r3, #31
 8005e8a:	401d      	ands	r5, r3
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	6922      	ldr	r2, [r4, #16]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	dd01      	ble.n	8005e98 <_printf_common+0x80>
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	18ed      	adds	r5, r5, r3
 8005e98:	2600      	movs	r6, #0
 8005e9a:	42b5      	cmp	r5, r6
 8005e9c:	d120      	bne.n	8005ee0 <_printf_common+0xc8>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e010      	b.n	8005ec4 <_printf_common+0xac>
 8005ea2:	3501      	adds	r5, #1
 8005ea4:	68e3      	ldr	r3, [r4, #12]
 8005ea6:	6832      	ldr	r2, [r6, #0]
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	42ab      	cmp	r3, r5
 8005eac:	ddd2      	ble.n	8005e54 <_printf_common+0x3c>
 8005eae:	0022      	movs	r2, r4
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	9901      	ldr	r1, [sp, #4]
 8005eb4:	9800      	ldr	r0, [sp, #0]
 8005eb6:	9f08      	ldr	r7, [sp, #32]
 8005eb8:	3219      	adds	r2, #25
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d1f0      	bne.n	8005ea2 <_printf_common+0x8a>
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	4240      	negs	r0, r0
 8005ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ec6:	2030      	movs	r0, #48	@ 0x30
 8005ec8:	18e1      	adds	r1, r4, r3
 8005eca:	3143      	adds	r1, #67	@ 0x43
 8005ecc:	7008      	strb	r0, [r1, #0]
 8005ece:	0021      	movs	r1, r4
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	3145      	adds	r1, #69	@ 0x45
 8005ed4:	7809      	ldrb	r1, [r1, #0]
 8005ed6:	18a2      	adds	r2, r4, r2
 8005ed8:	3243      	adds	r2, #67	@ 0x43
 8005eda:	3302      	adds	r3, #2
 8005edc:	7011      	strb	r1, [r2, #0]
 8005ede:	e7c1      	b.n	8005e64 <_printf_common+0x4c>
 8005ee0:	0022      	movs	r2, r4
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	9901      	ldr	r1, [sp, #4]
 8005ee6:	9800      	ldr	r0, [sp, #0]
 8005ee8:	9f08      	ldr	r7, [sp, #32]
 8005eea:	321a      	adds	r2, #26
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa8>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d1      	b.n	8005e9a <_printf_common+0x82>
	...

08005ef8 <_printf_i>:
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	b08b      	sub	sp, #44	@ 0x2c
 8005efc:	9206      	str	r2, [sp, #24]
 8005efe:	000a      	movs	r2, r1
 8005f00:	3243      	adds	r2, #67	@ 0x43
 8005f02:	9307      	str	r3, [sp, #28]
 8005f04:	9005      	str	r0, [sp, #20]
 8005f06:	9203      	str	r2, [sp, #12]
 8005f08:	7e0a      	ldrb	r2, [r1, #24]
 8005f0a:	000c      	movs	r4, r1
 8005f0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f0e:	2a78      	cmp	r2, #120	@ 0x78
 8005f10:	d809      	bhi.n	8005f26 <_printf_i+0x2e>
 8005f12:	2a62      	cmp	r2, #98	@ 0x62
 8005f14:	d80b      	bhi.n	8005f2e <_printf_i+0x36>
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d100      	bne.n	8005f1c <_printf_i+0x24>
 8005f1a:	e0ba      	b.n	8006092 <_printf_i+0x19a>
 8005f1c:	497a      	ldr	r1, [pc, #488]	@ (8006108 <_printf_i+0x210>)
 8005f1e:	9104      	str	r1, [sp, #16]
 8005f20:	2a58      	cmp	r2, #88	@ 0x58
 8005f22:	d100      	bne.n	8005f26 <_printf_i+0x2e>
 8005f24:	e08e      	b.n	8006044 <_printf_i+0x14c>
 8005f26:	0025      	movs	r5, r4
 8005f28:	3542      	adds	r5, #66	@ 0x42
 8005f2a:	702a      	strb	r2, [r5, #0]
 8005f2c:	e022      	b.n	8005f74 <_printf_i+0x7c>
 8005f2e:	0010      	movs	r0, r2
 8005f30:	3863      	subs	r0, #99	@ 0x63
 8005f32:	2815      	cmp	r0, #21
 8005f34:	d8f7      	bhi.n	8005f26 <_printf_i+0x2e>
 8005f36:	f7fa f8ed 	bl	8000114 <__gnu_thumb1_case_shi>
 8005f3a:	0016      	.short	0x0016
 8005f3c:	fff6001f 	.word	0xfff6001f
 8005f40:	fff6fff6 	.word	0xfff6fff6
 8005f44:	001ffff6 	.word	0x001ffff6
 8005f48:	fff6fff6 	.word	0xfff6fff6
 8005f4c:	fff6fff6 	.word	0xfff6fff6
 8005f50:	0036009f 	.word	0x0036009f
 8005f54:	fff6007e 	.word	0xfff6007e
 8005f58:	00b0fff6 	.word	0x00b0fff6
 8005f5c:	0036fff6 	.word	0x0036fff6
 8005f60:	fff6fff6 	.word	0xfff6fff6
 8005f64:	0082      	.short	0x0082
 8005f66:	0025      	movs	r5, r4
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	3542      	adds	r5, #66	@ 0x42
 8005f6c:	1d11      	adds	r1, r2, #4
 8005f6e:	6019      	str	r1, [r3, #0]
 8005f70:	6813      	ldr	r3, [r2, #0]
 8005f72:	702b      	strb	r3, [r5, #0]
 8005f74:	2301      	movs	r3, #1
 8005f76:	e09e      	b.n	80060b6 <_printf_i+0x1be>
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	6809      	ldr	r1, [r1, #0]
 8005f7c:	1d02      	adds	r2, r0, #4
 8005f7e:	060d      	lsls	r5, r1, #24
 8005f80:	d50b      	bpl.n	8005f9a <_printf_i+0xa2>
 8005f82:	6806      	ldr	r6, [r0, #0]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	da03      	bge.n	8005f92 <_printf_i+0x9a>
 8005f8a:	232d      	movs	r3, #45	@ 0x2d
 8005f8c:	9a03      	ldr	r2, [sp, #12]
 8005f8e:	4276      	negs	r6, r6
 8005f90:	7013      	strb	r3, [r2, #0]
 8005f92:	4b5d      	ldr	r3, [pc, #372]	@ (8006108 <_printf_i+0x210>)
 8005f94:	270a      	movs	r7, #10
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	e018      	b.n	8005fcc <_printf_i+0xd4>
 8005f9a:	6806      	ldr	r6, [r0, #0]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	0649      	lsls	r1, r1, #25
 8005fa0:	d5f1      	bpl.n	8005f86 <_printf_i+0x8e>
 8005fa2:	b236      	sxth	r6, r6
 8005fa4:	e7ef      	b.n	8005f86 <_printf_i+0x8e>
 8005fa6:	6808      	ldr	r0, [r1, #0]
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	c940      	ldmia	r1!, {r6}
 8005fac:	0605      	lsls	r5, r0, #24
 8005fae:	d402      	bmi.n	8005fb6 <_printf_i+0xbe>
 8005fb0:	0640      	lsls	r0, r0, #25
 8005fb2:	d500      	bpl.n	8005fb6 <_printf_i+0xbe>
 8005fb4:	b2b6      	uxth	r6, r6
 8005fb6:	6019      	str	r1, [r3, #0]
 8005fb8:	4b53      	ldr	r3, [pc, #332]	@ (8006108 <_printf_i+0x210>)
 8005fba:	270a      	movs	r7, #10
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	2a6f      	cmp	r2, #111	@ 0x6f
 8005fc0:	d100      	bne.n	8005fc4 <_printf_i+0xcc>
 8005fc2:	3f02      	subs	r7, #2
 8005fc4:	0023      	movs	r3, r4
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	3343      	adds	r3, #67	@ 0x43
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db06      	blt.n	8005fe2 <_printf_i+0xea>
 8005fd4:	2104      	movs	r1, #4
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	9d03      	ldr	r5, [sp, #12]
 8005fda:	438a      	bics	r2, r1
 8005fdc:	6022      	str	r2, [r4, #0]
 8005fde:	4333      	orrs	r3, r6
 8005fe0:	d00c      	beq.n	8005ffc <_printf_i+0x104>
 8005fe2:	9d03      	ldr	r5, [sp, #12]
 8005fe4:	0030      	movs	r0, r6
 8005fe6:	0039      	movs	r1, r7
 8005fe8:	f7fa f924 	bl	8000234 <__aeabi_uidivmod>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	3d01      	subs	r5, #1
 8005ff0:	5c5b      	ldrb	r3, [r3, r1]
 8005ff2:	702b      	strb	r3, [r5, #0]
 8005ff4:	0033      	movs	r3, r6
 8005ff6:	0006      	movs	r6, r0
 8005ff8:	429f      	cmp	r7, r3
 8005ffa:	d9f3      	bls.n	8005fe4 <_printf_i+0xec>
 8005ffc:	2f08      	cmp	r7, #8
 8005ffe:	d109      	bne.n	8006014 <_printf_i+0x11c>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	07db      	lsls	r3, r3, #31
 8006004:	d506      	bpl.n	8006014 <_printf_i+0x11c>
 8006006:	6862      	ldr	r2, [r4, #4]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	dc02      	bgt.n	8006014 <_printf_i+0x11c>
 800600e:	2330      	movs	r3, #48	@ 0x30
 8006010:	3d01      	subs	r5, #1
 8006012:	702b      	strb	r3, [r5, #0]
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	1b5b      	subs	r3, r3, r5
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	9b07      	ldr	r3, [sp, #28]
 800601c:	0021      	movs	r1, r4
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	9805      	ldr	r0, [sp, #20]
 8006022:	9b06      	ldr	r3, [sp, #24]
 8006024:	aa09      	add	r2, sp, #36	@ 0x24
 8006026:	f7ff fef7 	bl	8005e18 <_printf_common>
 800602a:	3001      	adds	r0, #1
 800602c:	d148      	bne.n	80060c0 <_printf_i+0x1c8>
 800602e:	2001      	movs	r0, #1
 8006030:	4240      	negs	r0, r0
 8006032:	b00b      	add	sp, #44	@ 0x2c
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	2220      	movs	r2, #32
 8006038:	6809      	ldr	r1, [r1, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	2278      	movs	r2, #120	@ 0x78
 8006040:	4932      	ldr	r1, [pc, #200]	@ (800610c <_printf_i+0x214>)
 8006042:	9104      	str	r1, [sp, #16]
 8006044:	0021      	movs	r1, r4
 8006046:	3145      	adds	r1, #69	@ 0x45
 8006048:	700a      	strb	r2, [r1, #0]
 800604a:	6819      	ldr	r1, [r3, #0]
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	c940      	ldmia	r1!, {r6}
 8006050:	0610      	lsls	r0, r2, #24
 8006052:	d402      	bmi.n	800605a <_printf_i+0x162>
 8006054:	0650      	lsls	r0, r2, #25
 8006056:	d500      	bpl.n	800605a <_printf_i+0x162>
 8006058:	b2b6      	uxth	r6, r6
 800605a:	6019      	str	r1, [r3, #0]
 800605c:	07d3      	lsls	r3, r2, #31
 800605e:	d502      	bpl.n	8006066 <_printf_i+0x16e>
 8006060:	2320      	movs	r3, #32
 8006062:	4313      	orrs	r3, r2
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	2e00      	cmp	r6, #0
 8006068:	d001      	beq.n	800606e <_printf_i+0x176>
 800606a:	2710      	movs	r7, #16
 800606c:	e7aa      	b.n	8005fc4 <_printf_i+0xcc>
 800606e:	2220      	movs	r2, #32
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	4393      	bics	r3, r2
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	e7f8      	b.n	800606a <_printf_i+0x172>
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	680d      	ldr	r5, [r1, #0]
 800607c:	1d10      	adds	r0, r2, #4
 800607e:	6949      	ldr	r1, [r1, #20]
 8006080:	6018      	str	r0, [r3, #0]
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	062e      	lsls	r6, r5, #24
 8006086:	d501      	bpl.n	800608c <_printf_i+0x194>
 8006088:	6019      	str	r1, [r3, #0]
 800608a:	e002      	b.n	8006092 <_printf_i+0x19a>
 800608c:	066d      	lsls	r5, r5, #25
 800608e:	d5fb      	bpl.n	8006088 <_printf_i+0x190>
 8006090:	8019      	strh	r1, [r3, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	9d03      	ldr	r5, [sp, #12]
 8006096:	6123      	str	r3, [r4, #16]
 8006098:	e7bf      	b.n	800601a <_printf_i+0x122>
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	1d11      	adds	r1, r2, #4
 800609e:	6019      	str	r1, [r3, #0]
 80060a0:	6815      	ldr	r5, [r2, #0]
 80060a2:	2100      	movs	r1, #0
 80060a4:	0028      	movs	r0, r5
 80060a6:	6862      	ldr	r2, [r4, #4]
 80060a8:	f000 f986 	bl	80063b8 <memchr>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d001      	beq.n	80060b4 <_printf_i+0x1bc>
 80060b0:	1b40      	subs	r0, r0, r5
 80060b2:	6060      	str	r0, [r4, #4]
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	2300      	movs	r3, #0
 80060ba:	9a03      	ldr	r2, [sp, #12]
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	e7ac      	b.n	800601a <_printf_i+0x122>
 80060c0:	002a      	movs	r2, r5
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	9906      	ldr	r1, [sp, #24]
 80060c6:	9805      	ldr	r0, [sp, #20]
 80060c8:	9d07      	ldr	r5, [sp, #28]
 80060ca:	47a8      	blx	r5
 80060cc:	3001      	adds	r0, #1
 80060ce:	d0ae      	beq.n	800602e <_printf_i+0x136>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	079b      	lsls	r3, r3, #30
 80060d4:	d415      	bmi.n	8006102 <_printf_i+0x20a>
 80060d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d8:	68e0      	ldr	r0, [r4, #12]
 80060da:	4298      	cmp	r0, r3
 80060dc:	daa9      	bge.n	8006032 <_printf_i+0x13a>
 80060de:	0018      	movs	r0, r3
 80060e0:	e7a7      	b.n	8006032 <_printf_i+0x13a>
 80060e2:	0022      	movs	r2, r4
 80060e4:	2301      	movs	r3, #1
 80060e6:	9906      	ldr	r1, [sp, #24]
 80060e8:	9805      	ldr	r0, [sp, #20]
 80060ea:	9e07      	ldr	r6, [sp, #28]
 80060ec:	3219      	adds	r2, #25
 80060ee:	47b0      	blx	r6
 80060f0:	3001      	adds	r0, #1
 80060f2:	d09c      	beq.n	800602e <_printf_i+0x136>
 80060f4:	3501      	adds	r5, #1
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	42ab      	cmp	r3, r5
 80060fe:	dcf0      	bgt.n	80060e2 <_printf_i+0x1ea>
 8006100:	e7e9      	b.n	80060d6 <_printf_i+0x1de>
 8006102:	2500      	movs	r5, #0
 8006104:	e7f7      	b.n	80060f6 <_printf_i+0x1fe>
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	0800799d 	.word	0x0800799d
 800610c:	080079ae 	.word	0x080079ae

08006110 <__sflush_r>:
 8006110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006112:	220c      	movs	r2, #12
 8006114:	5e8b      	ldrsh	r3, [r1, r2]
 8006116:	0005      	movs	r5, r0
 8006118:	000c      	movs	r4, r1
 800611a:	071a      	lsls	r2, r3, #28
 800611c:	d456      	bmi.n	80061cc <__sflush_r+0xbc>
 800611e:	684a      	ldr	r2, [r1, #4]
 8006120:	2a00      	cmp	r2, #0
 8006122:	dc02      	bgt.n	800612a <__sflush_r+0x1a>
 8006124:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006126:	2a00      	cmp	r2, #0
 8006128:	dd4e      	ble.n	80061c8 <__sflush_r+0xb8>
 800612a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800612c:	2f00      	cmp	r7, #0
 800612e:	d04b      	beq.n	80061c8 <__sflush_r+0xb8>
 8006130:	2200      	movs	r2, #0
 8006132:	2080      	movs	r0, #128	@ 0x80
 8006134:	682e      	ldr	r6, [r5, #0]
 8006136:	602a      	str	r2, [r5, #0]
 8006138:	001a      	movs	r2, r3
 800613a:	0140      	lsls	r0, r0, #5
 800613c:	6a21      	ldr	r1, [r4, #32]
 800613e:	4002      	ands	r2, r0
 8006140:	4203      	tst	r3, r0
 8006142:	d033      	beq.n	80061ac <__sflush_r+0x9c>
 8006144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	075b      	lsls	r3, r3, #29
 800614a:	d506      	bpl.n	800615a <__sflush_r+0x4a>
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <__sflush_r+0x4a>
 8006156:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	0028      	movs	r0, r5
 800615e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006160:	6a21      	ldr	r1, [r4, #32]
 8006162:	47b8      	blx	r7
 8006164:	89a2      	ldrh	r2, [r4, #12]
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d106      	bne.n	8006178 <__sflush_r+0x68>
 800616a:	6829      	ldr	r1, [r5, #0]
 800616c:	291d      	cmp	r1, #29
 800616e:	d846      	bhi.n	80061fe <__sflush_r+0xee>
 8006170:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <__sflush_r+0x108>)
 8006172:	40cb      	lsrs	r3, r1
 8006174:	07db      	lsls	r3, r3, #31
 8006176:	d542      	bpl.n	80061fe <__sflush_r+0xee>
 8006178:	2300      	movs	r3, #0
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	04d2      	lsls	r2, r2, #19
 8006182:	d505      	bpl.n	8006190 <__sflush_r+0x80>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <__sflush_r+0x7e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d100      	bne.n	8006190 <__sflush_r+0x80>
 800618e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006192:	602e      	str	r6, [r5, #0]
 8006194:	2900      	cmp	r1, #0
 8006196:	d017      	beq.n	80061c8 <__sflush_r+0xb8>
 8006198:	0023      	movs	r3, r4
 800619a:	3344      	adds	r3, #68	@ 0x44
 800619c:	4299      	cmp	r1, r3
 800619e:	d002      	beq.n	80061a6 <__sflush_r+0x96>
 80061a0:	0028      	movs	r0, r5
 80061a2:	f7ff fbf9 	bl	8005998 <_free_r>
 80061a6:	2300      	movs	r3, #0
 80061a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061aa:	e00d      	b.n	80061c8 <__sflush_r+0xb8>
 80061ac:	2301      	movs	r3, #1
 80061ae:	0028      	movs	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	0002      	movs	r2, r0
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d1c6      	bne.n	8006146 <__sflush_r+0x36>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0c3      	beq.n	8006146 <__sflush_r+0x36>
 80061be:	2b1d      	cmp	r3, #29
 80061c0:	d001      	beq.n	80061c6 <__sflush_r+0xb6>
 80061c2:	2b16      	cmp	r3, #22
 80061c4:	d11a      	bne.n	80061fc <__sflush_r+0xec>
 80061c6:	602e      	str	r6, [r5, #0]
 80061c8:	2000      	movs	r0, #0
 80061ca:	e01e      	b.n	800620a <__sflush_r+0xfa>
 80061cc:	690e      	ldr	r6, [r1, #16]
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	d0fa      	beq.n	80061c8 <__sflush_r+0xb8>
 80061d2:	680f      	ldr	r7, [r1, #0]
 80061d4:	600e      	str	r6, [r1, #0]
 80061d6:	1bba      	subs	r2, r7, r6
 80061d8:	9201      	str	r2, [sp, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	079b      	lsls	r3, r3, #30
 80061de:	d100      	bne.n	80061e2 <__sflush_r+0xd2>
 80061e0:	694a      	ldr	r2, [r1, #20]
 80061e2:	60a2      	str	r2, [r4, #8]
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	ddee      	ble.n	80061c8 <__sflush_r+0xb8>
 80061ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061ec:	0032      	movs	r2, r6
 80061ee:	001f      	movs	r7, r3
 80061f0:	0028      	movs	r0, r5
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	6a21      	ldr	r1, [r4, #32]
 80061f6:	47b8      	blx	r7
 80061f8:	2800      	cmp	r0, #0
 80061fa:	dc07      	bgt.n	800620c <__sflush_r+0xfc>
 80061fc:	89a2      	ldrh	r2, [r4, #12]
 80061fe:	2340      	movs	r3, #64	@ 0x40
 8006200:	2001      	movs	r0, #1
 8006202:	4313      	orrs	r3, r2
 8006204:	b21b      	sxth	r3, r3
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	4240      	negs	r0, r0
 800620a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	1836      	adds	r6, r6, r0
 8006210:	1a1b      	subs	r3, r3, r0
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	e7e6      	b.n	80061e4 <__sflush_r+0xd4>
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	20400001 	.word	0x20400001

0800621c <_fflush_r>:
 800621c:	690b      	ldr	r3, [r1, #16]
 800621e:	b570      	push	{r4, r5, r6, lr}
 8006220:	0005      	movs	r5, r0
 8006222:	000c      	movs	r4, r1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <_fflush_r+0x12>
 8006228:	2500      	movs	r5, #0
 800622a:	0028      	movs	r0, r5
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	2800      	cmp	r0, #0
 8006230:	d004      	beq.n	800623c <_fflush_r+0x20>
 8006232:	6a03      	ldr	r3, [r0, #32]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <_fflush_r+0x20>
 8006238:	f7ff f992 	bl	8005560 <__sinit>
 800623c:	220c      	movs	r2, #12
 800623e:	5ea3      	ldrsh	r3, [r4, r2]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f1      	beq.n	8006228 <_fflush_r+0xc>
 8006244:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006246:	07d2      	lsls	r2, r2, #31
 8006248:	d404      	bmi.n	8006254 <_fflush_r+0x38>
 800624a:	059b      	lsls	r3, r3, #22
 800624c:	d402      	bmi.n	8006254 <_fflush_r+0x38>
 800624e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006250:	f7ff fb97 	bl	8005982 <__retarget_lock_acquire_recursive>
 8006254:	0028      	movs	r0, r5
 8006256:	0021      	movs	r1, r4
 8006258:	f7ff ff5a 	bl	8006110 <__sflush_r>
 800625c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800625e:	0005      	movs	r5, r0
 8006260:	07db      	lsls	r3, r3, #31
 8006262:	d4e2      	bmi.n	800622a <_fflush_r+0xe>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	059b      	lsls	r3, r3, #22
 8006268:	d4df      	bmi.n	800622a <_fflush_r+0xe>
 800626a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800626c:	f7ff fb8a 	bl	8005984 <__retarget_lock_release_recursive>
 8006270:	e7db      	b.n	800622a <_fflush_r+0xe>
	...

08006274 <__swhatbuf_r>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	000e      	movs	r6, r1
 8006278:	001d      	movs	r5, r3
 800627a:	230e      	movs	r3, #14
 800627c:	5ec9      	ldrsh	r1, [r1, r3]
 800627e:	0014      	movs	r4, r2
 8006280:	b096      	sub	sp, #88	@ 0x58
 8006282:	2900      	cmp	r1, #0
 8006284:	da0c      	bge.n	80062a0 <__swhatbuf_r+0x2c>
 8006286:	89b2      	ldrh	r2, [r6, #12]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	0011      	movs	r1, r2
 800628c:	4019      	ands	r1, r3
 800628e:	421a      	tst	r2, r3
 8006290:	d114      	bne.n	80062bc <__swhatbuf_r+0x48>
 8006292:	2380      	movs	r3, #128	@ 0x80
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	2000      	movs	r0, #0
 8006298:	6029      	str	r1, [r5, #0]
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	b016      	add	sp, #88	@ 0x58
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	466a      	mov	r2, sp
 80062a2:	f000 f853 	bl	800634c <_fstat_r>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	dbed      	blt.n	8006286 <__swhatbuf_r+0x12>
 80062aa:	23f0      	movs	r3, #240	@ 0xf0
 80062ac:	9901      	ldr	r1, [sp, #4]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	4019      	ands	r1, r3
 80062b2:	4b04      	ldr	r3, [pc, #16]	@ (80062c4 <__swhatbuf_r+0x50>)
 80062b4:	18c9      	adds	r1, r1, r3
 80062b6:	424b      	negs	r3, r1
 80062b8:	4159      	adcs	r1, r3
 80062ba:	e7ea      	b.n	8006292 <__swhatbuf_r+0x1e>
 80062bc:	2100      	movs	r1, #0
 80062be:	2340      	movs	r3, #64	@ 0x40
 80062c0:	e7e9      	b.n	8006296 <__swhatbuf_r+0x22>
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	ffffe000 	.word	0xffffe000

080062c8 <__smakebuf_r>:
 80062c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ca:	2602      	movs	r6, #2
 80062cc:	898b      	ldrh	r3, [r1, #12]
 80062ce:	0005      	movs	r5, r0
 80062d0:	000c      	movs	r4, r1
 80062d2:	b085      	sub	sp, #20
 80062d4:	4233      	tst	r3, r6
 80062d6:	d007      	beq.n	80062e8 <__smakebuf_r+0x20>
 80062d8:	0023      	movs	r3, r4
 80062da:	3347      	adds	r3, #71	@ 0x47
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	2301      	movs	r3, #1
 80062e2:	6163      	str	r3, [r4, #20]
 80062e4:	b005      	add	sp, #20
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e8:	ab03      	add	r3, sp, #12
 80062ea:	aa02      	add	r2, sp, #8
 80062ec:	f7ff ffc2 	bl	8006274 <__swhatbuf_r>
 80062f0:	9f02      	ldr	r7, [sp, #8]
 80062f2:	9001      	str	r0, [sp, #4]
 80062f4:	0039      	movs	r1, r7
 80062f6:	0028      	movs	r0, r5
 80062f8:	f7ff fbba 	bl	8005a70 <_malloc_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d108      	bne.n	8006312 <__smakebuf_r+0x4a>
 8006300:	220c      	movs	r2, #12
 8006302:	5ea3      	ldrsh	r3, [r4, r2]
 8006304:	059a      	lsls	r2, r3, #22
 8006306:	d4ed      	bmi.n	80062e4 <__smakebuf_r+0x1c>
 8006308:	2203      	movs	r2, #3
 800630a:	4393      	bics	r3, r2
 800630c:	431e      	orrs	r6, r3
 800630e:	81a6      	strh	r6, [r4, #12]
 8006310:	e7e2      	b.n	80062d8 <__smakebuf_r+0x10>
 8006312:	2380      	movs	r3, #128	@ 0x80
 8006314:	89a2      	ldrh	r2, [r4, #12]
 8006316:	6020      	str	r0, [r4, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	6120      	str	r0, [r4, #16]
 8006320:	6167      	str	r7, [r4, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00c      	beq.n	8006340 <__smakebuf_r+0x78>
 8006326:	0028      	movs	r0, r5
 8006328:	230e      	movs	r3, #14
 800632a:	5ee1      	ldrsh	r1, [r4, r3]
 800632c:	f000 f820 	bl	8006370 <_isatty_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	d005      	beq.n	8006340 <__smakebuf_r+0x78>
 8006334:	2303      	movs	r3, #3
 8006336:	89a2      	ldrh	r2, [r4, #12]
 8006338:	439a      	bics	r2, r3
 800633a:	3b02      	subs	r3, #2
 800633c:	4313      	orrs	r3, r2
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	9a01      	ldr	r2, [sp, #4]
 8006344:	4313      	orrs	r3, r2
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	e7cc      	b.n	80062e4 <__smakebuf_r+0x1c>
	...

0800634c <_fstat_r>:
 800634c:	2300      	movs	r3, #0
 800634e:	b570      	push	{r4, r5, r6, lr}
 8006350:	4d06      	ldr	r5, [pc, #24]	@ (800636c <_fstat_r+0x20>)
 8006352:	0004      	movs	r4, r0
 8006354:	0008      	movs	r0, r1
 8006356:	0011      	movs	r1, r2
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	f7fc f997 	bl	800268c <_fstat>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	d103      	bne.n	800636a <_fstat_r+0x1e>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d000      	beq.n	800636a <_fstat_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	200003c0 	.word	0x200003c0

08006370 <_isatty_r>:
 8006370:	2300      	movs	r3, #0
 8006372:	b570      	push	{r4, r5, r6, lr}
 8006374:	4d06      	ldr	r5, [pc, #24]	@ (8006390 <_isatty_r+0x20>)
 8006376:	0004      	movs	r4, r0
 8006378:	0008      	movs	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fc f994 	bl	80026a8 <_isatty>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d103      	bne.n	800638c <_isatty_r+0x1c>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d000      	beq.n	800638c <_isatty_r+0x1c>
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	bd70      	pop	{r4, r5, r6, pc}
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	200003c0 	.word	0x200003c0

08006394 <_sbrk_r>:
 8006394:	2300      	movs	r3, #0
 8006396:	b570      	push	{r4, r5, r6, lr}
 8006398:	4d06      	ldr	r5, [pc, #24]	@ (80063b4 <_sbrk_r+0x20>)
 800639a:	0004      	movs	r4, r0
 800639c:	0008      	movs	r0, r1
 800639e:	602b      	str	r3, [r5, #0]
 80063a0:	f7fc f996 	bl	80026d0 <_sbrk>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d103      	bne.n	80063b0 <_sbrk_r+0x1c>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d000      	beq.n	80063b0 <_sbrk_r+0x1c>
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	bd70      	pop	{r4, r5, r6, pc}
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	200003c0 	.word	0x200003c0

080063b8 <memchr>:
 80063b8:	b2c9      	uxtb	r1, r1
 80063ba:	1882      	adds	r2, r0, r2
 80063bc:	4290      	cmp	r0, r2
 80063be:	d101      	bne.n	80063c4 <memchr+0xc>
 80063c0:	2000      	movs	r0, #0
 80063c2:	4770      	bx	lr
 80063c4:	7803      	ldrb	r3, [r0, #0]
 80063c6:	428b      	cmp	r3, r1
 80063c8:	d0fb      	beq.n	80063c2 <memchr+0xa>
 80063ca:	3001      	adds	r0, #1
 80063cc:	e7f6      	b.n	80063bc <memchr+0x4>
	...

080063d0 <_init>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	46c0      	nop			@ (mov r8, r8)
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr

080063dc <_fini>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr
