
hareket_ve_ben.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001fb8  08001fb8  00002fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd4  08001fd4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001fd4  08001fd4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001fd4  08001fd4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd4  08001fd4  00002fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fd8  08001fd8  00002fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fdc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08001fe8  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001fe8  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000712f  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001627  00000000  00000000  0000a163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0000b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000627  00000000  00000000  0000bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012794  00000000  00000000  0000c5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093c2  00000000  00000000  0001ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074461  00000000  00000000  0002812d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c58e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c48  00000000  00000000  0009c5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0009e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fa0 	.word	0x08001fa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001fa0 	.word	0x08001fa0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <pyd_init>:
	    uint32_t window_time,
	    uint32_t op_mode,
	    uint32_t signal_src,
	    uint32_t hpf_cutoff,
	    uint32_t count_mode)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	603b      	str	r3, [r7, #0]
    uint32_t config = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

    config |= PYD_THRESHOLD(threshold);
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	045a      	lsls	r2, r3, #17
 8000236:	23ff      	movs	r3, #255	@ 0xff
 8000238:	045b      	lsls	r3, r3, #17
 800023a:	4013      	ands	r3, r2
 800023c:	697a      	ldr	r2, [r7, #20]
 800023e:	4313      	orrs	r3, r2
 8000240:	617b      	str	r3, [r7, #20]
    config |= blind_time;
 8000242:	697a      	ldr	r2, [r7, #20]
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	4313      	orrs	r3, r2
 8000248:	617b      	str	r3, [r7, #20]
    config |= pulse_count;
 800024a:	697a      	ldr	r2, [r7, #20]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4313      	orrs	r3, r2
 8000250:	617b      	str	r3, [r7, #20]
    config |= window_time;
 8000252:	697a      	ldr	r2, [r7, #20]
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	4313      	orrs	r3, r2
 8000258:	617b      	str	r3, [r7, #20]
    config |= op_mode;
 800025a:	697a      	ldr	r2, [r7, #20]
 800025c:	6a3b      	ldr	r3, [r7, #32]
 800025e:	4313      	orrs	r3, r2
 8000260:	617b      	str	r3, [r7, #20]
    config |= signal_src;
 8000262:	697a      	ldr	r2, [r7, #20]
 8000264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000266:	4313      	orrs	r3, r2
 8000268:	617b      	str	r3, [r7, #20]
    config |= PYD_RESERVED_BITS;
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	2210      	movs	r2, #16
 800026e:	4313      	orrs	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
    config |= hpf_cutoff;
 8000272:	697a      	ldr	r2, [r7, #20]
 8000274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000276:	4313      	orrs	r3, r2
 8000278:	617b      	str	r3, [r7, #20]
    config |= PYD_RESERVED1_BIT;
    config |= count_mode;
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800027e:	4313      	orrs	r3, r2
 8000280:	617b      	str	r3, [r7, #20]

    pyd_write_config(config);
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	0018      	movs	r0, r3
 8000286:	f000 f817 	bl	80002b8 <pyd_write_config>


}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b006      	add	sp, #24
 8000290:	bd80      	pop	{r7, pc}

08000292 <pyd_set_DL_low>:



static inline void pyd_set_DL_low(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
    PYD_DIRECT_PORT->BSRR = ((uint32_t)PYD_DIRECT_PIN << 16U);
 8000296:	23a0      	movs	r3, #160	@ 0xa0
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	0252      	lsls	r2, r2, #9
 800029e:	619a      	str	r2, [r3, #24]
}
 80002a0:	46c0      	nop			@ (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <pyd_set_DL_high>:

static inline void pyd_set_DL_high(void){
 80002a6:	b580      	push	{r7, lr}
 80002a8:	af00      	add	r7, sp, #0

	PYD_DIRECT_PORT->BSRR = (uint32_t)PYD_DIRECT_PIN;
 80002aa:	23a0      	movs	r3, #160	@ 0xa0
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	2201      	movs	r2, #1
 80002b0:	619a      	str	r2, [r3, #24]

}
 80002b2:	46c0      	nop			@ (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <pyd_write_config>:


void pyd_write_config(uint32_t config)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

    DL_OUTPUT_MODE();
 80002c0:	23a0      	movs	r3, #160	@ 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	23a0      	movs	r3, #160	@ 0xa0
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2103      	movs	r1, #3
 80002cc:	438a      	bics	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	23a0      	movs	r3, #160	@ 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	23a0      	movs	r3, #160	@ 0xa0
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2101      	movs	r1, #1
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
	pyd_set_DL_low();
 80002e0:	f7ff ffd7 	bl	8000292 <pyd_set_DL_low>

    uint32_t mask = 1UL << 24; // 25 bit MSB ilk
 80002e4:	2380      	movs	r3, #128	@ 0x80
 80002e6:	045b      	lsls	r3, r3, #17
 80002e8:	617b      	str	r3, [r7, #20]


    for (int i = 0; i < 25; i++) {
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
 80002ee:	e027      	b.n	8000340 <pyd_write_config+0x88>
        // 1. LOW → HIGH geçişi
        HAL_GPIO_WritePin(PYD_SERIN_PORT, PYD_SERIN_PIN, GPIO_PIN_RESET);
 80002f0:	23a0      	movs	r3, #160	@ 0xa0
 80002f2:	05db      	lsls	r3, r3, #23
 80002f4:	2200      	movs	r2, #0
 80002f6:	2102      	movs	r1, #2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fde6 	bl	8000eca <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PYD_SERIN_PORT, PYD_SERIN_PIN, GPIO_PIN_SET);
 80002fe:	23a0      	movs	r3, #160	@ 0xa0
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2201      	movs	r2, #1
 8000304:	2102      	movs	r1, #2
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fddf 	bl	8000eca <HAL_GPIO_WritePin>


        GPIO_PinState bit = (config & mask) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4013      	ands	r3, r2
 8000312:	1e5a      	subs	r2, r3, #1
 8000314:	4193      	sbcs	r3, r2
 8000316:	b2da      	uxtb	r2, r3
 8000318:	210f      	movs	r1, #15
 800031a:	187b      	adds	r3, r7, r1
 800031c:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(PYD_SERIN_PORT, PYD_SERIN_PIN, bit);
 800031e:	187b      	adds	r3, r7, r1
 8000320:	781a      	ldrb	r2, [r3, #0]
 8000322:	23a0      	movs	r3, #160	@ 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2102      	movs	r1, #2
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fdce 	bl	8000eca <HAL_GPIO_WritePin>
        pyd_delay_us(80);
 800032e:	2050      	movs	r0, #80	@ 0x50
 8000330:	f000 f8a8 	bl	8000484 <pyd_delay_us>

        mask >>= 1;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	085b      	lsrs	r3, r3, #1
 8000338:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 25; i++) {
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	3301      	adds	r3, #1
 800033e:	613b      	str	r3, [r7, #16]
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	2b18      	cmp	r3, #24
 8000344:	ddd4      	ble.n	80002f0 <pyd_write_config+0x38>

    }

    HAL_GPIO_WritePin(PYD_SERIN_PORT, PYD_SERIN_PIN, GPIO_PIN_RESET);
 8000346:	23a0      	movs	r3, #160	@ 0xa0
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2200      	movs	r2, #0
 800034c:	2102      	movs	r1, #2
 800034e:	0018      	movs	r0, r3
 8000350:	f000 fdbb 	bl	8000eca <HAL_GPIO_WritePin>
//    pyd_delay_us(650);

    pyd_delay_us(2400);
 8000354:	2396      	movs	r3, #150	@ 0x96
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	0018      	movs	r0, r3
 800035a:	f000 f893 	bl	8000484 <pyd_delay_us>
    //pyd_SI_unselect();

    DL_INPUT_MODE();
 800035e:	23a0      	movs	r3, #160	@ 0xa0
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	23a0      	movs	r3, #160	@ 0xa0
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2103      	movs	r1, #3
 800036a:	438a      	bics	r2, r1
 800036c:	601a      	str	r2, [r3, #0]

}
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b006      	add	sp, #24
 8000374:	bd80      	pop	{r7, pc}

08000376 <pyd_try_read_data_if_valid>:

uint64_t pyd_try_read_data_if_valid(void)
{
 8000376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000378:	b089      	sub	sp, #36	@ 0x24
 800037a:	af00      	add	r7, sp, #0
    uint64_t data = 0;
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	61ba      	str	r2, [r7, #24]
 8000382:	61fb      	str	r3, [r7, #28]

    pyd_delay_us(130);
 8000384:	2082      	movs	r0, #130	@ 0x82
 8000386:	f000 f87d 	bl	8000484 <pyd_delay_us>


	uint64_t bit_mask = 1ULL << 39; // 40 bit MSB ilk
 800038a:	2200      	movs	r2, #0
 800038c:	2380      	movs	r3, #128	@ 0x80
 800038e:	613a      	str	r2, [r7, #16]
 8000390:	617b      	str	r3, [r7, #20]


    for (int i = 0; i < 40; i++)
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	e04e      	b.n	8000436 <pyd_try_read_data_if_valid+0xc0>
    {

		DL_OUTPUT_MODE();
 8000398:	23a0      	movs	r3, #160	@ 0xa0
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	23a0      	movs	r3, #160	@ 0xa0
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	2103      	movs	r1, #3
 80003a4:	438a      	bics	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	23a0      	movs	r3, #160	@ 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	23a0      	movs	r3, #160	@ 0xa0
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	2101      	movs	r1, #1
 80003b4:	430a      	orrs	r2, r1
 80003b6:	601a      	str	r2, [r3, #0]
		pyd_set_DL_low();
 80003b8:	f7ff ff6b 	bl	8000292 <pyd_set_DL_low>
    	pyd_delay_us(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 f861 	bl	8000484 <pyd_delay_us>

    	pyd_set_DL_high();
 80003c2:	f7ff ff70 	bl	80002a6 <pyd_set_DL_high>
        pyd_delay_us(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f000 f85c 	bl	8000484 <pyd_delay_us>

        DL_INPUT_MODE();
 80003cc:	23a0      	movs	r3, #160	@ 0xa0
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	23a0      	movs	r3, #160	@ 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	2103      	movs	r1, #3
 80003d8:	438a      	bics	r2, r1
 80003da:	601a      	str	r2, [r3, #0]
        pyd_delay_us(5);
 80003dc:	2005      	movs	r0, #5
 80003de:	f000 f851 	bl	8000484 <pyd_delay_us>


    	GPIO_PinState bit = HAL_GPIO_ReadPin(PYD_DIRECT_PORT, PYD_DIRECT_PIN);
 80003e2:	230b      	movs	r3, #11
 80003e4:	18fe      	adds	r6, r7, r3
 80003e6:	23a0      	movs	r3, #160	@ 0xa0
 80003e8:	05db      	lsls	r3, r3, #23
 80003ea:	2101      	movs	r1, #1
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fd4f 	bl	8000e90 <HAL_GPIO_ReadPin>
 80003f2:	0003      	movs	r3, r0
 80003f4:	7033      	strb	r3, [r6, #0]

    	if(bit == GPIO_PIN_SET)
 80003f6:	230b      	movs	r3, #11
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d10b      	bne.n	8000418 <pyd_try_read_data_if_valid+0xa2>
    	{
            data |= bit_mask;
 8000400:	69ba      	ldr	r2, [r7, #24]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	431a      	orrs	r2, r3
 8000406:	603a      	str	r2, [r7, #0]
 8000408:	69fa      	ldr	r2, [r7, #28]
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	431a      	orrs	r2, r3
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	61ba      	str	r2, [r7, #24]
 8000416:	61fb      	str	r3, [r7, #28]
    	}

        bit_mask >>= 1;
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	07db      	lsls	r3, r3, #31
 800041c:	693a      	ldr	r2, [r7, #16]
 800041e:	0854      	lsrs	r4, r2, #1
 8000420:	431c      	orrs	r4, r3
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	085d      	lsrs	r5, r3, #1
 8000426:	613c      	str	r4, [r7, #16]
 8000428:	617d      	str	r5, [r7, #20]


        pyd_delay_us(14); // tBIT < 22µs
 800042a:	200e      	movs	r0, #14
 800042c:	f000 f82a 	bl	8000484 <pyd_delay_us>
    for (int i = 0; i < 40; i++)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2b27      	cmp	r3, #39	@ 0x27
 800043a:	ddad      	ble.n	8000398 <pyd_try_read_data_if_valid+0x22>


    }

    DL_OUTPUT_MODE();
 800043c:	23a0      	movs	r3, #160	@ 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	23a0      	movs	r3, #160	@ 0xa0
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	2103      	movs	r1, #3
 8000448:	438a      	bics	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	23a0      	movs	r3, #160	@ 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	23a0      	movs	r3, #160	@ 0xa0
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	2101      	movs	r1, #1
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
	pyd_set_DL_low();
 800045c:	f7ff ff19 	bl	8000292 <pyd_set_DL_low>

    pyd_delay_us(160);
 8000460:	20a0      	movs	r0, #160	@ 0xa0
 8000462:	f000 f80f 	bl	8000484 <pyd_delay_us>

    DL_INPUT_MODE();
 8000466:	23a0      	movs	r3, #160	@ 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	23a0      	movs	r3, #160	@ 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2103      	movs	r1, #3
 8000472:	438a      	bics	r2, r1
 8000474:	601a      	str	r2, [r3, #0]

    return data;
 8000476:	69ba      	ldr	r2, [r7, #24]
 8000478:	69fb      	ldr	r3, [r7, #28]
}
 800047a:	0010      	movs	r0, r2
 800047c:	0019      	movs	r1, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b009      	add	sp, #36	@ 0x24
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <pyd_delay_us>:




void pyd_delay_us(uint16_t us)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	0002      	movs	r2, r0
 800048c:	1dbb      	adds	r3, r7, #6
 800048e:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000490:	4b0b      	ldr	r3, [pc, #44]	@ (80004c0 <pyd_delay_us+0x3c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim2);
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <pyd_delay_us+0x3c>)
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fabc 	bl	8001a18 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <pyd_delay_us+0x3c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d3f8      	bcc.n	80004a2 <pyd_delay_us+0x1e>
    HAL_TIM_Base_Stop(&htim2);
 80004b0:	4b03      	ldr	r3, [pc, #12]	@ (80004c0 <pyd_delay_us+0x3c>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fafa 	bl	8001aac <HAL_TIM_Base_Stop>
}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000002c 	.word	0x2000002c

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fa1b 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f83d 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f8eb 	bl	80006ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80004d6:	f000 f895 	bl	8000604 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  pyd_init(
 80004da:	2380      	movs	r3, #128	@ 0x80
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	2280      	movs	r2, #128	@ 0x80
 80004e0:	0112      	lsls	r2, r2, #4
 80004e2:	21c0      	movs	r1, #192	@ 0xc0
 80004e4:	01c9      	lsls	r1, r1, #7
 80004e6:	2000      	movs	r0, #0
 80004e8:	9003      	str	r0, [sp, #12]
 80004ea:	2000      	movs	r0, #0
 80004ec:	9002      	str	r0, [sp, #8]
 80004ee:	2000      	movs	r0, #0
 80004f0:	9001      	str	r0, [sp, #4]
 80004f2:	2080      	movs	r0, #128	@ 0x80
 80004f4:	9000      	str	r0, [sp, #0]
 80004f6:	2064      	movs	r0, #100	@ 0x64
 80004f8:	f7ff fe92 	bl	8000220 <pyd_init>
         PYD_SIGNAL_SRC_BPF,         // Signal Source: BPF
         PYD_HPF_0_4HZ,              // HPF
         PYD_COUNT_WITH_SIGN         // Count mode
     );

  HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	@ 0x64
 80004fe:	f000 fa71 	bl	80009e4 <HAL_Delay>
  process_motion_data();
 8000502:	f000 f919 	bl	8000738 <process_motion_data>
		process_motion_data();

	  }
*/

	  if(HAL_GPIO_ReadPin(PYD_DIRECT_PORT, PYD_DIRECT_PIN) == GPIO_PIN_SET)
 8000506:	23a0      	movs	r3, #160	@ 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2101      	movs	r1, #1
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fcbf 	bl	8000e90 <HAL_GPIO_ReadPin>
 8000512:	0003      	movs	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d1f6      	bne.n	8000506 <main+0x42>
	  {
			//process_motion_data();
		     full_data = pyd_try_read_data_if_valid();
 8000518:	f7ff ff2d 	bl	8000376 <pyd_try_read_data_if_valid>
 800051c:	0002      	movs	r2, r0
 800051e:	000b      	movs	r3, r1
 8000520:	4908      	ldr	r1, [pc, #32]	@ (8000544 <main+0x80>)
 8000522:	600a      	str	r2, [r1, #0]
 8000524:	604b      	str	r3, [r1, #4]
		     adc = PYD_GET_ADC(full_data);
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <main+0x80>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	01d9      	lsls	r1, r3, #7
 800052e:	0e54      	lsrs	r4, r2, #25
 8000530:	430c      	orrs	r4, r1
 8000532:	0e5d      	lsrs	r5, r3, #25
 8000534:	b2a3      	uxth	r3, r4
 8000536:	049b      	lsls	r3, r3, #18
 8000538:	0c9b      	lsrs	r3, r3, #18
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b02      	ldr	r3, [pc, #8]	@ (8000548 <main+0x84>)
 800053e:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PYD_DIRECT_PORT, PYD_DIRECT_PIN) == GPIO_PIN_SET)
 8000540:	e7e1      	b.n	8000506 <main+0x42>
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	20000070 	.word	0x20000070
 8000548:	2000006c 	.word	0x2000006c

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b093      	sub	sp, #76	@ 0x4c
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	2414      	movs	r4, #20
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2334      	movs	r3, #52	@ 0x34
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f001 fcf3 	bl	8001f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	003b      	movs	r3, r7
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f001 fcec 	bl	8001f48 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <SystemClock_Config+0xb0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <SystemClock_Config+0xb4>)
 8000576:	401a      	ands	r2, r3
 8000578:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <SystemClock_Config+0xb0>)
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	0109      	lsls	r1, r1, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2202      	movs	r2, #2
 8000588:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2210      	movs	r2, #16
 8000594:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2202      	movs	r2, #2
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	02d2      	lsls	r2, r2, #11
 80005a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	03d2      	lsls	r2, r2, #15
 80005b0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fca5 	bl	8000f04 <HAL_RCC_OscConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005be:	f000 f929 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	003b      	movs	r3, r7
 80005c4:	220f      	movs	r2, #15
 80005c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2203      	movs	r2, #3
 80005cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	003b      	movs	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e0:	003b      	movs	r3, r7
 80005e2:	2101      	movs	r1, #1
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 f809 	bl	80015fc <HAL_RCC_ClockConfig>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ee:	f000 f911 	bl	8000814 <Error_Handler>
  }
}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b013      	add	sp, #76	@ 0x4c
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	40007000 	.word	0x40007000
 8000600:	ffffe7ff 	.word	0xffffe7ff

08000604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	2308      	movs	r3, #8
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	0018      	movs	r0, r3
 8000610:	2310      	movs	r3, #16
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f001 fc97 	bl	8001f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	003b      	movs	r3, r7
 800061c:	0018      	movs	r0, r3
 800061e:	2308      	movs	r3, #8
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f001 fc90 	bl	8001f48 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 800062a:	2280      	movs	r2, #128	@ 0x80
 800062c:	05d2      	lsls	r2, r2, #23
 800062e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 8000632:	221f      	movs	r2, #31
 8000634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 800063e:	4a1a      	ldr	r2, [pc, #104]	@ (80006a8 <MX_TIM2_Init+0xa4>)
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f9a1 	bl	8001998 <HAL_TIM_Base_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800065a:	f000 f8db 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	2108      	movs	r1, #8
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2280      	movs	r2, #128	@ 0x80
 8000664:	0152      	lsls	r2, r2, #5
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000668:	187a      	adds	r2, r7, r1
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fa3a 	bl	8001ae8 <HAL_TIM_ConfigClockSource>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000678:	f000 f8cc 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	003b      	movs	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	003b      	movs	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000688:	003a      	movs	r2, r7
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_TIM2_Init+0xa0>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fbfc 	bl	8001e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000698:	f000 f8bc 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b006      	add	sp, #24
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	0000ffff 	.word	0x0000ffff

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f001 fc44 	bl	8001f48 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_GPIO_Init+0x88>)
 80006c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_GPIO_Init+0x88>)
 80006c6:	2101      	movs	r1, #1
 80006c8:	430a      	orrs	r2, r1
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_GPIO_Init+0x88>)
 80006ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d0:	2201      	movs	r2, #1
 80006d2:	4013      	ands	r3, r2
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80006d8:	23a0      	movs	r3, #160	@ 0xa0
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	2200      	movs	r2, #0
 80006de:	212a      	movs	r1, #42	@ 0x2a
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fbf2 	bl	8000eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	1d3a      	adds	r2, r7, #4
 80006fa:	23a0      	movs	r3, #160	@ 0xa0
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fa47 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	222a      	movs	r2, #42	@ 0x2a
 800070a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2201      	movs	r2, #1
 8000710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	23a0      	movs	r3, #160	@ 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fa34 	bl	8000b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b006      	add	sp, #24
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000

08000738 <process_motion_data>:

//static uint64_t full_data = 0;
//static uint16_t adc = 0;

void process_motion_data(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	af00      	add	r7, sp, #0
    full_data = pyd_try_read_data_if_valid();
 800073c:	f7ff fe1b 	bl	8000376 <pyd_try_read_data_if_valid>
 8000740:	0002      	movs	r2, r0
 8000742:	000b      	movs	r3, r1
 8000744:	4931      	ldr	r1, [pc, #196]	@ (800080c <process_motion_data+0xd4>)
 8000746:	600a      	str	r2, [r1, #0]
 8000748:	604b      	str	r3, [r1, #4]

    adc = PYD_GET_ADC(full_data);
 800074a:	4b30      	ldr	r3, [pc, #192]	@ (800080c <process_motion_data+0xd4>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	01d9      	lsls	r1, r3, #7
 8000752:	0e54      	lsrs	r4, r2, #25
 8000754:	430c      	orrs	r4, r1
 8000756:	0e5d      	lsrs	r5, r3, #25
 8000758:	b2a3      	uxth	r3, r4
 800075a:	049b      	lsls	r3, r3, #18
 800075c:	0c9b      	lsrs	r3, r3, #18
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <process_motion_data+0xd8>)
 8000762:	801a      	strh	r2, [r3, #0]


    if (adc >= 16000)
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <process_motion_data+0xd8>)
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	23fa      	movs	r3, #250	@ 0xfa
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	429a      	cmp	r2, r3
 800076e:	d318      	bcc.n	80007a2 <process_motion_data+0x6a>
    {
        HAL_GPIO_WritePin(HUMAN_PORT, HUMAN_PIN, GPIO_PIN_SET);
 8000770:	23a0      	movs	r3, #160	@ 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2108      	movs	r1, #8
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fba6 	bl	8000eca <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 800077e:	23fa      	movs	r3, #250	@ 0xfa
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f92e 	bl	80009e4 <HAL_Delay>
        HAL_GPIO_WritePin(HUMAN_PORT, HUMAN_PIN, GPIO_PIN_RESET);
 8000788:	23a0      	movs	r3, #160	@ 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fb9a 	bl	8000eca <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8000796:	23fa      	movs	r3, #250	@ 0xfa
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f922 	bl	80009e4 <HAL_Delay>
        HAL_Delay(1000);

    }


}
 80007a0:	e031      	b.n	8000806 <process_motion_data+0xce>
    else if (adc >= 500)
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <process_motion_data+0xd8>)
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	23fa      	movs	r3, #250	@ 0xfa
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d318      	bcc.n	80007e0 <process_motion_data+0xa8>
        HAL_GPIO_WritePin(ANIMAL_PORT, ANIMAL_PIN, GPIO_PIN_SET);
 80007ae:	23a0      	movs	r3, #160	@ 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fb87 	bl	8000eca <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 80007bc:	23fa      	movs	r3, #250	@ 0xfa
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 f90f 	bl	80009e4 <HAL_Delay>
        HAL_GPIO_WritePin(ANIMAL_PORT, ANIMAL_PIN, GPIO_PIN_RESET);
 80007c6:	23a0      	movs	r3, #160	@ 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fb7b 	bl	8000eca <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 80007d4:	23fa      	movs	r3, #250	@ 0xfa
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f903 	bl	80009e4 <HAL_Delay>
}
 80007de:	e012      	b.n	8000806 <process_motion_data+0xce>
    	HAL_GPIO_WritePin(HUMAN_PORT, HUMAN_PIN, GPIO_PIN_RESET);
 80007e0:	23a0      	movs	r3, #160	@ 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	2200      	movs	r2, #0
 80007e6:	2108      	movs	r1, #8
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fb6e 	bl	8000eca <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(ANIMAL_PORT, ANIMAL_PIN, GPIO_PIN_RESET);
 80007ee:	23a0      	movs	r3, #160	@ 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fb67 	bl	8000eca <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 80007fc:	23fa      	movs	r3, #250	@ 0xfa
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f8ef 	bl	80009e4 <HAL_Delay>
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bdb0      	pop	{r4, r5, r7, pc}
 800080c:	20000070 	.word	0x20000070
 8000810:	2000006c 	.word	0x2000006c

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <HAL_MspInit+0x24>)
 8000826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x24>)
 800082a:	2101      	movs	r1, #1
 800082c:	430a      	orrs	r2, r1
 800082e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <HAL_MspInit+0x24>)
 8000832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <HAL_MspInit+0x24>)
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	0549      	lsls	r1, r1, #21
 800083a:	430a      	orrs	r2, r1
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	429a      	cmp	r2, r3
 800085a:	d105      	bne.n	8000868 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <HAL_TIM_Base_MspInit+0x28>)
 800085e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <HAL_TIM_Base_MspInit+0x28>)
 8000862:	2101      	movs	r1, #1
 8000864:	430a      	orrs	r2, r1
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f886 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff fff7 	bl	80008a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f001 fb3b 	bl	8001f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fdef 	bl	80004c4 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
   ldr   r0, =_estack
 80008e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f4:	08001fdc 	.word	0x08001fdc
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	2000007c 	.word	0x2000007c

08000900 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_COMP_IRQHandler>
	...

08000904 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_Init+0x3c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_Init+0x3c>)
 8000916:	2140      	movs	r1, #64	@ 0x40
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f811 	bl	8000944 <HAL_InitTick>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d003      	beq.n	800092e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e001      	b.n	8000932 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092e:	f7ff ff77 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_InitTick+0x5c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	@ 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbd5 	bl	8000108 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbd0 	bl	8000108 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f905 	bl	8000b7a <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e00f      	b.n	8000998 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80b      	bhi.n	8000996 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8e2 	bl	8000b50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_InitTick+0x64>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	18d2      	adds	r2, r2, r3
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_IncTick+0x20>)
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000078 	.word	0x20000078

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	@ (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	20000078 	.word	0x20000078

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff fff0 	bl	80009d0 <HAL_GetTick>
 80009f0:	0003      	movs	r3, r0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	001a      	movs	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	189b      	adds	r3, r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	f7ff ffe0 	bl	80009d0 <HAL_GetTick>
 8000a10:	0002      	movs	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b004      	add	sp, #16
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a40:	d828      	bhi.n	8000a94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a42:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <__NVIC_SetPriority+0xd4>)
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	33c0      	adds	r3, #192	@ 0xc0
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	589b      	ldr	r3, [r3, r2]
 8000a52:	1dfa      	adds	r2, r7, #7
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	0011      	movs	r1, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	00d2      	lsls	r2, r2, #3
 8000a5e:	21ff      	movs	r1, #255	@ 0xff
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	22ff      	movs	r2, #255	@ 0xff
 8000a70:	401a      	ands	r2, r3
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	2303      	movs	r3, #3
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a80:	481f      	ldr	r0, [pc, #124]	@ (8000b00 <__NVIC_SetPriority+0xd4>)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	33c0      	adds	r3, #192	@ 0xc0
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a92:	e031      	b.n	8000af8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	4a1b      	ldr	r2, [pc, #108]	@ (8000b04 <__NVIC_SetPriority+0xd8>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	3b08      	subs	r3, #8
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3306      	adds	r3, #6
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	18d3      	adds	r3, r2, r3
 8000aaa:	3304      	adds	r3, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	@ 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	@ 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	4809      	ldr	r0, [pc, #36]	@ (8000b04 <__NVIC_SetPriority+0xd8>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	430a      	orrs	r2, r1
 8000aee:	3306      	adds	r3, #6
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	18c3      	adds	r3, r0, r3
 8000af4:	3304      	adds	r3, #4
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b003      	add	sp, #12
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	045b      	lsls	r3, r3, #17
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d301      	bcc.n	8000b20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e010      	b.n	8000b42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <SysTick_Config+0x44>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	3a01      	subs	r2, #1
 8000b26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff7c 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <SysTick_Config+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <SysTick_Config+0x44>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	1c02      	adds	r2, r0, #0
 8000b60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ffbf 	bl	8000b08 <SysTick_Config>
 8000b8a:	0003      	movs	r3, r0
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000baa:	e155      	b.n	8000e58 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <HAL_GPIO_Init+0x30>
 8000bc2:	e146      	b.n	8000e52 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	409a      	lsls	r2, r3
 8000bea:	0013      	movs	r3, r2
 8000bec:	43da      	mvns	r2, r3
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	0013      	movs	r3, r2
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	2201      	movs	r2, #1
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2203      	movs	r2, #3
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2203      	movs	r2, #3
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	58d3      	ldr	r3, [r2, r3]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2207      	movs	r2, #7
 8000c98:	4013      	ands	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	6939      	ldr	r1, [r7, #16]
 8000ccc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2203      	movs	r2, #3
 8000cec:	401a      	ands	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	23c0      	movs	r3, #192	@ 0xc0
 8000d08:	029b      	lsls	r3, r3, #10
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d100      	bne.n	8000d10 <HAL_GPIO_Init+0x17c>
 8000d0e:	e0a0      	b.n	8000e52 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b57      	ldr	r3, [pc, #348]	@ (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d14:	4b56      	ldr	r3, [pc, #344]	@ (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1c:	4a55      	ldr	r2, [pc, #340]	@ (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	589b      	ldr	r3, [r3, r2]
 8000d28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4013      	ands	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	409a      	lsls	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	23a0      	movs	r3, #160	@ 0xa0
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d01f      	beq.n	8000d8a <HAL_GPIO_Init+0x1f6>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8000e78 <HAL_GPIO_Init+0x2e4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d019      	beq.n	8000d86 <HAL_GPIO_Init+0x1f2>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a49      	ldr	r2, [pc, #292]	@ (8000e7c <HAL_GPIO_Init+0x2e8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0x1ee>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a48      	ldr	r2, [pc, #288]	@ (8000e80 <HAL_GPIO_Init+0x2ec>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d00d      	beq.n	8000d7e <HAL_GPIO_Init+0x1ea>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a47      	ldr	r2, [pc, #284]	@ (8000e84 <HAL_GPIO_Init+0x2f0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x1e6>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a46      	ldr	r2, [pc, #280]	@ (8000e88 <HAL_GPIO_Init+0x2f4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d72:	2305      	movs	r3, #5
 8000d74:	e00a      	b.n	8000d8c <HAL_GPIO_Init+0x1f8>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e008      	b.n	8000d8c <HAL_GPIO_Init+0x1f8>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x1f8>
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e004      	b.n	8000d8c <HAL_GPIO_Init+0x1f8>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_Init+0x1f8>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x1f8>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	2103      	movs	r1, #3
 8000d90:	400a      	ands	r2, r1
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d9c:	4935      	ldr	r1, [pc, #212]	@ (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000daa:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	2380      	movs	r3, #128	@ 0x80
 8000dc0:	035b      	lsls	r3, r3, #13
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	039b      	lsls	r3, r3, #14
 8000dec:	4013      	ands	r3, r2
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	2380      	movs	r3, #128	@ 0x80
 8000e14:	029b      	lsls	r3, r3, #10
 8000e16:	4013      	ands	r3, r2
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	4013      	ands	r3, r2
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	40da      	lsrs	r2, r3
 8000e60:	1e13      	subs	r3, r2, #0
 8000e62:	d000      	beq.n	8000e66 <HAL_GPIO_Init+0x2d2>
 8000e64:	e6a2      	b.n	8000bac <HAL_GPIO_Init+0x18>
  }
}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b006      	add	sp, #24
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	50000400 	.word	0x50000400
 8000e7c:	50000800 	.word	0x50000800
 8000e80:	50000c00 	.word	0x50000c00
 8000e84:	50001000 	.word	0x50001000
 8000e88:	50001c00 	.word	0x50001c00
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	000a      	movs	r2, r1
 8000e9a:	1cbb      	adds	r3, r7, #2
 8000e9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	1cba      	adds	r2, r7, #2
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d004      	beq.n	8000eb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e003      	b.n	8000ebc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	0008      	movs	r0, r1
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	1c02      	adds	r2, r0, #0
 8000eda:	801a      	strh	r2, [r3, #0]
 8000edc:	1c7b      	adds	r3, r7, #1
 8000ede:	1c0a      	adds	r2, r1, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee2:	1c7b      	adds	r3, r7, #1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eea:	1cbb      	adds	r3, r7, #2
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ef2:	e003      	b.n	8000efc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ef4:	1cbb      	adds	r3, r7, #2
 8000ef6:	881a      	ldrh	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f000 fb6c 	bl	80015f0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f18:	4bc8      	ldr	r3, [pc, #800]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f22:	4bc6      	ldr	r3, [pc, #792]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	025b      	lsls	r3, r3, #9
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	d100      	bne.n	8000f3a <HAL_RCC_OscConfig+0x36>
 8000f38:	e07d      	b.n	8001036 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d007      	beq.n	8000f50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d112      	bne.n	8000f6c <HAL_RCC_OscConfig+0x68>
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	025b      	lsls	r3, r3, #9
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d10d      	bne.n	8000f6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4bba      	ldr	r3, [pc, #744]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <HAL_RCC_OscConfig+0x5a>
 8000f5c:	e06a      	b.n	8001034 <HAL_RCC_OscConfig+0x130>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d166      	bne.n	8001034 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f000 fb42 	bl	80015f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_OscConfig+0x84>
 8000f78:	4bb0      	ldr	r3, [pc, #704]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4baf      	ldr	r3, [pc, #700]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f7e:	2180      	movs	r1, #128	@ 0x80
 8000f80:	0249      	lsls	r1, r1, #9
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e027      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	23a0      	movs	r3, #160	@ 0xa0
 8000f8e:	02db      	lsls	r3, r3, #11
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d10e      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xae>
 8000f94:	4ba9      	ldr	r3, [pc, #676]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4ba8      	ldr	r3, [pc, #672]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	02c9      	lsls	r1, r1, #11
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	4ba6      	ldr	r3, [pc, #664]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4ba5      	ldr	r3, [pc, #660]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	0249      	lsls	r1, r1, #9
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e012      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000fb2:	4ba2      	ldr	r3, [pc, #648]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4ba1      	ldr	r3, [pc, #644]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fb8:	49a1      	ldr	r1, [pc, #644]	@ (8001240 <HAL_RCC_OscConfig+0x33c>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	4b9f      	ldr	r3, [pc, #636]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b9a      	ldr	r3, [pc, #616]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000fd2:	499c      	ldr	r1, [pc, #624]	@ (8001244 <HAL_RCC_OscConfig+0x340>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d014      	beq.n	800100a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcf6 	bl	80009d0 <HAL_GetTick>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fea:	f7ff fcf1 	bl	80009d0 <HAL_GetTick>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b64      	cmp	r3, #100	@ 0x64
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e2f9      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0xe6>
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fce1 	bl	80009d0 <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fcdc 	bl	80009d0 <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	@ 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e2e4      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001026:	4b85      	ldr	r3, [pc, #532]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x110>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	d100      	bne.n	8001042 <HAL_RCC_OscConfig+0x13e>
 8001040:	e099      	b.n	8001176 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	2220      	movs	r2, #32
 800104c:	4013      	ands	r3, r2
 800104e:	d009      	beq.n	8001064 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001050:	4b7a      	ldr	r3, [pc, #488]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b79      	ldr	r3, [pc, #484]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001056:	2120      	movs	r1, #32
 8001058:	430a      	orrs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	2220      	movs	r2, #32
 8001060:	4393      	bics	r3, r2
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d005      	beq.n	8001076 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d13e      	bne.n	80010ee <HAL_RCC_OscConfig+0x1ea>
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d13b      	bne.n	80010ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001076:	4b71      	ldr	r3, [pc, #452]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2204      	movs	r2, #4
 800107c:	4013      	ands	r3, r2
 800107e:	d004      	beq.n	800108a <HAL_RCC_OscConfig+0x186>
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e2b2      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b6c      	ldr	r3, [pc, #432]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a6e      	ldr	r2, [pc, #440]	@ (8001248 <HAL_RCC_OscConfig+0x344>)
 8001090:	4013      	ands	r3, r2
 8001092:	0019      	movs	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	021a      	lsls	r2, r3, #8
 800109a:	4b68      	ldr	r3, [pc, #416]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800109c:	430a      	orrs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010a0:	4b66      	ldr	r3, [pc, #408]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2209      	movs	r2, #9
 80010a6:	4393      	bics	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	4b64      	ldr	r3, [pc, #400]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b2:	f000 fbeb 	bl	800188c <HAL_RCC_GetSysClockFreq>
 80010b6:	0001      	movs	r1, r0
 80010b8:	4b60      	ldr	r3, [pc, #384]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	220f      	movs	r2, #15
 80010c0:	4013      	ands	r3, r2
 80010c2:	4a62      	ldr	r2, [pc, #392]	@ (800124c <HAL_RCC_OscConfig+0x348>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	000a      	movs	r2, r1
 80010c8:	40da      	lsrs	r2, r3
 80010ca:	4b61      	ldr	r3, [pc, #388]	@ (8001250 <HAL_RCC_OscConfig+0x34c>)
 80010cc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010ce:	4b61      	ldr	r3, [pc, #388]	@ (8001254 <HAL_RCC_OscConfig+0x350>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2513      	movs	r5, #19
 80010d4:	197c      	adds	r4, r7, r5
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff fc34 	bl	8000944 <HAL_InitTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d046      	beq.n	8001176 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80010e8:	197b      	adds	r3, r7, r5
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	e280      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d027      	beq.n	8001144 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010f4:	4b51      	ldr	r3, [pc, #324]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2209      	movs	r2, #9
 80010fa:	4393      	bics	r3, r2
 80010fc:	0019      	movs	r1, r3
 80010fe:	4b4f      	ldr	r3, [pc, #316]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc63 	bl	80009d0 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fc5e 	bl	80009d0 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e266      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001122:	4b46      	ldr	r3, [pc, #280]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2204      	movs	r2, #4
 8001128:	4013      	ands	r3, r2
 800112a:	d0f1      	beq.n	8001110 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b43      	ldr	r3, [pc, #268]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a45      	ldr	r2, [pc, #276]	@ (8001248 <HAL_RCC_OscConfig+0x344>)
 8001132:	4013      	ands	r3, r2
 8001134:	0019      	movs	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	021a      	lsls	r2, r3, #8
 800113c:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800113e:	430a      	orrs	r2, r1
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	e018      	b.n	8001176 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800114a:	2101      	movs	r1, #1
 800114c:	438a      	bics	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fc3e 	bl	80009d0 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fc39 	bl	80009d0 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e241      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800116c:	4b33      	ldr	r3, [pc, #204]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2204      	movs	r2, #4
 8001172:	4013      	ands	r3, r2
 8001174:	d1f1      	bne.n	800115a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2210      	movs	r2, #16
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_RCC_OscConfig+0x27e>
 8001180:	e0a1      	b.n	80012c6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d140      	bne.n	800120a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_OscConfig+0x29c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e227      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001258 <HAL_RCC_OscConfig+0x354>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	0a19      	lsrs	r1, r3, #8
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	061a      	lsls	r2, r3, #24
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011c4:	430a      	orrs	r2, r1
 80011c6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	0b5b      	lsrs	r3, r3, #13
 80011ce:	3301      	adds	r3, #1
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	0212      	lsls	r2, r2, #8
 80011d4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	210f      	movs	r1, #15
 80011de:	400b      	ands	r3, r1
 80011e0:	491a      	ldr	r1, [pc, #104]	@ (800124c <HAL_RCC_OscConfig+0x348>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_RCC_OscConfig+0x34c>)
 80011e8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_RCC_OscConfig+0x350>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2513      	movs	r5, #19
 80011f0:	197c      	adds	r4, r7, r5
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff fba6 	bl	8000944 <HAL_InitTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011fc:	197b      	adds	r3, r7, r5
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d060      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001204:	197b      	adds	r3, r7, r5
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	e1f2      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03f      	beq.n	8001292 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0049      	lsls	r1, r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fbd6 	bl	80009d0 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001228:	e018      	b.n	800125c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122a:	f7ff fbd1 	bl	80009d0 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d911      	bls.n	800125c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1d9      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
 800123c:	40021000 	.word	0x40021000
 8001240:	fffeffff 	.word	0xfffeffff
 8001244:	fffbffff 	.word	0xfffbffff
 8001248:	ffffe0ff 	.word	0xffffe0ff
 800124c:	08001fb8 	.word	0x08001fb8
 8001250:	20000000 	.word	0x20000000
 8001254:	20000004 	.word	0x20000004
 8001258:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125c:	4bc9      	ldr	r3, [pc, #804]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d0e0      	beq.n	800122a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001268:	4bc6      	ldr	r3, [pc, #792]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4ac6      	ldr	r2, [pc, #792]	@ (8001588 <HAL_RCC_OscConfig+0x684>)
 800126e:	4013      	ands	r3, r2
 8001270:	0019      	movs	r1, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	4bc3      	ldr	r3, [pc, #780]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127c:	4bc1      	ldr	r3, [pc, #772]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	0a19      	lsrs	r1, r3, #8
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	061a      	lsls	r2, r3, #24
 800128a:	4bbe      	ldr	r3, [pc, #760]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	e019      	b.n	80012c6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001292:	4bbc      	ldr	r3, [pc, #752]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4bbb      	ldr	r3, [pc, #748]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001298:	49bc      	ldr	r1, [pc, #752]	@ (800158c <HAL_RCC_OscConfig+0x688>)
 800129a:	400a      	ands	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb97 	bl	80009d0 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a8:	f7ff fb92 	bl	80009d0 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e19a      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012ba:	4bb2      	ldr	r3, [pc, #712]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	@ 0x80
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2208      	movs	r2, #8
 80012cc:	4013      	ands	r3, r2
 80012ce:	d036      	beq.n	800133e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d019      	beq.n	800130c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d8:	4baa      	ldr	r3, [pc, #680]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80012da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012dc:	4ba9      	ldr	r3, [pc, #676]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80012de:	2101      	movs	r1, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fb74 	bl	80009d0 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fb6f 	bl	80009d0 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e177      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001300:	4ba0      	ldr	r3, [pc, #640]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d0f1      	beq.n	80012ee <HAL_RCC_OscConfig+0x3ea>
 800130a:	e018      	b.n	800133e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130c:	4b9d      	ldr	r3, [pc, #628]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800130e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001310:	4b9c      	ldr	r3, [pc, #624]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fb5a 	bl	80009d0 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fb55 	bl	80009d0 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e15d      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001334:	4b93      	ldr	r3, [pc, #588]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d1f1      	bne.n	8001322 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2204      	movs	r2, #4
 8001344:	4013      	ands	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x446>
 8001348:	e0ae      	b.n	80014a8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2023      	movs	r0, #35	@ 0x23
 800134c:	183b      	adds	r3, r7, r0
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b8c      	ldr	r3, [pc, #560]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	4013      	ands	r3, r2
 800135c:	d109      	bne.n	8001372 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b89      	ldr	r3, [pc, #548]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001362:	4b88      	ldr	r3, [pc, #544]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	0549      	lsls	r1, r1, #21
 8001368:	430a      	orrs	r2, r1
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800136c:	183b      	adds	r3, r7, r0
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b87      	ldr	r3, [pc, #540]	@ (8001590 <HAL_RCC_OscConfig+0x68c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4013      	ands	r3, r2
 800137c:	d11a      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b84      	ldr	r3, [pc, #528]	@ (8001590 <HAL_RCC_OscConfig+0x68c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b83      	ldr	r3, [pc, #524]	@ (8001590 <HAL_RCC_OscConfig+0x68c>)
 8001384:	2180      	movs	r1, #128	@ 0x80
 8001386:	0049      	lsls	r1, r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138c:	f7ff fb20 	bl	80009d0 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001396:	f7ff fb1b 	bl	80009d0 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	@ 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e123      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	4b79      	ldr	r3, [pc, #484]	@ (8001590 <HAL_RCC_OscConfig+0x68c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	429a      	cmp	r2, r3
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4cc>
 80013c0:	4b70      	ldr	r3, [pc, #448]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80013c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80013c6:	2180      	movs	r1, #128	@ 0x80
 80013c8:	0049      	lsls	r1, r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80013ce:	e031      	b.n	8001434 <HAL_RCC_OscConfig+0x530>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x4ee>
 80013d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80013da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013dc:	4b69      	ldr	r3, [pc, #420]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80013de:	496b      	ldr	r1, [pc, #428]	@ (800158c <HAL_RCC_OscConfig+0x688>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80013e4:	4b67      	ldr	r3, [pc, #412]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80013e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013e8:	4b66      	ldr	r3, [pc, #408]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80013ea:	496a      	ldr	r1, [pc, #424]	@ (8001594 <HAL_RCC_OscConfig+0x690>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80013f0:	e020      	b.n	8001434 <HAL_RCC_OscConfig+0x530>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	23a0      	movs	r3, #160	@ 0xa0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d10e      	bne.n	800141c <HAL_RCC_OscConfig+0x518>
 80013fe:	4b61      	ldr	r3, [pc, #388]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001402:	4b60      	ldr	r3, [pc, #384]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001404:	2180      	movs	r1, #128	@ 0x80
 8001406:	00c9      	lsls	r1, r1, #3
 8001408:	430a      	orrs	r2, r1
 800140a:	651a      	str	r2, [r3, #80]	@ 0x50
 800140c:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800140e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001410:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	0049      	lsls	r1, r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	651a      	str	r2, [r3, #80]	@ 0x50
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0x530>
 800141c:	4b59      	ldr	r3, [pc, #356]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800141e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001420:	4b58      	ldr	r3, [pc, #352]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001422:	495a      	ldr	r1, [pc, #360]	@ (800158c <HAL_RCC_OscConfig+0x688>)
 8001424:	400a      	ands	r2, r1
 8001426:	651a      	str	r2, [r3, #80]	@ 0x50
 8001428:	4b56      	ldr	r3, [pc, #344]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800142a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800142c:	4b55      	ldr	r3, [pc, #340]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800142e:	4959      	ldr	r1, [pc, #356]	@ (8001594 <HAL_RCC_OscConfig+0x690>)
 8001430:	400a      	ands	r2, r1
 8001432:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d015      	beq.n	8001468 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fac8 	bl	80009d0 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001444:	e009      	b.n	800145a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fac3 	bl	80009d0 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	4a51      	ldr	r2, [pc, #324]	@ (8001598 <HAL_RCC_OscConfig+0x694>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0ca      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800145a:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800145c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d0ef      	beq.n	8001446 <HAL_RCC_OscConfig+0x542>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fab2 	bl	80009d0 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff faad 	bl	80009d0 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a46      	ldr	r2, [pc, #280]	@ (8001598 <HAL_RCC_OscConfig+0x694>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0b4      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001486:	4b3f      	ldr	r3, [pc, #252]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d1ef      	bne.n	8001472 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001492:	2323      	movs	r3, #35	@ 0x23
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800149e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014a0:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80014a2:	493e      	ldr	r1, [pc, #248]	@ (800159c <HAL_RCC_OscConfig+0x698>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5ae>
 80014b0:	e09d      	b.n	80015ee <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x5b6>
 80014b8:	e076      	b.n	80015a8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d145      	bne.n	800154e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80014c8:	4935      	ldr	r1, [pc, #212]	@ (80015a0 <HAL_RCC_OscConfig+0x69c>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fa7f 	bl	80009d0 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fa7a 	bl	80009d0 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e082      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	@ 0x80
 80014f0:	049b      	lsls	r3, r3, #18
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a2a      	ldr	r2, [pc, #168]	@ (80015a4 <HAL_RCC_OscConfig+0x6a0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	431a      	orrs	r2, r3
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0449      	lsls	r1, r1, #17
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fa54 	bl	80009d0 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fa4f 	bl	80009d0 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e057      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	049b      	lsls	r3, r3, #18
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x62a>
 800154c:	e04f      	b.n	80015ee <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <HAL_RCC_OscConfig+0x69c>)
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fa39 	bl	80009d0 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fa34 	bl	80009d0 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e03c      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001576:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_RCC_OscConfig+0x680>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	049b      	lsls	r3, r3, #18
 800157e:	4013      	ands	r3, r2
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x660>
 8001582:	e034      	b.n	80015ee <HAL_RCC_OscConfig+0x6ea>
 8001584:	40021000 	.word	0x40021000
 8001588:	ffff1fff 	.word	0xffff1fff
 800158c:	fffffeff 	.word	0xfffffeff
 8001590:	40007000 	.word	0x40007000
 8001594:	fffffbff 	.word	0xfffffbff
 8001598:	00001388 	.word	0x00001388
 800159c:	efffffff 	.word	0xefffffff
 80015a0:	feffffff 	.word	0xfeffffff
 80015a4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b4:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_RCC_OscConfig+0x6f4>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	401a      	ands	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d10f      	bne.n	80015ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	23f0      	movs	r3, #240	@ 0xf0
 80015ce:	039b      	lsls	r3, r3, #14
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	23c0      	movs	r3, #192	@ 0xc0
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b00a      	add	sp, #40	@ 0x28
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e128      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b96      	ldr	r3, [pc, #600]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d91e      	bls.n	800165c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b93      	ldr	r3, [pc, #588]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	4b90      	ldr	r3, [pc, #576]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001630:	f7ff f9ce 	bl	80009d0 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001638:	e009      	b.n	800164e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163a:	f7ff f9c9 	bl	80009d0 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a8a      	ldr	r2, [pc, #552]	@ (8001870 <HAL_RCC_ClockConfig+0x274>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e109      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b87      	ldr	r3, [pc, #540]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d1ee      	bne.n	800163a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2202      	movs	r2, #2
 8001662:	4013      	ands	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001666:	4b83      	ldr	r3, [pc, #524]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	22f0      	movs	r2, #240	@ 0xf0
 800166c:	4393      	bics	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b7f      	ldr	r3, [pc, #508]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001676:	430a      	orrs	r2, r1
 8001678:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_ClockConfig+0x8a>
 8001684:	e089      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800168e:	4b79      	ldr	r3, [pc, #484]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	029b      	lsls	r3, r3, #10
 8001696:	4013      	ands	r3, r2
 8001698:	d120      	bne.n	80016dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0e1      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016a6:	4b73      	ldr	r3, [pc, #460]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	@ 0x80
 80016ac:	049b      	lsls	r3, r3, #18
 80016ae:	4013      	ands	r3, r2
 80016b0:	d114      	bne.n	80016dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0d5      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016be:	4b6d      	ldr	r3, [pc, #436]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2204      	movs	r2, #4
 80016c4:	4013      	ands	r3, r2
 80016c6:	d109      	bne.n	80016dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0ca      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016cc:	4b69      	ldr	r3, [pc, #420]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0c2      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016dc:	4b65      	ldr	r3, [pc, #404]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4b62      	ldr	r3, [pc, #392]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f96e 	bl	80009d0 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	e009      	b.n	8001716 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7ff f965 	bl	80009d0 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a58      	ldr	r2, [pc, #352]	@ (8001870 <HAL_RCC_ClockConfig+0x274>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0a5      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001716:	4b57      	ldr	r3, [pc, #348]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	4013      	ands	r3, r2
 800171e:	2b08      	cmp	r3, #8
 8001720:	d1ef      	bne.n	8001702 <HAL_RCC_ClockConfig+0x106>
 8001722:	e03a      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d111      	bne.n	8001750 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	e009      	b.n	8001742 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f7ff f94f 	bl	80009d0 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a4d      	ldr	r2, [pc, #308]	@ (8001870 <HAL_RCC_ClockConfig+0x274>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e08f      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001742:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_ClockConfig+0x132>
 800174e:	e024      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d11b      	bne.n	8001790 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001758:	e009      	b.n	800176e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7ff f939 	bl	80009d0 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a42      	ldr	r2, [pc, #264]	@ (8001870 <HAL_RCC_ClockConfig+0x274>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e079      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800176e:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	220c      	movs	r2, #12
 8001774:	4013      	ands	r3, r2
 8001776:	2b04      	cmp	r3, #4
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_ClockConfig+0x15e>
 800177a:	e00e      	b.n	800179a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff f928 	bl	80009d0 <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a3a      	ldr	r2, [pc, #232]	@ (8001870 <HAL_RCC_ClockConfig+0x274>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e068      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001790:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	220c      	movs	r2, #12
 8001796:	4013      	ands	r3, r2
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d21e      	bcs.n	80017e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ba:	f7ff f909 	bl	80009d0 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	e009      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff f904 	bl	80009d0 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	4a28      	ldr	r2, [pc, #160]	@ (8001870 <HAL_RCC_ClockConfig+0x274>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e044      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d8:	4b24      	ldr	r3, [pc, #144]	@ (800186c <HAL_RCC_ClockConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d1ee      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2204      	movs	r2, #4
 80017ec:	4013      	ands	r3, r2
 80017ee:	d009      	beq.n	8001804 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <HAL_RCC_ClockConfig+0x27c>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	0019      	movs	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2208      	movs	r2, #8
 800180a:	4013      	ands	r3, r2
 800180c:	d00a      	beq.n	8001824 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a1a      	ldr	r2, [pc, #104]	@ (800187c <HAL_RCC_ClockConfig+0x280>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	00da      	lsls	r2, r3, #3
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001824:	f000 f832 	bl	800188c <HAL_RCC_GetSysClockFreq>
 8001828:	0001      	movs	r1, r0
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_RCC_ClockConfig+0x278>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	220f      	movs	r2, #15
 8001832:	4013      	ands	r3, r2
 8001834:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <HAL_RCC_ClockConfig+0x284>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	000a      	movs	r2, r1
 800183a:	40da      	lsrs	r2, r3
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_RCC_ClockConfig+0x288>)
 800183e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_RCC_ClockConfig+0x28c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	250b      	movs	r5, #11
 8001846:	197c      	adds	r4, r7, r5
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff f87b 	bl	8000944 <HAL_InitTick>
 800184e:	0003      	movs	r3, r0
 8001850:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001852:	197b      	adds	r3, r7, r5
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800185a:	197b      	adds	r3, r7, r5
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	e000      	b.n	8001862 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bdb0      	pop	{r4, r5, r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40022000 	.word	0x40022000
 8001870:	00001388 	.word	0x00001388
 8001874:	40021000 	.word	0x40021000
 8001878:	fffff8ff 	.word	0xfffff8ff
 800187c:	ffffc7ff 	.word	0xffffc7ff
 8001880:	08001fb8 	.word	0x08001fb8
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001892:	4b3c      	ldr	r3, [pc, #240]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	220c      	movs	r2, #12
 800189c:	4013      	ands	r3, r2
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d013      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x3e>
 80018a2:	d85c      	bhi.n	800195e <HAL_RCC_GetSysClockFreq+0xd2>
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d002      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x22>
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d00b      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x38>
 80018ac:	e057      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018ae:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2210      	movs	r2, #16
 80018b4:	4013      	ands	r3, r2
 80018b6:	d002      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018b8:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018ba:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018bc:	e05d      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80018be:	4b33      	ldr	r3, [pc, #204]	@ (800198c <HAL_RCC_GetSysClockFreq+0x100>)
 80018c0:	613b      	str	r3, [r7, #16]
      break;
 80018c2:	e05a      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x104>)
 80018c6:	613b      	str	r3, [r7, #16]
      break;
 80018c8:	e057      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	220f      	movs	r2, #15
 80018d0:	4013      	ands	r3, r2
 80018d2:	4a30      	ldr	r2, [pc, #192]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	0d9b      	lsrs	r3, r3, #22
 80018dc:	2203      	movs	r2, #3
 80018de:	4013      	ands	r3, r2
 80018e0:	3301      	adds	r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	4013      	ands	r3, r2
 80018ee:	d00f      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	000a      	movs	r2, r1
 80018f4:	0152      	lsls	r2, r2, #5
 80018f6:	1a52      	subs	r2, r2, r1
 80018f8:	0193      	lsls	r3, r2, #6
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	185b      	adds	r3, r3, r1
 8001900:	025b      	lsls	r3, r3, #9
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	0018      	movs	r0, r3
 8001906:	f7fe fbff 	bl	8000108 <__udivsi3>
 800190a:	0003      	movs	r3, r0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e023      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2210      	movs	r2, #16
 8001916:	4013      	ands	r3, r2
 8001918:	d00f      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	000a      	movs	r2, r1
 800191e:	0152      	lsls	r2, r2, #5
 8001920:	1a52      	subs	r2, r2, r1
 8001922:	0193      	lsls	r3, r2, #6
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	185b      	adds	r3, r3, r1
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	0018      	movs	r0, r3
 8001930:	f7fe fbea 	bl	8000108 <__udivsi3>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00e      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	000a      	movs	r2, r1
 800193e:	0152      	lsls	r2, r2, #5
 8001940:	1a52      	subs	r2, r2, r1
 8001942:	0193      	lsls	r3, r2, #6
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	185b      	adds	r3, r3, r1
 800194a:	029b      	lsls	r3, r3, #10
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f7fe fbda 	bl	8000108 <__udivsi3>
 8001954:	0003      	movs	r3, r0
 8001956:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
      break;
 800195c:	e00d      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	0b5b      	lsrs	r3, r3, #13
 8001964:	2207      	movs	r2, #7
 8001966:	4013      	ands	r3, r2
 8001968:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	0212      	lsls	r2, r2, #8
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
      break;
 8001978:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800197a:	693b      	ldr	r3, [r7, #16]
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b006      	add	sp, #24
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	003d0900 	.word	0x003d0900
 800198c:	00f42400 	.word	0x00f42400
 8001990:	007a1200 	.word	0x007a1200
 8001994:	08001fc8 	.word	0x08001fc8

08001998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e032      	b.n	8001a10 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2239      	movs	r2, #57	@ 0x39
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d107      	bne.n	80019c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2238      	movs	r2, #56	@ 0x38
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7fe ff41 	bl	8000848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2239      	movs	r2, #57	@ 0x39
 80019ca:	2102      	movs	r1, #2
 80019cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
 80019d6:	0019      	movs	r1, r3
 80019d8:	0010      	movs	r0, r2
 80019da:	f000 f959 	bl	8001c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	223e      	movs	r2, #62	@ 0x3e
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	223a      	movs	r2, #58	@ 0x3a
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	223b      	movs	r2, #59	@ 0x3b
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	223c      	movs	r2, #60	@ 0x3c
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	223d      	movs	r2, #61	@ 0x3d
 8001a02:	2101      	movs	r1, #1
 8001a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2239      	movs	r2, #57	@ 0x39
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2239      	movs	r2, #57	@ 0x39
 8001a24:	5c9b      	ldrb	r3, [r3, r2]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d001      	beq.n	8001a30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e033      	b.n	8001a98 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2239      	movs	r2, #57	@ 0x39
 8001a34:	2102      	movs	r1, #2
 8001a36:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	05db      	lsls	r3, r3, #23
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d00e      	beq.n	8001a62 <HAL_TIM_Base_Start+0x4a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <HAL_TIM_Base_Start+0x88>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d009      	beq.n	8001a62 <HAL_TIM_Base_Start+0x4a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <HAL_TIM_Base_Start+0x8c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d004      	beq.n	8001a62 <HAL_TIM_Base_Start+0x4a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <HAL_TIM_Base_Start+0x90>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d111      	bne.n	8001a86 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2207      	movs	r2, #7
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d010      	beq.n	8001a96 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a84:	e007      	b.n	8001a96 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40011400 	.word	0x40011400

08001aac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_TIM_Base_Stop+0x38>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	d107      	bne.n	8001ad0 <HAL_TIM_Base_Stop+0x24>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2239      	movs	r2, #57	@ 0x39
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	00001111 	.word	0x00001111

08001ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af2:	230f      	movs	r3, #15
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2238      	movs	r2, #56	@ 0x38
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_TIM_ConfigClockSource+0x20>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e0bc      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x19a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2238      	movs	r2, #56	@ 0x38
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2239      	movs	r2, #57	@ 0x39
 8001b14:	2102      	movs	r1, #2
 8001b16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2277      	movs	r2, #119	@ 0x77
 8001b24:	4393      	bics	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2280      	movs	r2, #128	@ 0x80
 8001b3e:	0192      	lsls	r2, r2, #6
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d040      	beq.n	8001bc6 <HAL_TIM_ConfigClockSource+0xde>
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	0192      	lsls	r2, r2, #6
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d900      	bls.n	8001b4e <HAL_TIM_ConfigClockSource+0x66>
 8001b4c:	e088      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b4e:	2280      	movs	r2, #128	@ 0x80
 8001b50:	0152      	lsls	r2, r2, #5
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d100      	bne.n	8001b58 <HAL_TIM_ConfigClockSource+0x70>
 8001b56:	e088      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0x182>
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	0152      	lsls	r2, r2, #5
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d900      	bls.n	8001b62 <HAL_TIM_ConfigClockSource+0x7a>
 8001b60:	e07e      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b62:	2b70      	cmp	r3, #112	@ 0x70
 8001b64:	d018      	beq.n	8001b98 <HAL_TIM_ConfigClockSource+0xb0>
 8001b66:	d900      	bls.n	8001b6a <HAL_TIM_ConfigClockSource+0x82>
 8001b68:	e07a      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b6a:	2b60      	cmp	r3, #96	@ 0x60
 8001b6c:	d04f      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x126>
 8001b6e:	d900      	bls.n	8001b72 <HAL_TIM_ConfigClockSource+0x8a>
 8001b70:	e076      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b72:	2b50      	cmp	r3, #80	@ 0x50
 8001b74:	d03b      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x106>
 8001b76:	d900      	bls.n	8001b7a <HAL_TIM_ConfigClockSource+0x92>
 8001b78:	e072      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b7a:	2b40      	cmp	r3, #64	@ 0x40
 8001b7c:	d057      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x146>
 8001b7e:	d900      	bls.n	8001b82 <HAL_TIM_ConfigClockSource+0x9a>
 8001b80:	e06e      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b82:	2b30      	cmp	r3, #48	@ 0x30
 8001b84:	d063      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x166>
 8001b86:	d86b      	bhi.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d060      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x166>
 8001b8c:	d868      	bhi.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d05d      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x166>
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d05b      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x166>
 8001b96:	e063      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ba8:	f000 f950 	bl	8001e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2277      	movs	r2, #119	@ 0x77
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	609a      	str	r2, [r3, #8]
      break;
 8001bc4:	e052      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bd6:	f000 f939 	bl	8001e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	01c9      	lsls	r1, r1, #7
 8001be8:	430a      	orrs	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
      break;
 8001bec:	e03e      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	f000 f8ac 	bl	8001d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2150      	movs	r1, #80	@ 0x50
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f906 	bl	8001e18 <TIM_ITRx_SetConfig>
      break;
 8001c0c:	e02e      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	f000 f8ca 	bl	8001db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2160      	movs	r1, #96	@ 0x60
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f8f6 	bl	8001e18 <TIM_ITRx_SetConfig>
      break;
 8001c2c:	e01e      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	f000 f88c 	bl	8001d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2140      	movs	r1, #64	@ 0x40
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 f8e6 	bl	8001e18 <TIM_ITRx_SetConfig>
      break;
 8001c4c:	e00e      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0019      	movs	r1, r3
 8001c58:	0010      	movs	r0, r2
 8001c5a:	f000 f8dd 	bl	8001e18 <TIM_ITRx_SetConfig>
      break;
 8001c5e:	e005      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001c60:	230f      	movs	r3, #15
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
      break;
 8001c68:	e000      	b.n	8001c6c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001c6a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2239      	movs	r2, #57	@ 0x39
 8001c70:	2101      	movs	r1, #1
 8001c72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2238      	movs	r2, #56	@ 0x38
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5499      	strb	r1, [r3, r2]

  return status;
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	ffff00ff 	.word	0xffff00ff

08001c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d00b      	beq.n	8001cc2 <TIM_Base_SetConfig+0x32>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a26      	ldr	r2, [pc, #152]	@ (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <TIM_Base_SetConfig+0x32>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a25      	ldr	r2, [pc, #148]	@ (8001d4c <TIM_Base_SetConfig+0xbc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d003      	beq.n	8001cc2 <TIM_Base_SetConfig+0x32>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	@ (8001d50 <TIM_Base_SetConfig+0xc0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d108      	bne.n	8001cd4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2270      	movs	r2, #112	@ 0x70
 8001cc6:	4393      	bics	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d00b      	beq.n	8001cf6 <TIM_Base_SetConfig+0x66>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <TIM_Base_SetConfig+0x66>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <TIM_Base_SetConfig+0xbc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <TIM_Base_SetConfig+0x66>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <TIM_Base_SetConfig+0xc0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d108      	bne.n	8001d08 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <TIM_Base_SetConfig+0xc4>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2280      	movs	r2, #128	@ 0x80
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	001a      	movs	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	46c0      	nop			@ (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40011400 	.word	0x40011400
 8001d54:	fffffcff 	.word	0xfffffcff

08001d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4393      	bics	r3, r2
 8001d72:	001a      	movs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	22f0      	movs	r2, #240	@ 0xf0
 8001d82:	4393      	bics	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	220a      	movs	r2, #10
 8001d94:	4393      	bics	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	621a      	str	r2, [r3, #32]
}
 8001dac:	46c0      	nop			@ (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b006      	add	sp, #24
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	4393      	bics	r3, r2
 8001dce:	001a      	movs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <TIM_TI2_ConfigInputStage+0x60>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	031b      	lsls	r3, r3, #12
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	22a0      	movs	r2, #160	@ 0xa0
 8001df0:	4393      	bics	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	621a      	str	r2, [r3, #32]
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b006      	add	sp, #24
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	ffff0fff 	.word	0xffff0fff

08001e18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2270      	movs	r2, #112	@ 0x70
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	2207      	movs	r2, #7
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	609a      	str	r2, [r3, #8]
}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <TIM_ETR_SetConfig+0x3c>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b006      	add	sp, #24
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	ffff00ff 	.word	0xffff00ff

08001e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2238      	movs	r2, #56	@ 0x38
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e047      	b.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2238      	movs	r2, #56	@ 0x38
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2239      	movs	r2, #57	@ 0x39
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2270      	movs	r2, #112	@ 0x70
 8001ec8:	4393      	bics	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d00e      	beq.n	8001f08 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d10c      	bne.n	8001f22 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2239      	movs	r2, #57	@ 0x39
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2238      	movs	r2, #56	@ 0x38
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40011400 	.word	0x40011400

08001f48 <memset>:
 8001f48:	0003      	movs	r3, r0
 8001f4a:	1882      	adds	r2, r0, r2
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <memset+0xa>
 8001f50:	4770      	bx	lr
 8001f52:	7019      	strb	r1, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	e7f9      	b.n	8001f4c <memset+0x4>

08001f58 <__libc_init_array>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	4c0c      	ldr	r4, [pc, #48]	@ (8001f90 <__libc_init_array+0x38>)
 8001f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8001f94 <__libc_init_array+0x3c>)
 8001f60:	1b64      	subs	r4, r4, r5
 8001f62:	10a4      	asrs	r4, r4, #2
 8001f64:	42a6      	cmp	r6, r4
 8001f66:	d109      	bne.n	8001f7c <__libc_init_array+0x24>
 8001f68:	2600      	movs	r6, #0
 8001f6a:	f000 f819 	bl	8001fa0 <_init>
 8001f6e:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <__libc_init_array+0x40>)
 8001f70:	4d0a      	ldr	r5, [pc, #40]	@ (8001f9c <__libc_init_array+0x44>)
 8001f72:	1b64      	subs	r4, r4, r5
 8001f74:	10a4      	asrs	r4, r4, #2
 8001f76:	42a6      	cmp	r6, r4
 8001f78:	d105      	bne.n	8001f86 <__libc_init_array+0x2e>
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	00b3      	lsls	r3, r6, #2
 8001f7e:	58eb      	ldr	r3, [r5, r3]
 8001f80:	4798      	blx	r3
 8001f82:	3601      	adds	r6, #1
 8001f84:	e7ee      	b.n	8001f64 <__libc_init_array+0xc>
 8001f86:	00b3      	lsls	r3, r6, #2
 8001f88:	58eb      	ldr	r3, [r5, r3]
 8001f8a:	4798      	blx	r3
 8001f8c:	3601      	adds	r6, #1
 8001f8e:	e7f2      	b.n	8001f76 <__libc_init_array+0x1e>
 8001f90:	08001fd4 	.word	0x08001fd4
 8001f94:	08001fd4 	.word	0x08001fd4
 8001f98:	08001fd8 	.word	0x08001fd8
 8001f9c:	08001fd4 	.word	0x08001fd4

08001fa0 <_init>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa6:	bc08      	pop	{r3}
 8001fa8:	469e      	mov	lr, r3
 8001faa:	4770      	bx	lr

08001fac <_fini>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb2:	bc08      	pop	{r3}
 8001fb4:	469e      	mov	lr, r3
 8001fb6:	4770      	bx	lr
