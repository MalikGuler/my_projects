
ekran_dokunmatik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001668  08003d74  08003d74  00004d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  00007090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080053dc  080053dc  00007090  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080053dc  080053dc  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053dc  080053dc  000063dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080053e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000090  08005474  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005474  00007210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e515  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002211  00000000  00000000  000155cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000177e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c3  00000000  00000000  00018478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117f0  00000000  00000000  00018e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d0f  00000000  00000000  0002a62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067576  00000000  00000000  0003c33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a38b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c90  00000000  00000000  000a38f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a6584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000090 	.word	0x20000090
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d5c 	.word	0x08003d5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000094 	.word	0x20000094
 8000100:	08003d5c 	.word	0x08003d5c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000400:	b5b0      	push	{r4, r5, r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af02      	add	r7, sp, #8
 8000406:	0005      	movs	r5, r0
 8000408:	000c      	movs	r4, r1
 800040a:	0010      	movs	r0, r2
 800040c:	0019      	movs	r1, r3
 800040e:	1dbb      	adds	r3, r7, #6
 8000410:	1c2a      	adds	r2, r5, #0
 8000412:	801a      	strh	r2, [r3, #0]
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	1c22      	adds	r2, r4, #0
 8000418:	801a      	strh	r2, [r3, #0]
 800041a:	1cbb      	adds	r3, r7, #2
 800041c:	1c02      	adds	r2, r0, #0
 800041e:	801a      	strh	r2, [r3, #0]
 8000420:	003b      	movs	r3, r7
 8000422:	1c0a      	adds	r2, r1, #0
 8000424:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	8818      	ldrh	r0, [r3, #0]
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	8819      	ldrh	r1, [r3, #0]
 800042e:	1cbb      	adds	r3, r7, #2
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	003b      	movs	r3, r7
 8000434:	881c      	ldrh	r4, [r3, #0]
 8000436:	2318      	movs	r3, #24
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	0023      	movs	r3, r4
 8000440:	f000 fb6e 	bl	8000b20 <ST7735_FillRectangle>
}
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bdb0      	pop	{r4, r5, r7, pc}

0800044c <FillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void FillScreen(uint16_t color) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af02      	add	r7, sp, #8
 8000452:	0002      	movs	r2, r0
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, 128, 64, color);
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2340      	movs	r3, #64	@ 0x40
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f7ff ffcb 	bl	8000400 <fillRect>
}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}

08000472 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	0219      	lsls	r1, r3, #8
 800047a:	2390      	movs	r3, #144	@ 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	2200      	movs	r2, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fe30 	bl	80020e6 <HAL_GPIO_WritePin>
}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	0219      	lsls	r1, r3, #8
 8000494:	2390      	movs	r3, #144	@ 0x90
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	2201      	movs	r2, #1
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fe23 	bl	80020e6 <HAL_GPIO_WritePin>
}
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <ST7735_Reset>:

void ST7735_Reset()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <ST7735_Reset+0x28>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	2140      	movs	r1, #64	@ 0x40
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fe17 	bl	80020e6 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80004b8:	2005      	movs	r0, #5
 80004ba:	f001 fbaf 	bl	8001c1c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80004be:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <ST7735_Reset+0x28>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2140      	movs	r1, #64	@ 0x40
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe0e 	bl	80020e6 <HAL_GPIO_WritePin>
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	48000400 	.word	0x48000400

080004d4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	0002      	movs	r2, r0
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	01d9      	lsls	r1, r3, #7
 80004e4:	2390      	movs	r3, #144	@ 0x90
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fdfb 	bl	80020e6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80004f0:	2301      	movs	r3, #1
 80004f2:	425b      	negs	r3, r3
 80004f4:	1df9      	adds	r1, r7, #7
 80004f6:	4804      	ldr	r0, [pc, #16]	@ (8000508 <ST7735_WriteCommand+0x34>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	f002 fd39 	bl	8002f70 <HAL_SPI_Transmit>
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	2000010c 	.word	0x2000010c

0800050c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	01d9      	lsls	r1, r3, #7
 800051a:	2390      	movs	r3, #144	@ 0x90
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2201      	movs	r2, #1
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fde0 	bl	80020e6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	2301      	movs	r3, #1
 800052c:	425b      	negs	r3, r3
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <ST7735_WriteData+0x34>)
 8000532:	f002 fd1d 	bl	8002f70 <HAL_SPI_Transmit>
}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	2000010c 	.word	0x2000010c

08000544 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	607a      	str	r2, [r7, #4]
 8000552:	220f      	movs	r2, #15
 8000554:	18ba      	adds	r2, r7, r2
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800055a:	e04a      	b.n	80005f2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	607a      	str	r2, [r7, #4]
 8000562:	210b      	movs	r1, #11
 8000564:	187a      	adds	r2, r7, r1
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800056a:	187b      	adds	r3, r7, r1
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff ffb0 	bl	80004d4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	607a      	str	r2, [r7, #4]
 800057a:	200a      	movs	r0, #10
 800057c:	183a      	adds	r2, r7, r0
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000582:	183b      	adds	r3, r7, r0
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b29a      	uxth	r2, r3
 8000588:	230c      	movs	r3, #12
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	400a      	ands	r2, r1
 8000590:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8000592:	183b      	adds	r3, r7, r0
 8000594:	183a      	adds	r2, r7, r0
 8000596:	7812      	ldrb	r2, [r2, #0]
 8000598:	217f      	movs	r1, #127	@ 0x7f
 800059a:	400a      	ands	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 800059e:	183b      	adds	r3, r7, r0
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d00c      	beq.n	80005c0 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80005a6:	0004      	movs	r4, r0
 80005a8:	183b      	adds	r3, r7, r0
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ffab 	bl	800050c <ST7735_WriteData>
            addr += numArgs;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80005c0:	210c      	movs	r1, #12
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d013      	beq.n	80005f2 <DisplayInit+0xae>
            ms = *addr++;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	2bff      	cmp	r3, #255	@ 0xff
 80005dc:	d103      	bne.n	80005e6 <DisplayInit+0xa2>
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	22fa      	movs	r2, #250	@ 0xfa
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80005e6:	230c      	movs	r3, #12
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 fb15 	bl	8001c1c <HAL_Delay>
    while(numCommands--) {
 80005f2:	220f      	movs	r2, #15
 80005f4:	18bb      	adds	r3, r7, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	18ba      	adds	r2, r7, r2
 80005fa:	1e59      	subs	r1, r3, #1
 80005fc:	7011      	strb	r1, [r2, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1ac      	bne.n	800055c <DisplayInit+0x18>
        }
    }
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b005      	add	sp, #20
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	0005      	movs	r5, r0
 8000614:	000c      	movs	r4, r1
 8000616:	0010      	movs	r0, r2
 8000618:	0019      	movs	r1, r3
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	1c2a      	adds	r2, r5, #0
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c22      	adds	r2, r4, #0
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	1d7b      	adds	r3, r7, #5
 8000628:	1c02      	adds	r2, r0, #0
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	1c0a      	adds	r2, r1, #0
 8000630:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000632:	202a      	movs	r0, #42	@ 0x2a
 8000634:	f7ff ff4e 	bl	80004d4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000638:	210c      	movs	r1, #12
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <ST7735_SetAddressWindow+0xa8>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	b2da      	uxtb	r2, r3
 800064c:	187b      	adds	r3, r7, r1
 800064e:	705a      	strb	r2, [r3, #1]
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	709a      	strb	r2, [r3, #2]
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <ST7735_SetAddressWindow+0xa8>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	1d7b      	adds	r3, r7, #5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	18d3      	adds	r3, r2, r3
 8000660:	b2da      	uxtb	r2, r3
 8000662:	187b      	adds	r3, r7, r1
 8000664:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000666:	000c      	movs	r4, r1
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2104      	movs	r1, #4
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff ff4d 	bl	800050c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000672:	202b      	movs	r0, #43	@ 0x2b
 8000674:	f7ff ff2e 	bl	80004d4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <ST7735_SetAddressWindow+0xac>)
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	b2da      	uxtb	r2, r3
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <ST7735_SetAddressWindow+0xac>)
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	18d3      	adds	r3, r2, r3
 8000694:	b2da      	uxtb	r2, r3
 8000696:	187b      	adds	r3, r7, r1
 8000698:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2104      	movs	r1, #4
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff34 	bl	800050c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80006a4:	202c      	movs	r0, #44	@ 0x2c
 80006a6:	f7ff ff15 	bl	80004d4 <ST7735_WriteCommand>
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	200000b3 	.word	0x200000b3
 80006b8:	200000b4 	.word	0x200000b4

080006bc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80006c8:	f7ff fed3 	bl	8000472 <ST7735_Select>
    ST7735_Reset();
 80006cc:	f7ff feec 	bl	80004a8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <ST7735_Init+0x48>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ff36 	bl	8000544 <DisplayInit>
    //DisplayInit(init_cmds2);
    DisplayInit(init_cmds3);
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <ST7735_Init+0x4c>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ff32 	bl	8000544 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <ST7735_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <ST7735_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 f80f 	bl	8000714 <ST7735_SetRotation>
    ST7735_Unselect();
 80006f6:	f7ff fec9 	bl	800048c <ST7735_Unselect>

}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	08003dc0 	.word	0x08003dc0
 8000708:	08003df8 	.word	0x08003df8
 800070c:	200000b1 	.word	0x200000b1
 8000710:	200000b2 	.word	0x200000b2

08000714 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2203      	movs	r2, #3
 800072e:	4013      	ands	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b36      	ldr	r3, [pc, #216]	@ (800080c <ST7735_SetRotation+0xf8>)
 8000734:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <ST7735_SetRotation+0xf8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d041      	beq.n	80007c2 <ST7735_SetRotation+0xae>
 800073e:	dc53      	bgt.n	80007e8 <ST7735_SetRotation+0xd4>
 8000740:	2b02      	cmp	r3, #2
 8000742:	d02b      	beq.n	800079c <ST7735_SetRotation+0x88>
 8000744:	dc50      	bgt.n	80007e8 <ST7735_SetRotation+0xd4>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <ST7735_SetRotation+0x3c>
 800074a:	2b01      	cmp	r3, #1
 800074c:	d013      	beq.n	8000776 <ST7735_SetRotation+0x62>
 800074e:	e04b      	b.n	80007e8 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	22c0      	movs	r2, #192	@ 0xc0
 8000756:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <ST7735_SetRotation+0xfc>)
 800075a:	2240      	movs	r2, #64	@ 0x40
 800075c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800075e:	4b2d      	ldr	r3, [pc, #180]	@ (8000814 <ST7735_SetRotation+0x100>)
 8000760:	2280      	movs	r2, #128	@ 0x80
 8000762:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000764:	4b2c      	ldr	r3, [pc, #176]	@ (8000818 <ST7735_SetRotation+0x104>)
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <ST7735_SetRotation+0x108>)
 800076a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800076c:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <ST7735_SetRotation+0x10c>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <ST7735_SetRotation+0x110>)
 8000772:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000774:	e038      	b.n	80007e8 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	22a0      	movs	r2, #160	@ 0xa0
 800077c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800077e:	4b25      	ldr	r3, [pc, #148]	@ (8000814 <ST7735_SetRotation+0x100>)
 8000780:	2240      	movs	r2, #64	@ 0x40
 8000782:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <ST7735_SetRotation+0xfc>)
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800078a:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <ST7735_SetRotation+0x104>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <ST7735_SetRotation+0x110>)
 8000790:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <ST7735_SetRotation+0x10c>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <ST7735_SetRotation+0x108>)
 8000798:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800079a:	e025      	b.n	80007e8 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <ST7735_SetRotation+0xfc>)
 80007a6:	2240      	movs	r2, #64	@ 0x40
 80007a8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <ST7735_SetRotation+0x100>)
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <ST7735_SetRotation+0x104>)
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <ST7735_SetRotation+0x108>)
 80007b6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <ST7735_SetRotation+0x10c>)
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <ST7735_SetRotation+0x110>)
 80007be:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80007c0:	e012      	b.n	80007e8 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	2260      	movs	r2, #96	@ 0x60
 80007c8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <ST7735_SetRotation+0x100>)
 80007cc:	2240      	movs	r2, #64	@ 0x40
 80007ce:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <ST7735_SetRotation+0xfc>)
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <ST7735_SetRotation+0x104>)
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <ST7735_SetRotation+0x110>)
 80007dc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <ST7735_SetRotation+0x10c>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <ST7735_SetRotation+0x108>)
 80007e4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80007e6:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 80007e8:	f7ff fe43 	bl	8000472 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80007ec:	2036      	movs	r0, #54	@ 0x36
 80007ee:	f7ff fe71 	bl	80004d4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80007f2:	230f      	movs	r3, #15
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2101      	movs	r1, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fe87 	bl	800050c <ST7735_WriteData>
  ST7735_Unselect();
 80007fe:	f7ff fe45 	bl	800048c <ST7735_Unselect>
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	200000b0 	.word	0x200000b0
 8000810:	200000ae 	.word	0x200000ae
 8000814:	200000ac 	.word	0x200000ac
 8000818:	200000b1 	.word	0x200000b1
 800081c:	200000b3 	.word	0x200000b3
 8000820:	200000b2 	.word	0x200000b2
 8000824:	200000b4 	.word	0x200000b4

08000828 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	0004      	movs	r4, r0
 8000830:	0008      	movs	r0, r1
 8000832:	0011      	movs	r1, r2
 8000834:	1dbb      	adds	r3, r7, #6
 8000836:	1c22      	adds	r2, r4, #0
 8000838:	801a      	strh	r2, [r3, #0]
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	1c02      	adds	r2, r0, #0
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	1cbb      	adds	r3, r7, #2
 8000842:	1c0a      	adds	r2, r1, #0
 8000844:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8000846:	1dbb      	adds	r3, r7, #6
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <ST7735_DrawPixel+0x94>)
 800084c:	2100      	movs	r1, #0
 800084e:	5e52      	ldrsh	r2, [r2, r1]
 8000850:	4293      	cmp	r3, r2
 8000852:	da2f      	bge.n	80008b4 <ST7735_DrawPixel+0x8c>
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <ST7735_DrawPixel+0x98>)
 800085a:	2100      	movs	r1, #0
 800085c:	5e52      	ldrsh	r2, [r2, r1]
 800085e:	4293      	cmp	r3, r2
 8000860:	da28      	bge.n	80008b4 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8000862:	f7ff fe06 	bl	8000472 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b2d8      	uxtb	r0, r3
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	1dbb      	adds	r3, r7, #6
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	3301      	adds	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	3301      	adds	r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f7ff fec1 	bl	800060c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800088a:	1cbb      	adds	r3, r7, #2
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2da      	uxtb	r2, r3
 8000894:	210c      	movs	r1, #12
 8000896:	187b      	adds	r3, r7, r1
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	1cbb      	adds	r3, r7, #2
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2102      	movs	r1, #2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff fe2f 	bl	800050c <ST7735_WriteData>

    ST7735_Unselect();
 80008ae:	f7ff fded 	bl	800048c <ST7735_Unselect>
 80008b2:	e000      	b.n	80008b6 <ST7735_DrawPixel+0x8e>
        return;
 80008b4:	46c0      	nop			@ (mov r8, r8)
}
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b005      	add	sp, #20
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	200000ac 	.word	0x200000ac
 80008c0:	200000ae 	.word	0x200000ae

080008c4 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008c4:	b082      	sub	sp, #8
 80008c6:	b5b0      	push	{r4, r5, r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	0004      	movs	r4, r0
 80008ce:	0008      	movs	r0, r1
 80008d0:	0011      	movs	r1, r2
 80008d2:	2204      	movs	r2, #4
 80008d4:	2530      	movs	r5, #48	@ 0x30
 80008d6:	1952      	adds	r2, r2, r5
 80008d8:	19d2      	adds	r2, r2, r7
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	1dbb      	adds	r3, r7, #6
 80008de:	1c22      	adds	r2, r4, #0
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	1c02      	adds	r2, r0, #0
 80008e6:	801a      	strh	r2, [r3, #0]
 80008e8:	1cfb      	adds	r3, r7, #3
 80008ea:	1c0a      	adds	r2, r1, #0
 80008ec:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b2d8      	uxtb	r0, r3
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b2d9      	uxtb	r1, r3
 80008fa:	1dbb      	adds	r3, r7, #6
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	2304      	movs	r3, #4
 8000902:	195b      	adds	r3, r3, r5
 8000904:	19db      	adds	r3, r3, r7
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	3b01      	subs	r3, #1
 800090e:	b2dc      	uxtb	r4, r3
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	2304      	movs	r3, #4
 8000918:	195b      	adds	r3, r3, r5
 800091a:	19db      	adds	r3, r3, r7
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	18d3      	adds	r3, r2, r3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	0022      	movs	r2, r4
 8000928:	f7ff fe70 	bl	800060c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	e053      	b.n	80009da <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8000932:	2304      	movs	r3, #4
 8000934:	2030      	movs	r0, #48	@ 0x30
 8000936:	181b      	adds	r3, r3, r0
 8000938:	19db      	adds	r3, r3, r7
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	1cfb      	adds	r3, r7, #3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3b20      	subs	r3, #32
 8000942:	2104      	movs	r1, #4
 8000944:	1809      	adds	r1, r1, r0
 8000946:	19c9      	adds	r1, r1, r7
 8000948:	7849      	ldrb	r1, [r1, #1]
 800094a:	434b      	muls	r3, r1
 800094c:	0019      	movs	r1, r3
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	18cb      	adds	r3, r1, r3
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	e030      	b.n	80009c2 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	409a      	lsls	r2, r3
 8000966:	2380      	movs	r3, #128	@ 0x80
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	4013      	ands	r3, r2
 800096c:	d013      	beq.n	8000996 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800096e:	203c      	movs	r0, #60	@ 0x3c
 8000970:	183b      	adds	r3, r7, r0
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2da      	uxtb	r2, r3
 800097a:	2110      	movs	r1, #16
 800097c:	187b      	adds	r3, r7, r1
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	183b      	adds	r3, r7, r0
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	187b      	adds	r3, r7, r1
 8000988:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2102      	movs	r1, #2
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff fdbc 	bl	800050c <ST7735_WriteData>
 8000994:	e012      	b.n	80009bc <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000996:	2040      	movs	r0, #64	@ 0x40
 8000998:	183b      	adds	r3, r7, r0
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	210c      	movs	r1, #12
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	183b      	adds	r3, r7, r0
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2102      	movs	r1, #2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff fda8 	bl	800050c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	3301      	adds	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	2304      	movs	r3, #4
 80009c4:	2230      	movs	r2, #48	@ 0x30
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	19db      	adds	r3, r3, r7
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	001a      	movs	r2, r3
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d3c5      	bcc.n	8000960 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	2304      	movs	r3, #4
 80009dc:	2230      	movs	r2, #48	@ 0x30
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	19db      	adds	r3, r3, r7
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	001a      	movs	r2, r3
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d3a2      	bcc.n	8000932 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b008      	add	sp, #32
 80009f4:	bcb0      	pop	{r4, r5, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	b002      	add	sp, #8
 80009fa:	4718      	bx	r3

080009fc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009fc:	b082      	sub	sp, #8
 80009fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a00:	b087      	sub	sp, #28
 8000a02:	af04      	add	r7, sp, #16
 8000a04:	603a      	str	r2, [r7, #0]
 8000a06:	2204      	movs	r2, #4
 8000a08:	2418      	movs	r4, #24
 8000a0a:	1912      	adds	r2, r2, r4
 8000a0c:	2408      	movs	r4, #8
 8000a0e:	46a4      	mov	ip, r4
 8000a10:	44bc      	add	ip, r7
 8000a12:	4462      	add	r2, ip
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	1c02      	adds	r2, r0, #0
 8000a1a:	801a      	strh	r2, [r3, #0]
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	1c0a      	adds	r2, r1, #0
 8000a20:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 8000a22:	f7ff fd26 	bl	8000472 <ST7735_Select>

    while(*str) {
 8000a26:	e067      	b.n	8000af8 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8000a28:	1dbb      	adds	r3, r7, #6
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	2118      	movs	r1, #24
 8000a30:	1852      	adds	r2, r2, r1
 8000a32:	2008      	movs	r0, #8
 8000a34:	4684      	mov	ip, r0
 8000a36:	44bc      	add	ip, r7
 8000a38:	4462      	add	r2, ip
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	189b      	adds	r3, r3, r2
 8000a3e:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <ST7735_WriteString+0x11c>)
 8000a40:	2000      	movs	r0, #0
 8000a42:	5e12      	ldrsh	r2, [r2, r0]
 8000a44:	4293      	cmp	r3, r2
 8000a46:	db27      	blt.n	8000a98 <ST7735_WriteString+0x9c>
            x = 0;
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	0008      	movs	r0, r1
 8000a52:	185b      	adds	r3, r3, r1
 8000a54:	2208      	movs	r2, #8
 8000a56:	4694      	mov	ip, r2
 8000a58:	44bc      	add	ip, r7
 8000a5a:	4463      	add	r3, ip
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	0019      	movs	r1, r3
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	1d3a      	adds	r2, r7, #4
 8000a64:	8812      	ldrh	r2, [r2, #0]
 8000a66:	188a      	adds	r2, r1, r2
 8000a68:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	2204      	movs	r2, #4
 8000a70:	1812      	adds	r2, r2, r0
 8000a72:	2108      	movs	r1, #8
 8000a74:	468c      	mov	ip, r1
 8000a76:	44bc      	add	ip, r7
 8000a78:	4462      	add	r2, ip
 8000a7a:	7852      	ldrb	r2, [r2, #1]
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <ST7735_WriteString+0x120>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	5e52      	ldrsh	r2, [r2, r1]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	da3c      	bge.n	8000b02 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b20      	cmp	r3, #32
 8000a8e:	d103      	bne.n	8000a98 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	603b      	str	r3, [r7, #0]
                continue;
 8000a96:	e02f      	b.n	8000af8 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	781d      	ldrb	r5, [r3, #0]
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	2618      	movs	r6, #24
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	4694      	mov	ip, r2
 8000aa6:	44bc      	add	ip, r7
 8000aa8:	4463      	add	r3, ip
 8000aaa:	1d3a      	adds	r2, r7, #4
 8000aac:	8814      	ldrh	r4, [r2, #0]
 8000aae:	1dba      	adds	r2, r7, #6
 8000ab0:	8810      	ldrh	r0, [r2, #0]
 8000ab2:	2228      	movs	r2, #40	@ 0x28
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	1852      	adds	r2, r2, r1
 8000ab8:	19d2      	adds	r2, r2, r7
 8000aba:	8812      	ldrh	r2, [r2, #0]
 8000abc:	9202      	str	r2, [sp, #8]
 8000abe:	2224      	movs	r2, #36	@ 0x24
 8000ac0:	1852      	adds	r2, r2, r1
 8000ac2:	19d2      	adds	r2, r2, r7
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	9201      	str	r2, [sp, #4]
 8000ac8:	466a      	mov	r2, sp
 8000aca:	6859      	ldr	r1, [r3, #4]
 8000acc:	6011      	str	r1, [r2, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	002a      	movs	r2, r5
 8000ad2:	0021      	movs	r1, r4
 8000ad4:	f7ff fef6 	bl	80008c4 <ST7735_WriteChar>
        x += font.width;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	199b      	adds	r3, r3, r6
 8000adc:	2208      	movs	r2, #8
 8000ade:	4694      	mov	ip, r2
 8000ae0:	44bc      	add	ip, r7
 8000ae2:	4463      	add	r3, ip
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	1dbb      	adds	r3, r7, #6
 8000aea:	1dba      	adds	r2, r7, #6
 8000aec:	8812      	ldrh	r2, [r2, #0]
 8000aee:	188a      	adds	r2, r1, r2
 8000af0:	801a      	strh	r2, [r3, #0]
        str++;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d193      	bne.n	8000a28 <ST7735_WriteString+0x2c>
 8000b00:	e000      	b.n	8000b04 <ST7735_WriteString+0x108>
                break;
 8000b02:	46c0      	nop			@ (mov r8, r8)
    }

    ST7735_Unselect();
 8000b04:	f7ff fcc2 	bl	800048c <ST7735_Unselect>
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b003      	add	sp, #12
 8000b0e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b10:	bc08      	pop	{r3}
 8000b12:	b002      	add	sp, #8
 8000b14:	4718      	bx	r3
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	200000ac 	.word	0x200000ac
 8000b1c:	200000ae 	.word	0x200000ae

08000b20 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	0005      	movs	r5, r0
 8000b28:	000c      	movs	r4, r1
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	1dbb      	adds	r3, r7, #6
 8000b30:	1c2a      	adds	r2, r5, #0
 8000b32:	801a      	strh	r2, [r3, #0]
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	1c22      	adds	r2, r4, #0
 8000b38:	801a      	strh	r2, [r3, #0]
 8000b3a:	1cbb      	adds	r3, r7, #2
 8000b3c:	1c02      	adds	r2, r0, #0
 8000b3e:	801a      	strh	r2, [r3, #0]
 8000b40:	003b      	movs	r3, r7
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8000c74 <ST7735_FillRectangle+0x154>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	5e52      	ldrsh	r2, [r2, r1]
 8000b50:	4293      	cmp	r3, r2
 8000b52:	db00      	blt.n	8000b56 <ST7735_FillRectangle+0x36>
 8000b54:	e089      	b.n	8000c6a <ST7735_FillRectangle+0x14a>
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	4a47      	ldr	r2, [pc, #284]	@ (8000c78 <ST7735_FillRectangle+0x158>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	5e52      	ldrsh	r2, [r2, r1]
 8000b60:	4293      	cmp	r3, r2
 8000b62:	db00      	blt.n	8000b66 <ST7735_FillRectangle+0x46>
 8000b64:	e081      	b.n	8000c6a <ST7735_FillRectangle+0x14a>
    if((x + w - 1) >= _width) w = _width - x;
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	881a      	ldrh	r2, [r3, #0]
 8000b6a:	1cbb      	adds	r3, r7, #2
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	4a40      	ldr	r2, [pc, #256]	@ (8000c74 <ST7735_FillRectangle+0x154>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	5e52      	ldrsh	r2, [r2, r1]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	dd08      	ble.n	8000b8c <ST7735_FillRectangle+0x6c>
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c74 <ST7735_FillRectangle+0x154>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8000b80:	b299      	uxth	r1, r3
 8000b82:	1cbb      	adds	r3, r7, #2
 8000b84:	1dba      	adds	r2, r7, #6
 8000b86:	8812      	ldrh	r2, [r2, #0]
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	881a      	ldrh	r2, [r3, #0]
 8000b90:	003b      	movs	r3, r7
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	4a38      	ldr	r2, [pc, #224]	@ (8000c78 <ST7735_FillRectangle+0x158>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	5e52      	ldrsh	r2, [r2, r1]
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	dd08      	ble.n	8000bb2 <ST7735_FillRectangle+0x92>
 8000ba0:	4b35      	ldr	r3, [pc, #212]	@ (8000c78 <ST7735_FillRectangle+0x158>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	003b      	movs	r3, r7
 8000baa:	1d3a      	adds	r2, r7, #4
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	1a8a      	subs	r2, r1, r2
 8000bb0:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8000bb2:	f7ff fc5e 	bl	8000472 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	b2d9      	uxtb	r1, r3
 8000bc2:	1dbb      	adds	r3, r7, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	1cbb      	adds	r3, r7, #2
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	18d3      	adds	r3, r2, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b2dc      	uxtb	r4, r3
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	003b      	movs	r3, r7
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	18d3      	adds	r3, r2, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	3b01      	subs	r3, #1
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	0022      	movs	r2, r4
 8000bec:	f7ff fd0e 	bl	800060c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	200c      	movs	r0, #12
 8000bfe:	183b      	adds	r3, r7, r0
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	01d9      	lsls	r1, r3, #7
 8000c10:	2390      	movs	r3, #144	@ 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2201      	movs	r2, #1
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fa65 	bl	80020e6 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	003a      	movs	r2, r7
 8000c20:	8812      	ldrh	r2, [r2, #0]
 8000c22:	801a      	strh	r2, [r3, #0]
 8000c24:	e01a      	b.n	8000c5c <ST7735_FillRectangle+0x13c>
        for(x = w; x > 0; x--) {
 8000c26:	1dbb      	adds	r3, r7, #6
 8000c28:	1cba      	adds	r2, r7, #2
 8000c2a:	8812      	ldrh	r2, [r2, #0]
 8000c2c:	801a      	strh	r2, [r3, #0]
 8000c2e:	e00c      	b.n	8000c4a <ST7735_FillRectangle+0x12a>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	220c      	movs	r2, #12
 8000c36:	18b9      	adds	r1, r7, r2
 8000c38:	4810      	ldr	r0, [pc, #64]	@ (8000c7c <ST7735_FillRectangle+0x15c>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	f002 f998 	bl	8002f70 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000c40:	1dbb      	adds	r3, r7, #6
 8000c42:	881a      	ldrh	r2, [r3, #0]
 8000c44:	1dbb      	adds	r3, r7, #6
 8000c46:	3a01      	subs	r2, #1
 8000c48:	801a      	strh	r2, [r3, #0]
 8000c4a:	1dbb      	adds	r3, r7, #6
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1ee      	bne.n	8000c30 <ST7735_FillRectangle+0x110>
    for(y = h; y > 0; y--) {
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	881a      	ldrh	r2, [r3, #0]
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	801a      	strh	r2, [r3, #0]
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1e0      	bne.n	8000c26 <ST7735_FillRectangle+0x106>
        }
    }

    ST7735_Unselect();
 8000c64:	f7ff fc12 	bl	800048c <ST7735_Unselect>
 8000c68:	e000      	b.n	8000c6c <ST7735_FillRectangle+0x14c>
    if((x >= _width) || (y >= _height)) return;
 8000c6a:	46c0      	nop			@ (mov r8, r8)
}
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bdb0      	pop	{r4, r5, r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	200000ac 	.word	0x200000ac
 8000c78:	200000ae 	.word	0x200000ae
 8000c7c:	2000010c 	.word	0x2000010c

08000c80 <draw_image_mono>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    ST7735_Unselect();
}

void draw_image_mono(int x, int y, const tImage* img, uint16_t fgColor, uint16_t bgColor)
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	1cbb      	adds	r3, r7, #2
 8000c90:	801a      	strh	r2, [r3, #0]
    const uint8_t* data = img->data;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	61bb      	str	r3, [r7, #24]
    uint16_t width = img->width;
 8000c98:	2316      	movs	r3, #22
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	8892      	ldrh	r2, [r2, #4]
 8000ca0:	801a      	strh	r2, [r3, #0]
    uint16_t height = img->height;
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	88d2      	ldrh	r2, [r2, #6]
 8000caa:	801a      	strh	r2, [r3, #0]

    for (uint16_t j = 0; j < height; j++) {
 8000cac:	231e      	movs	r3, #30
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
 8000cb4:	e05d      	b.n	8000d72 <draw_image_mono+0xf2>
        for (uint16_t i = 0; i < width; i++) {
 8000cb6:	231c      	movs	r3, #28
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2200      	movs	r2, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
 8000cbe:	e04a      	b.n	8000d56 <draw_image_mono+0xd6>
            uint16_t byteIndex = (j * ((width + 7) / 8)) + (i / 8);
 8000cc0:	2316      	movs	r3, #22
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	3307      	adds	r3, #7
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da00      	bge.n	8000cce <draw_image_mono+0x4e>
 8000ccc:	3307      	adds	r3, #7
 8000cce:	10db      	asrs	r3, r3, #3
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	241e      	movs	r4, #30
 8000cd4:	193a      	adds	r2, r7, r4
 8000cd6:	8812      	ldrh	r2, [r2, #0]
 8000cd8:	4353      	muls	r3, r2
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	201c      	movs	r0, #28
 8000cde:	183b      	adds	r3, r7, r0
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	2512      	movs	r5, #18
 8000ce8:	197b      	adds	r3, r7, r5
 8000cea:	188a      	adds	r2, r1, r2
 8000cec:	801a      	strh	r2, [r3, #0]
            uint8_t bit = (data[byteIndex] >> (7 - (i % 8))) & 0x01;
 8000cee:	197b      	adds	r3, r7, r5
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	183b      	adds	r3, r7, r0
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	2207      	movs	r2, #7
 8000d02:	4013      	ands	r3, r2
 8000d04:	4119      	asrs	r1, r3
 8000d06:	000b      	movs	r3, r1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	2511      	movs	r5, #17
 8000d0c:	197b      	adds	r3, r7, r5
 8000d0e:	2101      	movs	r1, #1
 8000d10:	400a      	ands	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]
            ST7735_DrawPixel(x + i, y + j, bit ? fgColor : bgColor);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	183b      	adds	r3, r7, r0
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	b298      	uxth	r0, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	18d3      	adds	r3, r2, r3
 8000d2a:	b299      	uxth	r1, r3
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <draw_image_mono+0xba>
 8000d34:	1cbb      	adds	r3, r7, #2
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	e004      	b.n	8000d44 <draw_image_mono+0xc4>
 8000d3a:	2328      	movs	r3, #40	@ 0x28
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	19db      	adds	r3, r3, r7
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	001a      	movs	r2, r3
 8000d46:	f7ff fd6f 	bl	8000828 <ST7735_DrawPixel>
        for (uint16_t i = 0; i < width; i++) {
 8000d4a:	211c      	movs	r1, #28
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	881a      	ldrh	r2, [r3, #0]
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	3201      	adds	r2, #1
 8000d54:	801a      	strh	r2, [r3, #0]
 8000d56:	231c      	movs	r3, #28
 8000d58:	18fa      	adds	r2, r7, r3
 8000d5a:	2316      	movs	r3, #22
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	8812      	ldrh	r2, [r2, #0]
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3ac      	bcc.n	8000cc0 <draw_image_mono+0x40>
    for (uint16_t j = 0; j < height; j++) {
 8000d66:	211e      	movs	r1, #30
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	881a      	ldrh	r2, [r3, #0]
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	3201      	adds	r2, #1
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	231e      	movs	r3, #30
 8000d74:	18fa      	adds	r2, r7, r3
 8000d76:	2314      	movs	r3, #20
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	8812      	ldrh	r2, [r2, #0]
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d399      	bcc.n	8000cb6 <draw_image_mono+0x36>
        }
    }
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b008      	add	sp, #32
 8000d8a:	bdb0      	pop	{r4, r5, r7, pc}

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f000 fedf 	bl	8001b54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f8ff 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 fa11 	bl	80011c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d9e:	f000 f9a1 	bl	80010e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000da2:	f000 f9dd 	bl	8001160 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000da6:	f000 f95d 	bl	8001064 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  ST7735_Init(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff fc86 	bl	80006bc <ST7735_Init>
  ST7735_SetRotation(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff fcaf 	bl	8000714 <ST7735_SetRotation>
  show_startup_screen();
 8000db6:	f000 fc4b 	bl	8001650 <show_startup_screen>
  while (1)
  {



	  uint32_t now = HAL_GetTick();
 8000dba:	f000 ff25 	bl	8001c08 <HAL_GetTick>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	607b      	str	r3, [r7, #4]

	  if (!startupDone && (now - startupTime >= 1500))
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <main+0x1f0>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4053      	eors	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00f      	beq.n	8000df0 <main+0x64>
 8000dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f80 <main+0x1f4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8000f84 <main+0x1f8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d908      	bls.n	8000df0 <main+0x64>
	  {
		  FillScreen(BLACK); // Geçiş yap
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fb34 	bl	800044c <FillScreen>
		  drawMenu(0);              // Menü çiz
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 fac7 	bl	8001378 <drawMenu>
		  startupDone = true;
 8000dea:	4b64      	ldr	r3, [pc, #400]	@ (8000f7c <main+0x1f0>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
	  }


	  if (startupDone && now - lastButtonPressTime > debounceDelay)
 8000df0:	4b62      	ldr	r3, [pc, #392]	@ (8000f7c <main+0x1f0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0e0      	beq.n	8000dba <main+0x2e>
 8000df8:	4b63      	ldr	r3, [pc, #396]	@ (8000f88 <main+0x1fc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	4b62      	ldr	r3, [pc, #392]	@ (8000f8c <main+0x200>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d9d8      	bls.n	8000dba <main+0x2e>
	  {

		 if (currentPage == THEME_PAGE_INDEX)
 8000e08:	4b61      	ldr	r3, [pc, #388]	@ (8000f90 <main+0x204>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <main+0x8a>
		 {
			 theme_page_tuslari();
 8000e10:	f000 fcb2 	bl	8001778 <theme_page_tuslari>
 8000e14:	e7d1      	b.n	8000dba <main+0x2e>
		 }
		 else{

		  // Menü sağ (PA0)
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000e16:	2390      	movs	r3, #144	@ 0x90
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 f945 	bl	80020ac <HAL_GPIO_ReadPin>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d119      	bne.n	8000e5a <main+0xce>
		 {
			 uint8_t newPage = (currentPage + 2) % MENU_ITEM_COUNT;
 8000e26:	4b5a      	ldr	r3, [pc, #360]	@ (8000f90 <main+0x204>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fae0 	bl	80003f4 <__aeabi_idivmod>
 8000e34:	000b      	movs	r3, r1
 8000e36:	001a      	movs	r2, r3
 8000e38:	1cfb      	adds	r3, r7, #3
 8000e3a:	701a      	strb	r2, [r3, #0]
			 animateMenuTransition(currentPage, newPage, true);
 8000e3c:	4b54      	ldr	r3, [pc, #336]	@ (8000f90 <main+0x204>)
 8000e3e:	7818      	ldrb	r0, [r3, #0]
 8000e40:	1cfb      	adds	r3, r7, #3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2201      	movs	r2, #1
 8000e46:	0019      	movs	r1, r3
 8000e48:	f000 fb02 	bl	8001450 <animateMenuTransition>
			 currentPage = newPage;
 8000e4c:	4b50      	ldr	r3, [pc, #320]	@ (8000f90 <main+0x204>)
 8000e4e:	1cfa      	adds	r2, r7, #3
 8000e50:	7812      	ldrb	r2, [r2, #0]
 8000e52:	701a      	strb	r2, [r3, #0]
			 lastButtonPressTime = now;
 8000e54:	4b4c      	ldr	r3, [pc, #304]	@ (8000f88 <main+0x1fc>)
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
		 }

		 // Menü sol (PA1)
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000e5a:	2390      	movs	r3, #144	@ 0x90
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	2102      	movs	r1, #2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 f923 	bl	80020ac <HAL_GPIO_ReadPin>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d119      	bne.n	8000e9e <main+0x112>
		 {
		     uint8_t newPage = (currentPage + MENU_ITEM_COUNT - 2) % MENU_ITEM_COUNT;
 8000e6a:	4b49      	ldr	r3, [pc, #292]	@ (8000f90 <main+0x204>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	3305      	adds	r3, #5
 8000e70:	2107      	movs	r1, #7
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fabe 	bl	80003f4 <__aeabi_idivmod>
 8000e78:	000b      	movs	r3, r1
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	1cbb      	adds	r3, r7, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
		     animateMenuTransition(currentPage, newPage, false);
 8000e80:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <main+0x204>)
 8000e82:	7818      	ldrb	r0, [r3, #0]
 8000e84:	1cbb      	adds	r3, r7, #2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f000 fae0 	bl	8001450 <animateMenuTransition>
		     currentPage = newPage;
 8000e90:	4b3f      	ldr	r3, [pc, #252]	@ (8000f90 <main+0x204>)
 8000e92:	1cba      	adds	r2, r7, #2
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	701a      	strb	r2, [r3, #0]
		     lastButtonPressTime = now;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <main+0x1fc>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
		 }


		 // 1. satır lambayı aç (PA2)
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8000e9e:	2390      	movs	r3, #144	@ 0x90
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 f901 	bl	80020ac <HAL_GPIO_ReadPin>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d10f      	bne.n	8000ece <main+0x142>
		 {
			menu_items[currentPage].state = true;
 8000eae:	4b38      	ldr	r3, [pc, #224]	@ (8000f90 <main+0x204>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4a38      	ldr	r2, [pc, #224]	@ (8000f94 <main+0x208>)
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	18d3      	adds	r3, r2, r3
 8000eb8:	330c      	adds	r3, #12
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
			drawMenu(currentPage);
 8000ebe:	4b34      	ldr	r3, [pc, #208]	@ (8000f90 <main+0x204>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fa58 	bl	8001378 <drawMenu>
			lastButtonPressTime = now;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <main+0x1fc>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
		 }

		 // 1. satır lambayı kapat (PA3)
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8000ece:	2390      	movs	r3, #144	@ 0x90
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 f8e9 	bl	80020ac <HAL_GPIO_ReadPin>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d10f      	bne.n	8000efe <main+0x172>
		 {
			menu_items[currentPage].state = false;
 8000ede:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <main+0x204>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f94 <main+0x208>)
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	330c      	adds	r3, #12
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			drawMenu(currentPage);
 8000eee:	4b28      	ldr	r3, [pc, #160]	@ (8000f90 <main+0x204>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fa40 	bl	8001378 <drawMenu>
			lastButtonPressTime = now;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <main+0x1fc>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
		 }

		 // 2. satır lambayı aç (PA4)
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET)
 8000efe:	2390      	movs	r3, #144	@ 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2110      	movs	r1, #16
 8000f04:	0018      	movs	r0, r3
 8000f06:	f001 f8d1 	bl	80020ac <HAL_GPIO_ReadPin>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d115      	bne.n	8000f3a <main+0x1ae>
		 {
			menu_items[(currentPage + 1) % MENU_ITEM_COUNT].state = true;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <main+0x204>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	2107      	movs	r1, #7
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fa6c 	bl	80003f4 <__aeabi_idivmod>
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f94 <main+0x208>)
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	18d3      	adds	r3, r2, r3
 8000f24:	330c      	adds	r3, #12
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
			drawMenu(currentPage);
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <main+0x204>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 fa22 	bl	8001378 <drawMenu>
			lastButtonPressTime = now;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <main+0x1fc>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
		 }

		 // 2. satır lambayı kapat (PA5)
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8000f3a:	2390      	movs	r3, #144	@ 0x90
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	2120      	movs	r1, #32
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 f8b3 	bl	80020ac <HAL_GPIO_ReadPin>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d000      	beq.n	8000f4c <main+0x1c0>
 8000f4a:	e736      	b.n	8000dba <main+0x2e>
		 {
			menu_items[(currentPage + 1) % MENU_ITEM_COUNT].state = false;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <main+0x204>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	2107      	movs	r1, #7
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fa4d 	bl	80003f4 <__aeabi_idivmod>
 8000f5a:	000b      	movs	r3, r1
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <main+0x208>)
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	330c      	adds	r3, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			drawMenu(currentPage);
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <main+0x204>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 fa03 	bl	8001378 <drawMenu>
			lastButtonPressTime = now;
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <main+0x1fc>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
  {
 8000f78:	e71f      	b.n	8000dba <main+0x2e>
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	20000200 	.word	0x20000200
 8000f80:	20000204 	.word	0x20000204
 8000f84:	000005db 	.word	0x000005db
 8000f88:	200001fc 	.word	0x200001fc
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	200001f8 	.word	0x200001f8
 8000f94:	20000014 	.word	0x20000014

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b095      	sub	sp, #84	@ 0x54
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	2420      	movs	r4, #32
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	2330      	movs	r3, #48	@ 0x30
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f002 feab 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fae:	2310      	movs	r3, #16
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f002 fea3 	bl	8003d04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f002 fe9c 	bl	8003d04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	0021      	movs	r1, r4
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2210      	movs	r2, #16
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	0212      	lsls	r2, r2, #8
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	0352      	lsls	r2, r2, #13
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 f9cc 	bl	800239c <HAL_RCC_OscConfig>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001008:	f000 f9b0 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	2110      	movs	r1, #16
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2202      	movs	r2, #2
 8001018:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2101      	movs	r1, #1
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fcd4 	bl	80029d8 <HAL_RCC_ClockConfig>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001034:	f000 f99a 	bl	800136c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001038:	003b      	movs	r3, r7
 800103a:	2221      	movs	r2, #33	@ 0x21
 800103c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800103e:	003b      	movs	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001044:	003b      	movs	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104a:	003b      	movs	r3, r7
 800104c:	0018      	movs	r0, r3
 800104e:	f001 fe09 	bl	8002c64 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001056:	f000 f989 	bl	800136c <Error_Handler>
  }
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b015      	add	sp, #84	@ 0x54
 8001060:	bd90      	pop	{r4, r7, pc}
	...

08001064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <MX_I2C1_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001070:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <MX_I2C1_Init+0x7c>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800107c:	2201      	movs	r2, #1
 800107e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_I2C1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_I2C1_Init+0x74>)
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 f83d 	bl	8002120 <HAL_I2C_Init>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010aa:	f000 f95f 	bl	800136c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_I2C1_Init+0x74>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	0018      	movs	r0, r3
 80010b4:	f001 f8da 	bl	800226c <HAL_I2CEx_ConfigAnalogFilter>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f000 f956 	bl	800136c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <MX_I2C1_Init+0x74>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f001 f91d 	bl	8002304 <HAL_I2CEx_ConfigDigitalFilter>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f94d 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000b8 	.word	0x200000b8
 80010dc:	40005400 	.word	0x40005400
 80010e0:	00201d2b 	.word	0x00201d2b

080010e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <MX_SPI1_Init+0x74>)
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <MX_SPI1_Init+0x78>)
 80010ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_SPI1_Init+0x74>)
 80010f0:	2282      	movs	r2, #130	@ 0x82
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_SPI1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_SPI1_Init+0x74>)
 80010fe:	22c0      	movs	r2, #192	@ 0xc0
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <MX_SPI1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_SPI1_Init+0x74>)
 800111a:	2218      	movs	r2, #24
 800111c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001132:	2207      	movs	r2, #7
 8001134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_SPI1_Init+0x74>)
 800113e:	2208      	movs	r2, #8
 8001140:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001142:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <MX_SPI1_Init+0x74>)
 8001144:	0018      	movs	r0, r3
 8001146:	f001 fe5b 	bl	8002e00 <HAL_SPI_Init>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d001      	beq.n	8001152 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800114e:	f000 f90d 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000010c 	.word	0x2000010c
 800115c:	40013000 	.word	0x40013000

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <MX_USART1_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 800116c:	22e1      	movs	r2, #225	@ 0xe1
 800116e:	0252      	lsls	r2, r2, #9
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <MX_USART1_UART_Init+0x58>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 f9b9 	bl	800351c <HAL_UART_Init>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f8dd 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000170 	.word	0x20000170
 80011bc:	40013800 	.word	0x40013800

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08b      	sub	sp, #44	@ 0x2c
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	2414      	movs	r4, #20
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	0018      	movs	r0, r3
 80011cc:	2314      	movs	r3, #20
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f002 fd97 	bl	8003d04 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b61      	ldr	r3, [pc, #388]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	4b60      	ldr	r3, [pc, #384]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	0309      	lsls	r1, r1, #12
 80011e0:	430a      	orrs	r2, r1
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	4b5d      	ldr	r3, [pc, #372]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	031b      	lsls	r3, r3, #12
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f2:	4b5a      	ldr	r3, [pc, #360]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	4b59      	ldr	r3, [pc, #356]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	03c9      	lsls	r1, r1, #15
 80011fc:	430a      	orrs	r2, r1
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	4b56      	ldr	r3, [pc, #344]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	03db      	lsls	r3, r3, #15
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b53      	ldr	r3, [pc, #332]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	4b52      	ldr	r3, [pc, #328]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	02c9      	lsls	r1, r1, #11
 8001218:	430a      	orrs	r2, r1
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <MX_GPIO_Init+0x19c>)
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	02db      	lsls	r3, r3, #11
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b4c      	ldr	r3, [pc, #304]	@ (800135c <MX_GPIO_Init+0x19c>)
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	0289      	lsls	r1, r1, #10
 8001234:	430a      	orrs	r2, r1
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	4b48      	ldr	r3, [pc, #288]	@ (800135c <MX_GPIO_Init+0x19c>)
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	4013      	ands	r3, r2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001246:	4b46      	ldr	r3, [pc, #280]	@ (8001360 <MX_GPIO_Init+0x1a0>)
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	0018      	movs	r0, r3
 800124e:	f000 ff4a 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dc_pin_SPI_Pin|cs_pin_SPI_Pin, GPIO_PIN_RESET);
 8001252:	23c0      	movs	r3, #192	@ 0xc0
 8001254:	0219      	lsls	r1, r3, #8
 8001256:	2390      	movs	r3, #144	@ 0x90
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	2200      	movs	r2, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f000 ff42 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(reset_pin_SPI_GPIO_Port, reset_pin_SPI_Pin, GPIO_PIN_RESET);
 8001262:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <MX_GPIO_Init+0x1a4>)
 8001264:	2200      	movs	r2, #0
 8001266:	2140      	movs	r1, #64	@ 0x40
 8001268:	0018      	movs	r0, r3
 800126a:	f000 ff3c 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	0192      	lsls	r2, r2, #6
 8001274:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	193b      	adds	r3, r7, r4
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127c:	193b      	adds	r3, r7, r4
 800127e:	2201      	movs	r2, #1
 8001280:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	193b      	adds	r3, r7, r4
 8001284:	4a38      	ldr	r2, [pc, #224]	@ (8001368 <MX_GPIO_Init+0x1a8>)
 8001286:	0019      	movs	r1, r3
 8001288:	0010      	movs	r0, r2
 800128a:	f000 fd9f 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	193b      	adds	r3, r7, r4
 8001296:	2201      	movs	r2, #1
 8001298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129a:	193b      	adds	r3, r7, r4
 800129c:	2201      	movs	r2, #1
 800129e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001360 <MX_GPIO_Init+0x1a0>)
 80012aa:	0019      	movs	r1, r3
 80012ac:	0010      	movs	r0, r2
 80012ae:	f000 fd8d 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ready_pin_Pin */
  GPIO_InitStruct.Pin = ready_pin_Pin;
 80012b2:	0021      	movs	r1, r4
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2284      	movs	r2, #132	@ 0x84
 80012be:	0392      	lsls	r2, r2, #14
 80012c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2201      	movs	r2, #1
 80012c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ready_pin_GPIO_Port, &GPIO_InitStruct);
 80012c8:	000c      	movs	r4, r1
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	4a25      	ldr	r2, [pc, #148]	@ (8001364 <MX_GPIO_Init+0x1a4>)
 80012ce:	0019      	movs	r1, r3
 80012d0:	0010      	movs	r0, r2
 80012d2:	f000 fd7b 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : dc_pin_SPI_Pin */
  GPIO_InitStruct.Pin = dc_pin_SPI_Pin;
 80012d6:	0021      	movs	r1, r4
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	01d2      	lsls	r2, r2, #7
 80012de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	000c      	movs	r4, r1
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	2201      	movs	r2, #1
 80012e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(dc_pin_SPI_GPIO_Port, &GPIO_InitStruct);
 80012f4:	193a      	adds	r2, r7, r4
 80012f6:	2390      	movs	r3, #144	@ 0x90
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f000 fd65 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : cs_pin_SPI_Pin */
  GPIO_InitStruct.Pin = cs_pin_SPI_Pin;
 8001302:	0021      	movs	r1, r4
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	0212      	lsls	r2, r2, #8
 800130a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	000c      	movs	r4, r1
 800130e:	193b      	adds	r3, r7, r4
 8001310:	2201      	movs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	2201      	movs	r2, #1
 8001318:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	193b      	adds	r3, r7, r4
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(cs_pin_SPI_GPIO_Port, &GPIO_InitStruct);
 8001320:	193a      	adds	r2, r7, r4
 8001322:	2390      	movs	r3, #144	@ 0x90
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f000 fd4f 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_pin_SPI_Pin */
  GPIO_InitStruct.Pin = reset_pin_SPI_Pin;
 800132e:	0021      	movs	r1, r4
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2240      	movs	r2, #64	@ 0x40
 8001334:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2201      	movs	r2, #1
 800133a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2201      	movs	r2, #1
 8001340:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(reset_pin_SPI_GPIO_Port, &GPIO_InitStruct);
 8001348:	187b      	adds	r3, r7, r1
 800134a:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <MX_GPIO_Init+0x1a4>)
 800134c:	0019      	movs	r1, r3
 800134e:	0010      	movs	r0, r2
 8001350:	f000 fd3c 	bl	8001dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b00b      	add	sp, #44	@ 0x2c
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	48001400 	.word	0x48001400
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	e7fd      	b.n	8001374 <Error_Handler+0x8>

08001378 <drawMenu>:




void drawMenu(uint8_t startIndex)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08d      	sub	sp, #52	@ 0x34
 800137c:	af04      	add	r7, sp, #16
 800137e:	0002      	movs	r2, r0
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	701a      	strb	r2, [r3, #0]
    if (startIndex == THEME_PAGE_INDEX) {
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <drawMenu+0x1a>
        drawThemePage();
 800138c:	f000 f9bc 	bl	8001708 <drawThemePage>
        return;
 8001390:	e053      	b.n	800143a <drawMenu+0xc2>
    }
	  FillScreen(BLACK);
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff f85a 	bl	800044c <FillScreen>

	    for (int i = 0; i < 2; i++) {
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	e04a      	b.n	8001434 <drawMenu+0xbc>
	        int index = (startIndex + i) % MENU_ITEM_COUNT;
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	18d3      	adds	r3, r2, r3
 80013a6:	2107      	movs	r1, #7
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff f823 	bl	80003f4 <__aeabi_idivmod>
 80013ae:	000b      	movs	r3, r1
 80013b0:	61bb      	str	r3, [r7, #24]
	        int y = i * 32 + 2;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	015b      	lsls	r3, r3, #5
 80013b6:	3302      	adds	r3, #2
 80013b8:	617b      	str	r3, [r7, #20]

	        MenuItem* item = &menu_items[index];
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	011a      	lsls	r2, r3, #4
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <drawMenu+0xc8>)
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	613b      	str	r3, [r7, #16]
	        const tImage* icon = item->state ? item->icon_on : item->icon_off;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <drawMenu+0x5a>
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	e001      	b.n	80013d6 <drawMenu+0x5e>
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
	        const char* label = item->room_name;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	60bb      	str	r3, [r7, #8]

	        // Oda ismi
	        ST7735_WriteString(4, y + 10, label, Font_7x10, themeColors[currentTheme], BLACK);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	330a      	adds	r3, #10
 80013e4:	b298      	uxth	r0, r3
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <drawMenu+0xcc>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	001a      	movs	r2, r3
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <drawMenu+0xd0>)
 80013ee:	0052      	lsls	r2, r2, #1
 80013f0:	5ad2      	ldrh	r2, [r2, r3]
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <drawMenu+0xd4>)
 80013f4:	68bc      	ldr	r4, [r7, #8]
 80013f6:	2100      	movs	r1, #0
 80013f8:	9102      	str	r1, [sp, #8]
 80013fa:	9201      	str	r2, [sp, #4]
 80013fc:	466a      	mov	r2, sp
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	6011      	str	r1, [r2, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0022      	movs	r2, r4
 8001406:	0001      	movs	r1, r0
 8001408:	2004      	movs	r0, #4
 800140a:	f7ff faf7 	bl	80009fc <ST7735_WriteString>

	        // Lamba ikonu (sağda)
	        if (icon)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <drawMenu+0xb6>
	            draw_image_mono(90, y, icon, themeColors[currentTheme], BLACK);
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <drawMenu+0xcc>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	001a      	movs	r2, r3
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <drawMenu+0xd0>)
 800141c:	0052      	lsls	r2, r2, #1
 800141e:	5ad3      	ldrh	r3, [r2, r3]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	2000      	movs	r0, #0
 8001426:	9000      	str	r0, [sp, #0]
 8001428:	205a      	movs	r0, #90	@ 0x5a
 800142a:	f7ff fc29 	bl	8000c80 <draw_image_mono>
	    for (int i = 0; i < 2; i++) {
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b01      	cmp	r3, #1
 8001438:	ddb1      	ble.n	800139e <drawMenu+0x26>
	    }
}
 800143a:	46bd      	mov	sp, r7
 800143c:	b009      	add	sp, #36	@ 0x24
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20000014 	.word	0x20000014
 8001444:	20000208 	.word	0x20000208
 8001448:	08005394 	.word	0x08005394
 800144c:	20000000 	.word	0x20000000

08001450 <animateMenuTransition>:



void animateMenuTransition(uint8_t oldIndex, uint8_t newIndex, bool directionRight)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b094      	sub	sp, #80	@ 0x50
 8001454:	af04      	add	r7, sp, #16
 8001456:	0004      	movs	r4, r0
 8001458:	0008      	movs	r0, r1
 800145a:	0011      	movs	r1, r2
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	1c22      	adds	r2, r4, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	1dbb      	adds	r3, r7, #6
 8001464:	1c02      	adds	r2, r0, #0
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	1d7b      	adds	r3, r7, #5
 800146a:	1c0a      	adds	r2, r1, #0
 800146c:	701a      	strb	r2, [r3, #0]
    const int stepSize = 8;
 800146e:	2308      	movs	r3, #8
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
    const int totalSteps = 128 / stepSize;
 8001472:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001474:	2080      	movs	r0, #128	@ 0x80
 8001476:	f7fe fed7 	bl	8000228 <__divsi3>
 800147a:	0003      	movs	r3, r0
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30

    for (int i = 0; i <= totalSteps; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001482:	e0d2      	b.n	800162a <animateMenuTransition+0x1da>
       FillScreen(BLACK);
 8001484:	2000      	movs	r0, #0
 8001486:	f7fe ffe1 	bl	800044c <FillScreen>

        int offset = i * stepSize;
 800148a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800148c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800148e:	4353      	muls	r3, r2
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c

        for (int j = 0; j < 2; j++) {
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001496:	e0be      	b.n	8001616 <animateMenuTransition+0x1c6>
            int indexOld = (oldIndex + j) % MENU_ITEM_COUNT;
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	2107      	movs	r1, #7
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7fe ffa6 	bl	80003f4 <__aeabi_idivmod>
 80014a8:	000b      	movs	r3, r1
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
            int y = j * 32 + 2;
 80014ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ae:	015b      	lsls	r3, r3, #5
 80014b0:	3302      	adds	r3, #2
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
            int x_old = directionRight ? -offset : offset;
 80014b4:	1d7b      	adds	r3, r7, #5
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <animateMenuTransition+0x72>
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	425b      	negs	r3, r3
 80014c0:	e000      	b.n	80014c4 <animateMenuTransition+0x74>
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	623b      	str	r3, [r7, #32]
            const tImage* iconOld = menu_items[indexOld].state ? menu_items[indexOld].icon_on : menu_items[indexOld].icon_off;
 80014c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001640 <animateMenuTransition+0x1f0>)
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	18d3      	adds	r3, r2, r3
 80014ce:	330c      	adds	r3, #12
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <animateMenuTransition+0x90>
 80014d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <animateMenuTransition+0x1f0>)
 80014d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	58d3      	ldr	r3, [r2, r3]
 80014de:	e005      	b.n	80014ec <animateMenuTransition+0x9c>
 80014e0:	4a57      	ldr	r2, [pc, #348]	@ (8001640 <animateMenuTransition+0x1f0>)
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	18d3      	adds	r3, r2, r3
 80014e8:	3304      	adds	r3, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61fb      	str	r3, [r7, #28]
            const char* labelOld = menu_items[indexOld].room_name;
 80014ee:	4a54      	ldr	r2, [pc, #336]	@ (8001640 <animateMenuTransition+0x1f0>)
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	3308      	adds	r3, #8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	61bb      	str	r3, [r7, #24]

            ST7735_WriteString(4 + x_old, y + 10, labelOld, Font_7x10, themeColors[currentTheme], BLACK);
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3304      	adds	r3, #4
 8001502:	b298      	uxth	r0, r3
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	b29b      	uxth	r3, r3
 8001508:	330a      	adds	r3, #10
 800150a:	b29c      	uxth	r4, r3
 800150c:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <animateMenuTransition+0x1f4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	001a      	movs	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <animateMenuTransition+0x1f8>)
 8001514:	0052      	lsls	r2, r2, #1
 8001516:	5ad2      	ldrh	r2, [r2, r3]
 8001518:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <animateMenuTransition+0x1fc>)
 800151a:	69bd      	ldr	r5, [r7, #24]
 800151c:	2100      	movs	r1, #0
 800151e:	9102      	str	r1, [sp, #8]
 8001520:	9201      	str	r2, [sp, #4]
 8001522:	466a      	mov	r2, sp
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	6011      	str	r1, [r2, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	002a      	movs	r2, r5
 800152c:	0021      	movs	r1, r4
 800152e:	f7ff fa65 	bl	80009fc <ST7735_WriteString>
            if (iconOld)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00e      	beq.n	8001556 <animateMenuTransition+0x106>
                draw_image_mono(90 + x_old, y, iconOld, themeColors[currentTheme], 0x0000);
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	335a      	adds	r3, #90	@ 0x5a
 800153c:	0018      	movs	r0, r3
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <animateMenuTransition+0x1f4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	001a      	movs	r2, r3
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <animateMenuTransition+0x1f8>)
 8001546:	0052      	lsls	r2, r2, #1
 8001548:	5ad3      	ldrh	r3, [r2, r3]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800154e:	2400      	movs	r4, #0
 8001550:	9400      	str	r4, [sp, #0]
 8001552:	f7ff fb95 	bl	8000c80 <draw_image_mono>

            int indexNew = (newIndex + j) % MENU_ITEM_COUNT;
 8001556:	1dbb      	adds	r3, r7, #6
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	2107      	movs	r1, #7
 8001560:	0018      	movs	r0, r3
 8001562:	f7fe ff47 	bl	80003f4 <__aeabi_idivmod>
 8001566:	000b      	movs	r3, r1
 8001568:	617b      	str	r3, [r7, #20]
            int x_new = directionRight ? (128 - offset) : (-128 + offset);
 800156a:	1d7b      	adds	r3, r7, #5
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <animateMenuTransition+0x12a>
 8001572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	e001      	b.n	800157e <animateMenuTransition+0x12e>
 800157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157c:	3b80      	subs	r3, #128	@ 0x80
 800157e:	613b      	str	r3, [r7, #16]
            const tImage* iconNew = menu_items[indexNew].state ? menu_items[indexNew].icon_on : menu_items[indexNew].icon_off;
 8001580:	4a2f      	ldr	r2, [pc, #188]	@ (8001640 <animateMenuTransition+0x1f0>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	18d3      	adds	r3, r2, r3
 8001588:	330c      	adds	r3, #12
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <animateMenuTransition+0x14a>
 8001590:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <animateMenuTransition+0x1f0>)
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	58d3      	ldr	r3, [r2, r3]
 8001598:	e005      	b.n	80015a6 <animateMenuTransition+0x156>
 800159a:	4a29      	ldr	r2, [pc, #164]	@ (8001640 <animateMenuTransition+0x1f0>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	3304      	adds	r3, #4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]
            const char* labelNew = menu_items[indexNew].room_name;
 80015a8:	4a25      	ldr	r2, [pc, #148]	@ (8001640 <animateMenuTransition+0x1f0>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	18d3      	adds	r3, r2, r3
 80015b0:	3308      	adds	r3, #8
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60bb      	str	r3, [r7, #8]

            ST7735_WriteString(4 + x_new, y + 10, labelNew, Font_7x10, themeColors[currentTheme], BLACK);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3304      	adds	r3, #4
 80015bc:	b298      	uxth	r0, r3
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	330a      	adds	r3, #10
 80015c4:	b29c      	uxth	r4, r3
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <animateMenuTransition+0x1f4>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	001a      	movs	r2, r3
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <animateMenuTransition+0x1f8>)
 80015ce:	0052      	lsls	r2, r2, #1
 80015d0:	5ad2      	ldrh	r2, [r2, r3]
 80015d2:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <animateMenuTransition+0x1fc>)
 80015d4:	68bd      	ldr	r5, [r7, #8]
 80015d6:	2100      	movs	r1, #0
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	466a      	mov	r2, sp
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	6011      	str	r1, [r2, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	002a      	movs	r2, r5
 80015e6:	0021      	movs	r1, r4
 80015e8:	f7ff fa08 	bl	80009fc <ST7735_WriteString>
            if (iconNew)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00e      	beq.n	8001610 <animateMenuTransition+0x1c0>
                draw_image_mono(90 + x_new, y, iconNew, themeColors[currentTheme], 0x0000);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	335a      	adds	r3, #90	@ 0x5a
 80015f6:	0018      	movs	r0, r3
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <animateMenuTransition+0x1f4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	001a      	movs	r2, r3
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <animateMenuTransition+0x1f8>)
 8001600:	0052      	lsls	r2, r2, #1
 8001602:	5ad3      	ldrh	r3, [r2, r3]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001608:	2400      	movs	r4, #0
 800160a:	9400      	str	r4, [sp, #0]
 800160c:	f7ff fb38 	bl	8000c80 <draw_image_mono>
        for (int j = 0; j < 2; j++) {
 8001610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001612:	3301      	adds	r3, #1
 8001614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001618:	2b01      	cmp	r3, #1
 800161a:	dc00      	bgt.n	800161e <animateMenuTransition+0x1ce>
 800161c:	e73c      	b.n	8001498 <animateMenuTransition+0x48>
        }

        HAL_Delay(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f000 fafc 	bl	8001c1c <HAL_Delay>
    for (int i = 0; i <= totalSteps; i++) {
 8001624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001626:	3301      	adds	r3, #1
 8001628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800162a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800162c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800162e:	429a      	cmp	r2, r3
 8001630:	dc00      	bgt.n	8001634 <animateMenuTransition+0x1e4>
 8001632:	e727      	b.n	8001484 <animateMenuTransition+0x34>
    }
}
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b010      	add	sp, #64	@ 0x40
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	20000014 	.word	0x20000014
 8001644:	20000208 	.word	0x20000208
 8001648:	08005394 	.word	0x08005394
 800164c:	20000000 	.word	0x20000000

08001650 <show_startup_screen>:

void show_startup_screen(void)
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af04      	add	r7, sp, #16
    FillScreen(WHITE);
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <show_startup_screen+0xa0>)
 8001658:	0018      	movs	r0, r3
 800165a:	f7fe fef7 	bl	800044c <FillScreen>

    const char* text1 = "ino";
 800165e:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <show_startup_screen+0xa4>)
 8001660:	60fb      	str	r3, [r7, #12]
    const char* text2 = "hom";
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <show_startup_screen+0xa8>)
 8001664:	60bb      	str	r3, [r7, #8]

    uint16_t x_start = 30;
 8001666:	1dbb      	adds	r3, r7, #6
 8001668:	221e      	movs	r2, #30
 800166a:	801a      	strh	r2, [r3, #0]
    uint16_t y = 28;
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	221c      	movs	r2, #28
 8001670:	801a      	strh	r2, [r3, #0]

    // "ino" (kırmızı)
    ST7735_WriteString(x_start, y, text1, Font_11x18, RED, WHITE);
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <show_startup_screen+0xac>)
 8001674:	68fd      	ldr	r5, [r7, #12]
 8001676:	1d3a      	adds	r2, r7, #4
 8001678:	8814      	ldrh	r4, [r2, #0]
 800167a:	1dba      	adds	r2, r7, #6
 800167c:	8810      	ldrh	r0, [r2, #0]
 800167e:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <show_startup_screen+0xa0>)
 8001680:	9202      	str	r2, [sp, #8]
 8001682:	22f8      	movs	r2, #248	@ 0xf8
 8001684:	0212      	lsls	r2, r2, #8
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	466a      	mov	r2, sp
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	6011      	str	r1, [r2, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	002a      	movs	r2, r5
 8001692:	0021      	movs	r1, r4
 8001694:	f7ff f9b2 	bl	80009fc <ST7735_WriteString>

    // "hom" (siyah)
    ST7735_WriteString(x_start + 11 * strlen(text1), y, text2, Font_11x18, BLACK, WHITE);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	0018      	movs	r0, r3
 800169c:	f7fe fd32 	bl	8000104 <strlen>
 80016a0:	0003      	movs	r3, r0
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	1c1a      	adds	r2, r3, #0
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	18d2      	adds	r2, r2, r3
 80016aa:	1892      	adds	r2, r2, r2
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	1dbb      	adds	r3, r7, #6
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	18d3      	adds	r3, r2, r3
 80016b6:	b298      	uxth	r0, r3
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <show_startup_screen+0xac>)
 80016ba:	68bd      	ldr	r5, [r7, #8]
 80016bc:	1d3a      	adds	r2, r7, #4
 80016be:	8814      	ldrh	r4, [r2, #0]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <show_startup_screen+0xa0>)
 80016c2:	9202      	str	r2, [sp, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	466a      	mov	r2, sp
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	6011      	str	r1, [r2, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	002a      	movs	r2, r5
 80016d2:	0021      	movs	r1, r4
 80016d4:	f7ff f992 	bl	80009fc <ST7735_WriteString>

    startupTime = HAL_GetTick();
 80016d8:	f000 fa96 	bl	8001c08 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <show_startup_screen+0xb0>)
 80016e0:	601a      	str	r2, [r3, #0]
    startupDone = false;
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <show_startup_screen+0xb4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	0000ffff 	.word	0x0000ffff
 80016f4:	08003dac 	.word	0x08003dac
 80016f8:	08003db0 	.word	0x08003db0
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000204 	.word	0x20000204
 8001704:	20000200 	.word	0x20000200

08001708 <drawThemePage>:


void drawThemePage(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af04      	add	r7, sp, #16
    FillScreen(BLACK);
 800170e:	2000      	movs	r0, #0
 8001710:	f7fe fe9c 	bl	800044c <FillScreen>

    const char* title = "Tema Secimi";
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <drawThemePage+0x5c>)
 8001716:	607b      	str	r3, [r7, #4]
    ST7735_WriteString(10, 5, title, Font_7x10, themeColors[currentTheme], BLACK);
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <drawThemePage+0x60>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	001a      	movs	r2, r3
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <drawThemePage+0x64>)
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	5ad2      	ldrh	r2, [r2, r3]
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <drawThemePage+0x68>)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	2100      	movs	r1, #0
 800172a:	9102      	str	r1, [sp, #8]
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	466a      	mov	r2, sp
 8001730:	6859      	ldr	r1, [r3, #4]
 8001732:	6011      	str	r1, [r2, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0002      	movs	r2, r0
 8001738:	2105      	movs	r1, #5
 800173a:	200a      	movs	r0, #10
 800173c:	f7ff f95e 	bl	80009fc <ST7735_WriteString>

    draw_image_mono(90, 25, &lightbulb_open, themeColors[currentTheme], BLACK);
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <drawThemePage+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <drawThemePage+0x64>)
 8001748:	0052      	lsls	r2, r2, #1
 800174a:	5ad3      	ldrh	r3, [r2, r3]
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <drawThemePage+0x6c>)
 800174e:	2100      	movs	r1, #0
 8001750:	9100      	str	r1, [sp, #0]
 8001752:	2119      	movs	r1, #25
 8001754:	205a      	movs	r0, #90	@ 0x5a
 8001756:	f7ff fa93 	bl	8000c80 <draw_image_mono>


}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	08003db4 	.word	0x08003db4
 8001768:	20000208 	.word	0x20000208
 800176c:	08005394 	.word	0x08005394
 8001770:	20000000 	.word	0x20000000
 8001774:	08005334 	.word	0x08005334

08001778 <theme_page_tuslari>:

void theme_page_tuslari(void){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

	  void drawThemePage();

	  uint32_t now = HAL_GetTick();
 800177e:	f000 fa43 	bl	8001c08 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	607b      	str	r3, [r7, #4]


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8001786:	2390      	movs	r3, #144	@ 0x90
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	2104      	movs	r1, #4
 800178c:	0018      	movs	r0, r3
 800178e:	f000 fc8d 	bl	80020ac <HAL_GPIO_ReadPin>
 8001792:	1e03      	subs	r3, r0, #0
 8001794:	d107      	bne.n	80017a6 <theme_page_tuslari+0x2e>
 8001796:	2390      	movs	r3, #144	@ 0x90
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	2110      	movs	r1, #16
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fc85 	bl	80020ac <HAL_GPIO_ReadPin>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d111      	bne.n	80017ca <theme_page_tuslari+0x52>
		  currentTheme = (currentTheme + 1) % themeCount;
 80017a6:	4b3d      	ldr	r3, [pc, #244]	@ (800189c <theme_page_tuslari+0x124>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	2207      	movs	r2, #7
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe fe1f 	bl	80003f4 <__aeabi_idivmod>
 80017b6:	000b      	movs	r3, r1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <theme_page_tuslari+0x124>)
 80017bc:	701a      	strb	r2, [r3, #0]
		  drawThemePage();
 80017be:	f7ff ffa3 	bl	8001708 <drawThemePage>
		  lastButtonPressTime = now;
 80017c2:	4b37      	ldr	r3, [pc, #220]	@ (80018a0 <theme_page_tuslari+0x128>)
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	601a      	str	r2, [r3, #0]
		  return;
 80017c8:	e064      	b.n	8001894 <theme_page_tuslari+0x11c>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) == GPIO_PIN_RESET) {
 80017ca:	2390      	movs	r3, #144	@ 0x90
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	2101      	movs	r1, #1
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 fc6b 	bl	80020ac <HAL_GPIO_ReadPin>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d115      	bne.n	8001806 <theme_page_tuslari+0x8e>
		  if (currentTheme == 0)
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <theme_page_tuslari+0x124>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <theme_page_tuslari+0x76>
			  currentTheme = themeCount - 1;
 80017e2:	2307      	movs	r3, #7
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <theme_page_tuslari+0x124>)
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e005      	b.n	80017fa <theme_page_tuslari+0x82>
		  else
			  currentTheme--;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <theme_page_tuslari+0x124>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <theme_page_tuslari+0x124>)
 80017f8:	701a      	strb	r2, [r3, #0]
		  drawThemePage();
 80017fa:	f7ff ff85 	bl	8001708 <drawThemePage>
		  lastButtonPressTime = now;
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <theme_page_tuslari+0x128>)
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
		  return;
 8001804:	e046      	b.n	8001894 <theme_page_tuslari+0x11c>
	  }

	  // Sağ sol menü geçişi
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001806:	2390      	movs	r3, #144	@ 0x90
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	2101      	movs	r1, #1
 800180c:	0018      	movs	r0, r3
 800180e:	f000 fc4d 	bl	80020ac <HAL_GPIO_ReadPin>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d11a      	bne.n	800184c <theme_page_tuslari+0xd4>
		  uint8_t newPage = (currentPage + 2) % MENU_ITEM_COUNT;
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <theme_page_tuslari+0x12c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3302      	adds	r3, #2
 800181c:	2107      	movs	r1, #7
 800181e:	0018      	movs	r0, r3
 8001820:	f7fe fde8 	bl	80003f4 <__aeabi_idivmod>
 8001824:	000b      	movs	r3, r1
 8001826:	001a      	movs	r2, r3
 8001828:	1cbb      	adds	r3, r7, #2
 800182a:	701a      	strb	r2, [r3, #0]
		  animateMenuTransition(currentPage, newPage, true);
 800182c:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <theme_page_tuslari+0x12c>)
 800182e:	7818      	ldrb	r0, [r3, #0]
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	0019      	movs	r1, r3
 8001838:	f7ff fe0a 	bl	8001450 <animateMenuTransition>
		  currentPage = newPage;
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <theme_page_tuslari+0x12c>)
 800183e:	1cba      	adds	r2, r7, #2
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	701a      	strb	r2, [r3, #0]
		  lastButtonPressTime = now;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <theme_page_tuslari+0x128>)
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
		  return;
 800184a:	e023      	b.n	8001894 <theme_page_tuslari+0x11c>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 800184c:	2390      	movs	r3, #144	@ 0x90
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	2102      	movs	r1, #2
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fc2a 	bl	80020ac <HAL_GPIO_ReadPin>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d11a      	bne.n	8001892 <theme_page_tuslari+0x11a>
		  uint8_t newPage = (currentPage + MENU_ITEM_COUNT - 2) % MENU_ITEM_COUNT;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <theme_page_tuslari+0x12c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	3305      	adds	r3, #5
 8001862:	2107      	movs	r1, #7
 8001864:	0018      	movs	r0, r3
 8001866:	f7fe fdc5 	bl	80003f4 <__aeabi_idivmod>
 800186a:	000b      	movs	r3, r1
 800186c:	001a      	movs	r2, r3
 800186e:	1cfb      	adds	r3, r7, #3
 8001870:	701a      	strb	r2, [r3, #0]
		  animateMenuTransition(currentPage, newPage, false);
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <theme_page_tuslari+0x12c>)
 8001874:	7818      	ldrb	r0, [r3, #0]
 8001876:	1cfb      	adds	r3, r7, #3
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	0019      	movs	r1, r3
 800187e:	f7ff fde7 	bl	8001450 <animateMenuTransition>
		  currentPage = newPage;
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <theme_page_tuslari+0x12c>)
 8001884:	1cfa      	adds	r2, r7, #3
 8001886:	7812      	ldrb	r2, [r2, #0]
 8001888:	701a      	strb	r2, [r3, #0]
		  lastButtonPressTime = now;
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <theme_page_tuslari+0x128>)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
		  return;
 8001890:	e000      	b.n	8001894 <theme_page_tuslari+0x11c>
	  }

	  return;
 8001892:	46c0      	nop			@ (mov r8, r8)
	}
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	20000208 	.word	0x20000208
 80018a0:	200001fc 	.word	0x200001fc
 80018a4:	200001f8 	.word	0x200001f8

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_MspInit+0x44>)
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_MspInit+0x44>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	619a      	str	r2, [r3, #24]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_MspInit+0x44>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_MspInit+0x44>)
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_MspInit+0x44>)
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	0549      	lsls	r1, r1, #21
 80018d0:	430a      	orrs	r2, r1
 80018d2:	61da      	str	r2, [r3, #28]
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_MspInit+0x44>)
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	4013      	ands	r3, r2
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b08b      	sub	sp, #44	@ 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	2414      	movs	r4, #20
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	0018      	movs	r0, r3
 80018fe:	2314      	movs	r3, #20
 8001900:	001a      	movs	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	f002 f9fe 	bl	8003d04 <memset>
  if(hi2c->Instance==I2C1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <HAL_I2C_MspInit+0x90>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d132      	bne.n	8001978 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <HAL_I2C_MspInit+0x94>)
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_I2C_MspInit+0x94>)
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	02c9      	lsls	r1, r1, #11
 800191c:	430a      	orrs	r2, r1
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_I2C_MspInit+0x94>)
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	02db      	lsls	r3, r3, #11
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192e:	193b      	adds	r3, r7, r4
 8001930:	22c0      	movs	r2, #192	@ 0xc0
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	0021      	movs	r1, r4
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2212      	movs	r2, #18
 800193c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2201      	movs	r2, #1
 8001942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2203      	movs	r2, #3
 8001948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2201      	movs	r2, #1
 800194e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	187b      	adds	r3, r7, r1
 8001952:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_I2C_MspInit+0x98>)
 8001954:	0019      	movs	r1, r3
 8001956:	0010      	movs	r0, r2
 8001958:	f000 fa38 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_I2C_MspInit+0x94>)
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_I2C_MspInit+0x94>)
 8001962:	2180      	movs	r1, #128	@ 0x80
 8001964:	0389      	lsls	r1, r1, #14
 8001966:	430a      	orrs	r2, r1
 8001968:	61da      	str	r2, [r3, #28]
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_I2C_MspInit+0x94>)
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	039b      	lsls	r3, r3, #14
 8001972:	4013      	ands	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b00b      	add	sp, #44	@ 0x2c
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	40005400 	.word	0x40005400
 8001984:	40021000 	.word	0x40021000
 8001988:	48000400 	.word	0x48000400

0800198c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b08b      	sub	sp, #44	@ 0x2c
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	2414      	movs	r4, #20
 8001996:	193b      	adds	r3, r7, r4
 8001998:	0018      	movs	r0, r3
 800199a:	2314      	movs	r3, #20
 800199c:	001a      	movs	r2, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	f002 f9b0 	bl	8003d04 <memset>
  if(hspi->Instance==SPI1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <HAL_SPI_MspInit+0x90>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d131      	bne.n	8001a12 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_SPI_MspInit+0x94>)
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <HAL_SPI_MspInit+0x94>)
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	0149      	lsls	r1, r1, #5
 80019b8:	430a      	orrs	r2, r1
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_SPI_MspInit+0x94>)
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_SPI_MspInit+0x94>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_SPI_MspInit+0x94>)
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	02c9      	lsls	r1, r1, #11
 80019d4:	430a      	orrs	r2, r1
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_SPI_MspInit+0x94>)
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	02db      	lsls	r3, r3, #11
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019e6:	0021      	movs	r1, r4
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2238      	movs	r2, #56	@ 0x38
 80019ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2202      	movs	r2, #2
 80019f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2203      	movs	r2, #3
 80019fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_SPI_MspInit+0x98>)
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	0010      	movs	r0, r2
 8001a0e:	f000 f9dd 	bl	8001dcc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b00b      	add	sp, #44	@ 0x2c
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	40013000 	.word	0x40013000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	48000400 	.word	0x48000400

08001a28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b08b      	sub	sp, #44	@ 0x2c
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	2414      	movs	r4, #20
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	0018      	movs	r0, r3
 8001a36:	2314      	movs	r3, #20
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f002 f962 	bl	8003d04 <memset>
  if(huart->Instance==USART1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1d      	ldr	r2, [pc, #116]	@ (8001abc <HAL_UART_MspInit+0x94>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d133      	bne.n	8001ab2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <HAL_UART_MspInit+0x98>)
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <HAL_UART_MspInit+0x98>)
 8001a50:	2180      	movs	r1, #128	@ 0x80
 8001a52:	01c9      	lsls	r1, r1, #7
 8001a54:	430a      	orrs	r2, r1
 8001a56:	619a      	str	r2, [r3, #24]
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_UART_MspInit+0x98>)
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	01db      	lsls	r3, r3, #7
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_UART_MspInit+0x98>)
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_UART_MspInit+0x98>)
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	0289      	lsls	r1, r1, #10
 8001a70:	430a      	orrs	r2, r1
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_UART_MspInit+0x98>)
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	029b      	lsls	r3, r3, #10
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	22c0      	movs	r2, #192	@ 0xc0
 8001a86:	00d2      	lsls	r2, r2, #3
 8001a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	0021      	movs	r1, r4
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2202      	movs	r2, #2
 8001a90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	187a      	adds	r2, r7, r1
 8001aa6:	2390      	movs	r3, #144	@ 0x90
 8001aa8:	05db      	lsls	r3, r3, #23
 8001aaa:	0011      	movs	r1, r2
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 f98d 	bl	8001dcc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b00b      	add	sp, #44	@ 0x2c
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac8:	46c0      	nop			@ (mov r8, r8)
 8001aca:	e7fd      	b.n	8001ac8 <NMI_Handler+0x4>

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	e7fd      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f87a 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b00:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b04:	f7ff fff7 	bl	8001af6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	@ (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	@ (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b2e:	f002 f8f1 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff f92b 	bl	8000d8c <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   r0, =_estack
 8001b38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b44:	080053e4 	.word	0x080053e4
  ldr r2, =_sbss
 8001b48:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b4c:	20000210 	.word	0x20000210

08001b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_IRQHandler>
	...

08001b54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <HAL_Init+0x24>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_Init+0x24>)
 8001b5e:	2110      	movs	r1, #16
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f809 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6a:	f7ff fe9d 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_InitTick+0x5c>)
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <HAL_InitTick+0x60>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	23fa      	movs	r3, #250	@ 0xfa
 8001b90:	0098      	lsls	r0, r3, #2
 8001b92:	f7fe fabf 	bl	8000114 <__udivsi3>
 8001b96:	0003      	movs	r3, r0
 8001b98:	0019      	movs	r1, r3
 8001b9a:	0020      	movs	r0, r4
 8001b9c:	f7fe faba 	bl	8000114 <__udivsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f905 	bl	8001db2 <HAL_SYSTICK_Config>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e00f      	b.n	8001bd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d80b      	bhi.n	8001bce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	425b      	negs	r3, r3
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 f8e2 	bl	8001d88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_InitTick+0x64>)
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	20000084 	.word	0x20000084
 8001bdc:	2000008c 	.word	0x2000008c
 8001be0:	20000088 	.word	0x20000088

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_IncTick+0x1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	001a      	movs	r2, r3
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	18d2      	adds	r2, r2, r3
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	46c0      	nop			@ (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	2000008c 	.word	0x2000008c
 8001c04:	2000020c 	.word	0x2000020c

08001c08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	@ (8001c18 <HAL_GetTick+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	2000020c 	.word	0x2000020c

08001c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3301      	adds	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_Delay+0x44>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	f7ff ffe0 	bl	8001c08 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d8f7      	bhi.n	8001c44 <HAL_Delay+0x28>
  {
  }
}
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	2000008c 	.word	0x2000008c

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c78:	d828      	bhi.n	8001ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d38 <__NVIC_SetPriority+0xd4>)
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	33c0      	adds	r3, #192	@ 0xc0
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	589b      	ldr	r3, [r3, r2]
 8001c8a:	1dfa      	adds	r2, r7, #7
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	0011      	movs	r1, r2
 8001c90:	2203      	movs	r2, #3
 8001c92:	400a      	ands	r2, r1
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	21ff      	movs	r1, #255	@ 0xff
 8001c98:	4091      	lsls	r1, r2
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	43d2      	mvns	r2, r2
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	22ff      	movs	r2, #255	@ 0xff
 8001ca8:	401a      	ands	r2, r3
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	4003      	ands	r3, r0
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb8:	481f      	ldr	r0, [pc, #124]	@ (8001d38 <__NVIC_SetPriority+0xd4>)
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	33c0      	adds	r3, #192	@ 0xc0
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cca:	e031      	b.n	8001d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <__NVIC_SetPriority+0xd8>)
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	3b08      	subs	r3, #8
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3306      	adds	r3, #6
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	1dfa      	adds	r2, r7, #7
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	0011      	movs	r1, r2
 8001cec:	2203      	movs	r2, #3
 8001cee:	400a      	ands	r2, r1
 8001cf0:	00d2      	lsls	r2, r2, #3
 8001cf2:	21ff      	movs	r1, #255	@ 0xff
 8001cf4:	4091      	lsls	r1, r2
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	43d2      	mvns	r2, r2
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	401a      	ands	r2, r3
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	4003      	ands	r3, r0
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d14:	4809      	ldr	r0, [pc, #36]	@ (8001d3c <__NVIC_SetPriority+0xd8>)
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	4023      	ands	r3, r4
 8001d20:	3b08      	subs	r3, #8
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	430a      	orrs	r2, r1
 8001d26:	3306      	adds	r3, #6
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	18c3      	adds	r3, r0, r3
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b003      	add	sp, #12
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	045b      	lsls	r3, r3, #17
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d301      	bcc.n	8001d58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d54:	2301      	movs	r3, #1
 8001d56:	e010      	b.n	8001d7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <SysTick_Config+0x44>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d60:	2301      	movs	r3, #1
 8001d62:	425b      	negs	r3, r3
 8001d64:	2103      	movs	r1, #3
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff ff7c 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <SysTick_Config+0x44>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <SysTick_Config+0x44>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	210f      	movs	r1, #15
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	1c02      	adds	r2, r0, #0
 8001d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff ffbf 	bl	8001d40 <SysTick_Config>
 8001dc2:	0003      	movs	r3, r0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e14f      	b.n	800207c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4091      	lsls	r1, r2
 8001de6:	000a      	movs	r2, r1
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d100      	bne.n	8001df4 <HAL_GPIO_Init+0x28>
 8001df2:	e140      	b.n	8002076 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d005      	beq.n	8001e0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d130      	bne.n	8001e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	0013      	movs	r3, r2
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e42:	2201      	movs	r2, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	2201      	movs	r2, #1
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2203      	movs	r2, #3
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d017      	beq.n	8001eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	409a      	lsls	r2, r3
 8001e88:	0013      	movs	r3, r2
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d123      	bne.n	8001efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	58d3      	ldr	r3, [r2, r3]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2107      	movs	r1, #7
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	6939      	ldr	r1, [r7, #16]
 8001efc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	23c0      	movs	r3, #192	@ 0xc0
 8001f38:	029b      	lsls	r3, r3, #10
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d100      	bne.n	8001f40 <HAL_GPIO_Init+0x174>
 8001f3e:	e09a      	b.n	8002076 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f40:	4b54      	ldr	r3, [pc, #336]	@ (8002094 <HAL_GPIO_Init+0x2c8>)
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_GPIO_Init+0x2c8>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
 8001f4c:	4b51      	ldr	r3, [pc, #324]	@ (8002094 <HAL_GPIO_Init+0x2c8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f58:	4a4f      	ldr	r2, [pc, #316]	@ (8002098 <HAL_GPIO_Init+0x2cc>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	589b      	ldr	r3, [r3, r2]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	409a      	lsls	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	43da      	mvns	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	2390      	movs	r3, #144	@ 0x90
 8001f80:	05db      	lsls	r3, r3, #23
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x1e2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a44      	ldr	r2, [pc, #272]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x1de>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a43      	ldr	r2, [pc, #268]	@ (80020a0 <HAL_GPIO_Init+0x2d4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x1da>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a42      	ldr	r2, [pc, #264]	@ (80020a4 <HAL_GPIO_Init+0x2d8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x1d6>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	2103      	movs	r1, #3
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fc0:	4935      	ldr	r1, [pc, #212]	@ (8002098 <HAL_GPIO_Init+0x2cc>)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	035b      	lsls	r3, r3, #13
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43da      	mvns	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	039b      	lsls	r3, r3, #14
 8002010:	4013      	ands	r3, r2
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800201c:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	029b      	lsls	r3, r3, #10
 800203a:	4013      	ands	r3, r2
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002046:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800204c:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43da      	mvns	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	025b      	lsls	r3, r3, #9
 8002064:	4013      	ands	r3, r2
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_GPIO_Init+0x2dc>)
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	40da      	lsrs	r2, r3
 8002084:	1e13      	subs	r3, r2, #0
 8002086:	d000      	beq.n	800208a <HAL_GPIO_Init+0x2be>
 8002088:	e6a8      	b.n	8001ddc <HAL_GPIO_Init+0x10>
  } 
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b006      	add	sp, #24
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40010000 	.word	0x40010000
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000800 	.word	0x48000800
 80020a4:	48000c00 	.word	0x48000c00
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	000a      	movs	r2, r1
 80020b6:	1cbb      	adds	r3, r7, #2
 80020b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	1cba      	adds	r2, r7, #2
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	4013      	ands	r3, r2
 80020c4:	d004      	beq.n	80020d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020c6:	230f      	movs	r3, #15
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e003      	b.n	80020d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d0:	230f      	movs	r3, #15
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020d8:	230f      	movs	r3, #15
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
  }
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	0008      	movs	r0, r1
 80020f0:	0011      	movs	r1, r2
 80020f2:	1cbb      	adds	r3, r7, #2
 80020f4:	1c02      	adds	r2, r0, #0
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	1c7b      	adds	r3, r7, #1
 80020fa:	1c0a      	adds	r2, r1, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fe:	1c7b      	adds	r3, r7, #1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	1cbb      	adds	r3, r7, #2
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800210e:	e003      	b.n	8002118 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002110:	1cbb      	adds	r3, r7, #2
 8002112:	881a      	ldrh	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002118:	46c0      	nop			@ (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08f      	b.n	8002252 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2241      	movs	r2, #65	@ 0x41
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2240      	movs	r2, #64	@ 0x40
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fbd1 	bl	80018f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2241      	movs	r2, #65	@ 0x41
 8002152:	2124      	movs	r1, #36	@ 0x24
 8002154:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	438a      	bics	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	493b      	ldr	r1, [pc, #236]	@ (800225c <HAL_I2C_Init+0x13c>)
 8002170:	400a      	ands	r2, r1
 8002172:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4938      	ldr	r1, [pc, #224]	@ (8002260 <HAL_I2C_Init+0x140>)
 8002180:	400a      	ands	r2, r1
 8002182:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	0209      	lsls	r1, r1, #8
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e007      	b.n	80021ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2184      	movs	r1, #132	@ 0x84
 80021a8:	0209      	lsls	r1, r1, #8
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d109      	bne.n	80021ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2180      	movs	r1, #128	@ 0x80
 80021c2:	0109      	lsls	r1, r1, #4
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	e007      	b.n	80021da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4923      	ldr	r1, [pc, #140]	@ (8002264 <HAL_I2C_Init+0x144>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4920      	ldr	r1, [pc, #128]	@ (8002268 <HAL_I2C_Init+0x148>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	491a      	ldr	r1, [pc, #104]	@ (8002260 <HAL_I2C_Init+0x140>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	431a      	orrs	r2, r3
 8002204:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69d9      	ldr	r1, [r3, #28]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2241      	movs	r2, #65	@ 0x41
 800223e:	2120      	movs	r1, #32
 8002240:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2242      	movs	r2, #66	@ 0x42
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	f0ffffff 	.word	0xf0ffffff
 8002260:	ffff7fff 	.word	0xffff7fff
 8002264:	fffff7ff 	.word	0xfffff7ff
 8002268:	02008000 	.word	0x02008000

0800226c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2241      	movs	r2, #65	@ 0x41
 800227a:	5c9b      	ldrb	r3, [r3, r2]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b20      	cmp	r3, #32
 8002280:	d138      	bne.n	80022f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2240      	movs	r2, #64	@ 0x40
 8002286:	5c9b      	ldrb	r3, [r3, r2]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800228c:	2302      	movs	r3, #2
 800228e:	e032      	b.n	80022f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	@ 0x40
 8002294:	2101      	movs	r1, #1
 8002296:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2241      	movs	r2, #65	@ 0x41
 800229c:	2124      	movs	r1, #36	@ 0x24
 800229e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	438a      	bics	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4911      	ldr	r1, [pc, #68]	@ (8002300 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2101      	movs	r1, #1
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2241      	movs	r2, #65	@ 0x41
 80022e4:	2120      	movs	r1, #32
 80022e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2240      	movs	r2, #64	@ 0x40
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	ffffefff 	.word	0xffffefff

08002304 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2241      	movs	r2, #65	@ 0x41
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	d139      	bne.n	800238e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2240      	movs	r2, #64	@ 0x40
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002324:	2302      	movs	r3, #2
 8002326:	e033      	b.n	8002390 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2240      	movs	r2, #64	@ 0x40
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2241      	movs	r2, #65	@ 0x41
 8002334:	2124      	movs	r1, #36	@ 0x24
 8002336:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2241      	movs	r2, #65	@ 0x41
 800237e:	2120      	movs	r1, #32
 8002380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	@ 0x40
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	fffff0ff 	.word	0xfffff0ff

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e305      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x1e>
 80023b8:	e08d      	b.n	80024d6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023ba:	4bc5      	ldr	r3, [pc, #788]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	220c      	movs	r2, #12
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00e      	beq.n	80023e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c6:	4bc2      	ldr	r3, [pc, #776]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	220c      	movs	r2, #12
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x64>
 80023d2:	4bbf      	ldr	r3, [pc, #764]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	23c0      	movs	r3, #192	@ 0xc0
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	401a      	ands	r2, r3
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	025b      	lsls	r3, r3, #9
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d10d      	bne.n	8002400 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4bba      	ldr	r3, [pc, #744]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d100      	bne.n	80023f2 <HAL_RCC_OscConfig+0x56>
 80023f0:	e070      	b.n	80024d4 <HAL_RCC_OscConfig+0x138>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d000      	beq.n	80023fc <HAL_RCC_OscConfig+0x60>
 80023fa:	e06b      	b.n	80024d4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e2dc      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x7c>
 8002408:	4bb1      	ldr	r3, [pc, #708]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4bb0      	ldr	r3, [pc, #704]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	0249      	lsls	r1, r1, #9
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e02f      	b.n	8002478 <HAL_RCC_OscConfig+0xdc>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x9e>
 8002420:	4bab      	ldr	r3, [pc, #684]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4baa      	ldr	r3, [pc, #680]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002426:	49ab      	ldr	r1, [pc, #684]	@ (80026d4 <HAL_RCC_OscConfig+0x338>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4ba8      	ldr	r3, [pc, #672]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4ba7      	ldr	r3, [pc, #668]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002432:	49a9      	ldr	r1, [pc, #676]	@ (80026d8 <HAL_RCC_OscConfig+0x33c>)
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e01e      	b.n	8002478 <HAL_RCC_OscConfig+0xdc>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10e      	bne.n	8002460 <HAL_RCC_OscConfig+0xc4>
 8002442:	4ba3      	ldr	r3, [pc, #652]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4ba2      	ldr	r3, [pc, #648]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	02c9      	lsls	r1, r1, #11
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	4b9f      	ldr	r3, [pc, #636]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b9e      	ldr	r3, [pc, #632]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002456:	2180      	movs	r1, #128	@ 0x80
 8002458:	0249      	lsls	r1, r1, #9
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xdc>
 8002460:	4b9b      	ldr	r3, [pc, #620]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b9a      	ldr	r3, [pc, #616]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002466:	499b      	ldr	r1, [pc, #620]	@ (80026d4 <HAL_RCC_OscConfig+0x338>)
 8002468:	400a      	ands	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4b98      	ldr	r3, [pc, #608]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b97      	ldr	r3, [pc, #604]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002472:	4999      	ldr	r1, [pc, #612]	@ (80026d8 <HAL_RCC_OscConfig+0x33c>)
 8002474:	400a      	ands	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d014      	beq.n	80024aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fbc2 	bl	8001c08 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248a:	f7ff fbbd 	bl	8001c08 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	@ 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e28e      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	4b8c      	ldr	r3, [pc, #560]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	4013      	ands	r3, r2
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0xee>
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff fbad 	bl	8001c08 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fba8 	bl	8001c08 <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e279      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	4b82      	ldr	r3, [pc, #520]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x118>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	d100      	bne.n	80024e2 <HAL_RCC_OscConfig+0x146>
 80024e0:	e06c      	b.n	80025bc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024e2:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	220c      	movs	r2, #12
 80024e8:	4013      	ands	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024ec:	4b78      	ldr	r3, [pc, #480]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	220c      	movs	r2, #12
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d11f      	bne.n	8002538 <HAL_RCC_OscConfig+0x19c>
 80024f8:	4b75      	ldr	r3, [pc, #468]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	23c0      	movs	r3, #192	@ 0xc0
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	401a      	ands	r2, r3
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	429a      	cmp	r2, r3
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b71      	ldr	r3, [pc, #452]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2202      	movs	r2, #2
 8002510:	4013      	ands	r3, r2
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x184>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e24c      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b6b      	ldr	r3, [pc, #428]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	22f8      	movs	r2, #248	@ 0xf8
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00da      	lsls	r2, r3, #3
 8002530:	4b67      	ldr	r3, [pc, #412]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e041      	b.n	80025bc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d024      	beq.n	800258a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b63      	ldr	r3, [pc, #396]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b62      	ldr	r3, [pc, #392]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fb5c 	bl	8001c08 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff fb57 	bl	8001c08 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e228      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d0f1      	beq.n	8002556 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b57      	ldr	r3, [pc, #348]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	22f8      	movs	r2, #248	@ 0xf8
 8002578:	4393      	bics	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00da      	lsls	r2, r3, #3
 8002582:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e018      	b.n	80025bc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b51      	ldr	r3, [pc, #324]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b50      	ldr	r3, [pc, #320]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002590:	2101      	movs	r1, #1
 8002592:	438a      	bics	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff fb37 	bl	8001c08 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a0:	f7ff fb32 	bl	8001c08 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e203      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	d1f1      	bne.n	80025a0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	4013      	ands	r3, r2
 80025c4:	d036      	beq.n	8002634 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b40      	ldr	r3, [pc, #256]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80025d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d2:	4b3f      	ldr	r3, [pc, #252]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7ff fb15 	bl	8001c08 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fb10 	bl	8001c08 <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1e1      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f1      	beq.n	80025e4 <HAL_RCC_OscConfig+0x248>
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b33      	ldr	r3, [pc, #204]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002606:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002608:	2101      	movs	r1, #1
 800260a:	438a      	bics	r2, r1
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7ff fafb 	bl	8001c08 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002618:	f7ff faf6 	bl	8001c08 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1c7      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d1f1      	bne.n	8002618 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2204      	movs	r2, #4
 800263a:	4013      	ands	r3, r2
 800263c:	d100      	bne.n	8002640 <HAL_RCC_OscConfig+0x2a4>
 800263e:	e0b5      	b.n	80027ac <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002640:	201f      	movs	r0, #31
 8002642:	183b      	adds	r3, r7, r0
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	055b      	lsls	r3, r3, #21
 8002650:	4013      	ands	r3, r2
 8002652:	d110      	bne.n	8002676 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	0549      	lsls	r1, r1, #21
 800265e:	430a      	orrs	r2, r1
 8002660:	61da      	str	r2, [r3, #28]
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	055b      	lsls	r3, r3, #21
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002670:	183b      	adds	r3, r7, r0
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_RCC_OscConfig+0x340>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d11a      	bne.n	80026b8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_RCC_OscConfig+0x340>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_RCC_OscConfig+0x340>)
 8002688:	2180      	movs	r1, #128	@ 0x80
 800268a:	0049      	lsls	r1, r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7ff faba 	bl	8001c08 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7ff fab5 	bl	8001c08 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	@ 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e186      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_RCC_OscConfig+0x340>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10f      	bne.n	80026e0 <HAL_RCC_OscConfig+0x344>
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	4b02      	ldr	r3, [pc, #8]	@ (80026d0 <HAL_RCC_OscConfig+0x334>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	621a      	str	r2, [r3, #32]
 80026cc:	e036      	b.n	800273c <HAL_RCC_OscConfig+0x3a0>
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	40021000 	.word	0x40021000
 80026d4:	fffeffff 	.word	0xfffeffff
 80026d8:	fffbffff 	.word	0xfffbffff
 80026dc:	40007000 	.word	0x40007000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x366>
 80026e8:	4bb6      	ldr	r3, [pc, #728]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	4bb5      	ldr	r3, [pc, #724]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	438a      	bics	r2, r1
 80026f2:	621a      	str	r2, [r3, #32]
 80026f4:	4bb3      	ldr	r3, [pc, #716]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4bb2      	ldr	r3, [pc, #712]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80026fa:	2104      	movs	r1, #4
 80026fc:	438a      	bics	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x3a0>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x388>
 800270a:	4bae      	ldr	r3, [pc, #696]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	4bad      	ldr	r3, [pc, #692]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002710:	2104      	movs	r1, #4
 8002712:	430a      	orrs	r2, r1
 8002714:	621a      	str	r2, [r3, #32]
 8002716:	4bab      	ldr	r3, [pc, #684]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	4baa      	ldr	r3, [pc, #680]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x3a0>
 8002724:	4ba7      	ldr	r3, [pc, #668]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	4ba6      	ldr	r3, [pc, #664]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	621a      	str	r2, [r3, #32]
 8002730:	4ba4      	ldr	r3, [pc, #656]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	4ba3      	ldr	r3, [pc, #652]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002736:	2104      	movs	r1, #4
 8002738:	438a      	bics	r2, r1
 800273a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d014      	beq.n	800276e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7ff fa60 	bl	8001c08 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e009      	b.n	8002762 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fa5b 	bl	8001c08 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	4a9b      	ldr	r2, [pc, #620]	@ (80029c8 <HAL_RCC_OscConfig+0x62c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e12b      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	4b98      	ldr	r3, [pc, #608]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x3b2>
 800276c:	e013      	b.n	8002796 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7ff fa4b 	bl	8001c08 <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	e009      	b.n	800278c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7ff fa46 	bl	8001c08 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	4a91      	ldr	r2, [pc, #580]	@ (80029c8 <HAL_RCC_OscConfig+0x62c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e116      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	4b8d      	ldr	r3, [pc, #564]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002796:	231f      	movs	r3, #31
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	4b87      	ldr	r3, [pc, #540]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027a6:	4989      	ldr	r1, [pc, #548]	@ (80029cc <HAL_RCC_OscConfig+0x630>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	4013      	ands	r3, r2
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d12a      	bne.n	8002814 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027be:	4b81      	ldr	r3, [pc, #516]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c2:	4b80      	ldr	r3, [pc, #512]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027c4:	2104      	movs	r1, #4
 80027c6:	430a      	orrs	r2, r1
 80027c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027ca:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ce:	4b7d      	ldr	r3, [pc, #500]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7ff fa17 	bl	8001c08 <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027e0:	f7ff fa12 	bl	8001c08 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0e3      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027f2:	4b74      	ldr	r3, [pc, #464]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0f1      	beq.n	80027e0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027fc:	4b71      	ldr	r3, [pc, #452]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	22f8      	movs	r2, #248	@ 0xf8
 8002802:	4393      	bics	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	00da      	lsls	r2, r3, #3
 800280c:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800280e:	430a      	orrs	r2, r1
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34
 8002812:	e034      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	3305      	adds	r3, #5
 800281a:	d111      	bne.n	8002840 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800281e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002820:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002822:	2104      	movs	r1, #4
 8002824:	438a      	bics	r2, r1
 8002826:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800282a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282c:	22f8      	movs	r2, #248	@ 0xf8
 800282e:	4393      	bics	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	00da      	lsls	r2, r3, #3
 8002838:	4b62      	ldr	r3, [pc, #392]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800283a:	430a      	orrs	r2, r1
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34
 800283e:	e01e      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002840:	4b60      	ldr	r3, [pc, #384]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002844:	4b5f      	ldr	r3, [pc, #380]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002846:	2104      	movs	r1, #4
 8002848:	430a      	orrs	r2, r1
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800284c:	4b5d      	ldr	r3, [pc, #372]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800284e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002850:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002852:	2101      	movs	r1, #1
 8002854:	438a      	bics	r2, r1
 8002856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7ff f9d6 	bl	8001c08 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002862:	f7ff f9d1 	bl	8001c08 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0a2      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002874:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002878:	2202      	movs	r2, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d1f1      	bne.n	8002862 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d100      	bne.n	8002888 <HAL_RCC_OscConfig+0x4ec>
 8002886:	e097      	b.n	80029b8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002888:	4b4e      	ldr	r3, [pc, #312]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	220c      	movs	r2, #12
 800288e:	4013      	ands	r3, r2
 8002890:	2b08      	cmp	r3, #8
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x4fa>
 8002894:	e06b      	b.n	800296e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d14c      	bne.n	8002938 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b49      	ldr	r3, [pc, #292]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b48      	ldr	r3, [pc, #288]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028a4:	494a      	ldr	r1, [pc, #296]	@ (80029d0 <HAL_RCC_OscConfig+0x634>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff f9ad 	bl	8001c08 <HAL_GetTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff f9a8 	bl	8001c08 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e079      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	049b      	lsls	r3, r3, #18
 80028ce:	4013      	ands	r3, r2
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d2:	4b3c      	ldr	r3, [pc, #240]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	220f      	movs	r2, #15
 80028d8:	4393      	bics	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e0:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028e6:	4b37      	ldr	r3, [pc, #220]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a3a      	ldr	r2, [pc, #232]	@ (80029d4 <HAL_RCC_OscConfig+0x638>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	431a      	orrs	r2, r3
 80028fa:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	0449      	lsls	r1, r1, #17
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7ff f97b 	bl	8001c08 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7ff f976 	bl	8001c08 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e047      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	049b      	lsls	r3, r3, #18
 8002932:	4013      	ands	r3, r2
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x57c>
 8002936:	e03f      	b.n	80029b8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002938:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b21      	ldr	r3, [pc, #132]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800293e:	4924      	ldr	r1, [pc, #144]	@ (80029d0 <HAL_RCC_OscConfig+0x634>)
 8002940:	400a      	ands	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f960 	bl	8001c08 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7ff f95b 	bl	8001c08 <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e02c      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	049b      	lsls	r3, r3, #18
 8002968:	4013      	ands	r3, r2
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x5b2>
 800296c:	e024      	b.n	80029b8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e01f      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800297a:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002980:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x628>)
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	23c0      	movs	r3, #192	@ 0xc0
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	401a      	ands	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	429a      	cmp	r2, r3
 8002994:	d10e      	bne.n	80029b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	220f      	movs	r2, #15
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	23f0      	movs	r3, #240	@ 0xf0
 80029a8:	039b      	lsls	r3, r3, #14
 80029aa:	401a      	ands	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b008      	add	sp, #32
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	40021000 	.word	0x40021000
 80029c8:	00001388 	.word	0x00001388
 80029cc:	efffffff 	.word	0xefffffff
 80029d0:	feffffff 	.word	0xfeffffff
 80029d4:	ffc27fff 	.word	0xffc27fff

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b3      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b5b      	ldr	r3, [pc, #364]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d911      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b58      	ldr	r3, [pc, #352]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b55      	ldr	r3, [pc, #340]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b53      	ldr	r3, [pc, #332]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e09a      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2202      	movs	r2, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	d015      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d006      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a32:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a38:	21e0      	movs	r1, #224	@ 0xe0
 8002a3a:	00c9      	lsls	r1, r1, #3
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	22f0      	movs	r2, #240	@ 0xf0
 8002a46:	4393      	bics	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b44      	ldr	r3, [pc, #272]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b3e      	ldr	r3, [pc, #248]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	@ 0x80
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d114      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06e      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	049b      	lsls	r3, r3, #18
 8002a86:	4013      	ands	r3, r2
 8002a88:	d108      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e062      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b34      	ldr	r3, [pc, #208]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e05b      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9c:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7ff f8aa 	bl	8001c08 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab8:	e009      	b.n	8002ace <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f7ff f8a5 	bl	8001c08 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	4a27      	ldr	r2, [pc, #156]	@ (8002b64 <HAL_RCC_ClockConfig+0x18c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e042      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1ec      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d211      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4393      	bics	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_RCC_ClockConfig+0x184>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e020      	b.n	8002b54 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_RCC_ClockConfig+0x190>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b30:	f000 f820 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b34:	0001      	movs	r1, r0
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <HAL_RCC_ClockConfig+0x188>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	4013      	ands	r3, r2
 8002b40:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <HAL_RCC_ClockConfig+0x194>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	000a      	movs	r2, r1
 8002b46:	40da      	lsrs	r2, r3
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x198>)
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f7ff f815 	bl	8001b7c <HAL_InitTick>
  
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	00001388 	.word	0x00001388
 8002b68:	fffff8ff 	.word	0xfffff8ff
 8002b6c:	080053a4 	.word	0x080053a4
 8002b70:	20000084 	.word	0x20000084

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	220c      	movs	r2, #12
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x36>
 8002ba2:	e02e      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	220f      	movs	r2, #15
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002bb8:	4b16      	ldr	r3, [pc, #88]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	4a17      	ldr	r2, [pc, #92]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	23c0      	movs	r3, #192	@ 0xc0
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	401a      	ands	r2, r3
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	480f      	ldr	r0, [pc, #60]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bda:	f7fd fa9b 	bl	8000114 <__udivsi3>
 8002bde:	0003      	movs	r3, r0
 8002be0:	001a      	movs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4353      	muls	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	480a      	ldr	r0, [pc, #40]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bee:	f7fd fa91 	bl	8000114 <__udivsi3>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4353      	muls	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
      break;
 8002c00:	e002      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c04:	613b      	str	r3, [r7, #16]
      break;
 8002c06:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c08:	693b      	ldr	r3, [r7, #16]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000
 8002c18:	007a1200 	.word	0x007a1200
 8002c1c:	080053bc 	.word	0x080053bc
 8002c20:	080053cc 	.word	0x080053cc

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b02      	ldr	r3, [pc, #8]	@ (8002c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	20000084 	.word	0x20000084

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002c3c:	f7ff fff2 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c40:	0001      	movs	r1, r0
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	2207      	movs	r2, #7
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	40d9      	lsrs	r1, r3
 8002c52:	000b      	movs	r3, r1
}    
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	080053b4 	.word	0x080053b4

08002c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	025b      	lsls	r3, r3, #9
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c80:	e08e      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2017      	movs	r0, #23
 8002c84:	183b      	adds	r3, r7, r0
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	055b      	lsls	r3, r3, #21
 8002c92:	4013      	ands	r3, r2
 8002c94:	d110      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b54      	ldr	r3, [pc, #336]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c9c:	2180      	movs	r1, #128	@ 0x80
 8002c9e:	0549      	lsls	r1, r1, #21
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	61da      	str	r2, [r3, #28]
 8002ca4:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d11a      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc4:	4b49      	ldr	r3, [pc, #292]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b48      	ldr	r3, [pc, #288]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	0049      	lsls	r1, r1, #1
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe ff99 	bl	8001c08 <HAL_GetTick>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	e008      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cdc:	f7fe ff94 	bl	8001c08 <HAL_GetTick>
 8002ce0:	0002      	movs	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e077      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	23c0      	movs	r3, #192	@ 0xc0
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d034      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	23c0      	movs	r3, #192	@ 0xc0
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d02c      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d1c:	4b32      	ldr	r3, [pc, #200]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a33      	ldr	r2, [pc, #204]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d26:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d28:	6a1a      	ldr	r2, [r3, #32]
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d2c:	2180      	movs	r1, #128	@ 0x80
 8002d2e:	0249      	lsls	r1, r1, #9
 8002d30:	430a      	orrs	r2, r1
 8002d32:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d34:	4b2c      	ldr	r3, [pc, #176]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d3a:	492e      	ldr	r1, [pc, #184]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d40:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe ff5b 	bl	8001c08 <HAL_GetTick>
 8002d52:	0003      	movs	r3, r0
 8002d54:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	e009      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe ff56 	bl	8001c08 <HAL_GetTick>
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	4a25      	ldr	r2, [pc, #148]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e038      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d86:	430a      	orrs	r2, r1
 8002d88:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8a:	2317      	movs	r3, #23
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d9a:	4918      	ldr	r1, [pc, #96]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002daa:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	2203      	movs	r2, #3
 8002db0:	4393      	bics	r3, r2
 8002db2:	0019      	movs	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d009      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	2210      	movs	r2, #16
 8002dce:	4393      	bics	r3, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
 8002df0:	fffffcff 	.word	0xfffffcff
 8002df4:	fffeffff 	.word	0xfffeffff
 8002df8:	00001388 	.word	0x00001388
 8002dfc:	efffffff 	.word	0xefffffff

08002e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0a8      	b.n	8002f64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	2382      	movs	r3, #130	@ 0x82
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d009      	beq.n	8002e3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61da      	str	r2, [r3, #28]
 8002e2c:	e005      	b.n	8002e3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	225d      	movs	r2, #93	@ 0x5d
 8002e44:	5c9b      	ldrb	r3, [r3, r2]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	225c      	movs	r2, #92	@ 0x5c
 8002e50:	2100      	movs	r1, #0
 8002e52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fe fd98 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	225d      	movs	r2, #93	@ 0x5d
 8002e60:	2102      	movs	r1, #2
 8002e62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2140      	movs	r1, #64	@ 0x40
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	23e0      	movs	r3, #224	@ 0xe0
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d902      	bls.n	8002e86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e002      	b.n	8002e8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	015b      	lsls	r3, r3, #5
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	23f0      	movs	r3, #240	@ 0xf0
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d008      	beq.n	8002eaa <HAL_SPI_Init+0xaa>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	23e0      	movs	r3, #224	@ 0xe0
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2382      	movs	r3, #130	@ 0x82
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	2384      	movs	r3, #132	@ 0x84
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6999      	ldr	r1, [r3, #24]
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	400b      	ands	r3, r1
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2138      	movs	r1, #56	@ 0x38
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	2180      	movs	r1, #128	@ 0x80
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	401a      	ands	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	2204      	movs	r2, #4
 8002f10:	401a      	ands	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	2110      	movs	r1, #16
 8002f18:	400b      	ands	r3, r1
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f20:	2108      	movs	r1, #8
 8002f22:	400b      	ands	r3, r1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	23f0      	movs	r3, #240	@ 0xf0
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	400b      	ands	r3, r1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	0011      	movs	r1, r2
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	2380      	movs	r3, #128	@ 0x80
 8002f38:	015b      	lsls	r3, r3, #5
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4907      	ldr	r1, [pc, #28]	@ (8002f6c <HAL_SPI_Init+0x16c>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	225d      	movs	r2, #93	@ 0x5d
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b004      	add	sp, #16
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	fffff7ff 	.word	0xfffff7ff

08002f70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f80:	231f      	movs	r3, #31
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	225c      	movs	r2, #92	@ 0x5c
 8002f8c:	5c9b      	ldrb	r3, [r3, r2]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_SPI_Transmit+0x26>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e147      	b.n	8003226 <HAL_SPI_Transmit+0x2b6>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	225c      	movs	r2, #92	@ 0x5c
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f9e:	f7fe fe33 	bl	8001c08 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fa6:	2316      	movs	r3, #22
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	1dba      	adds	r2, r7, #6
 8002fac:	8812      	ldrh	r2, [r2, #0]
 8002fae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	225d      	movs	r2, #93	@ 0x5d
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d004      	beq.n	8002fc6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002fbc:	231f      	movs	r3, #31
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fc4:	e128      	b.n	8003218 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_SPI_Transmit+0x64>
 8002fcc:	1dbb      	adds	r3, r7, #6
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002fd4:	231f      	movs	r3, #31
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fdc:	e11c      	b.n	8003218 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	225d      	movs	r2, #93	@ 0x5d
 8002fe2:	2103      	movs	r1, #3
 8002fe4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1dba      	adds	r2, r7, #6
 8002ff6:	8812      	ldrh	r2, [r2, #0]
 8002ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1dba      	adds	r2, r7, #6
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2244      	movs	r2, #68	@ 0x44
 800300c:	2100      	movs	r1, #0
 800300e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2246      	movs	r2, #70	@ 0x46
 8003014:	2100      	movs	r1, #0
 8003016:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	2380      	movs	r3, #128	@ 0x80
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	429a      	cmp	r2, r3
 800302e:	d110      	bne.n	8003052 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2140      	movs	r1, #64	@ 0x40
 800303c:	438a      	bics	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2180      	movs	r1, #128	@ 0x80
 800304c:	01c9      	lsls	r1, r1, #7
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2240      	movs	r2, #64	@ 0x40
 800305a:	4013      	ands	r3, r2
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d007      	beq.n	8003070 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2140      	movs	r1, #64	@ 0x40
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	23e0      	movs	r3, #224	@ 0xe0
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	429a      	cmp	r2, r3
 800307a:	d952      	bls.n	8003122 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_SPI_Transmit+0x11e>
 8003084:	2316      	movs	r3, #22
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d143      	bne.n	8003116 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b2:	e030      	b.n	8003116 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d112      	bne.n	80030e8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e6:	e016      	b.n	8003116 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e8:	f7fe fd8e 	bl	8001c08 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d802      	bhi.n	80030fe <HAL_SPI_Transmit+0x18e>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	3301      	adds	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_SPI_Transmit+0x194>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003104:	231f      	movs	r3, #31
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2203      	movs	r2, #3
 800310a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	225d      	movs	r2, #93	@ 0x5d
 8003110:	2101      	movs	r1, #1
 8003112:	5499      	strb	r1, [r3, r2]
          goto error;
 8003114:	e080      	b.n	8003218 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1c9      	bne.n	80030b4 <HAL_SPI_Transmit+0x144>
 8003120:	e053      	b.n	80031ca <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_SPI_Transmit+0x1c4>
 800312a:	2316      	movs	r3, #22
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d145      	bne.n	80031c0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	7812      	ldrb	r2, [r2, #0]
 8003140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800315a:	e031      	b.n	80031c0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d113      	bne.n	8003192 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003190:	e016      	b.n	80031c0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003192:	f7fe fd39 	bl	8001c08 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d802      	bhi.n	80031a8 <HAL_SPI_Transmit+0x238>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	d102      	bne.n	80031ae <HAL_SPI_Transmit+0x23e>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80031ae:	231f      	movs	r3, #31
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2203      	movs	r2, #3
 80031b4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	225d      	movs	r2, #93	@ 0x5d
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]
          goto error;
 80031be:	e02b      	b.n	8003218 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1c8      	bne.n	800315c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	6839      	ldr	r1, [r7, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f95d 	bl	8003490 <SPI_EndRxTxTransaction>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003206:	231f      	movs	r3, #31
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e003      	b.n	8003218 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	225d      	movs	r2, #93	@ 0x5d
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	225c      	movs	r2, #92	@ 0x5c
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003220:	231f      	movs	r3, #31
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b008      	add	sp, #32
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	1dfb      	adds	r3, r7, #7
 800323e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003240:	f7fe fce2 	bl	8001c08 <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	18d3      	adds	r3, r2, r3
 800324e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003250:	f7fe fcda 	bl	8001c08 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003258:	4b3a      	ldr	r3, [pc, #232]	@ (8003344 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	015b      	lsls	r3, r3, #5
 800325e:	0d1b      	lsrs	r3, r3, #20
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	4353      	muls	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003266:	e058      	b.n	800331a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	d055      	beq.n	800331a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800326e:	f7fe fccb 	bl	8001c08 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	429a      	cmp	r2, r3
 800327c:	d902      	bls.n	8003284 <SPI_WaitFlagStateUntilTimeout+0x54>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d142      	bne.n	800330a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	21e0      	movs	r1, #224	@ 0xe0
 8003290:	438a      	bics	r2, r1
 8003292:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	2382      	movs	r3, #130	@ 0x82
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	429a      	cmp	r2, r3
 800329e:	d113      	bne.n	80032c8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d005      	beq.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	438a      	bics	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	019b      	lsls	r3, r3, #6
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d110      	bne.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	491a      	ldr	r1, [pc, #104]	@ (8003348 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	0189      	lsls	r1, r1, #6
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	225d      	movs	r2, #93	@ 0x5d
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	225c      	movs	r2, #92	@ 0x5c
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e017      	b.n	800333a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	425a      	negs	r2, r3
 800332a:	4153      	adcs	r3, r2
 800332c:	b2db      	uxtb	r3, r3
 800332e:	001a      	movs	r2, r3
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d197      	bne.n	8003268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b008      	add	sp, #32
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	20000084 	.word	0x20000084
 8003348:	ffffdfff 	.word	0xffffdfff

0800334c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	@ 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800335a:	2317      	movs	r3, #23
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003362:	f7fe fc51 	bl	8001c08 <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	18d3      	adds	r3, r2, r3
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003372:	f7fe fc49 	bl	8001c08 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003382:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	0013      	movs	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	189b      	adds	r3, r3, r2
 800338c:	00da      	lsls	r2, r3, #3
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	0d1b      	lsrs	r3, r3, #20
 8003392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003394:	4353      	muls	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003398:	e068      	b.n	800346c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	23c0      	movs	r3, #192	@ 0xc0
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d10a      	bne.n	80033ba <SPI_WaitFifoStateUntilTimeout+0x6e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	2117      	movs	r1, #23
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	d055      	beq.n	800346c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c0:	f7fe fc22 	bl	8001c08 <HAL_GetTick>
 80033c4:	0002      	movs	r2, r0
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d902      	bls.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d142      	bne.n	800345c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	21e0      	movs	r1, #224	@ 0xe0
 80033e2:	438a      	bics	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	2382      	movs	r3, #130	@ 0x82
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d113      	bne.n	800341a <SPI_WaitFifoStateUntilTimeout+0xce>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d005      	beq.n	800340a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	429a      	cmp	r2, r3
 8003408:	d107      	bne.n	800341a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2140      	movs	r1, #64	@ 0x40
 8003416:	438a      	bics	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	429a      	cmp	r2, r3
 8003424:	d110      	bne.n	8003448 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2180      	movs	r1, #128	@ 0x80
 8003442:	0189      	lsls	r1, r1, #6
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	225d      	movs	r2, #93	@ 0x5d
 800344c:	2101      	movs	r1, #1
 800344e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	225c      	movs	r2, #92	@ 0x5c
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e010      	b.n	800347e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	3b01      	subs	r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d18e      	bne.n	800339a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b00a      	add	sp, #40	@ 0x28
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	20000084 	.word	0x20000084
 800348c:	ffffdfff 	.word	0xffffdfff

08003490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	23c0      	movs	r3, #192	@ 0xc0
 80034a0:	0159      	lsls	r1, r3, #5
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	0013      	movs	r3, r2
 80034aa:	2200      	movs	r2, #0
 80034ac:	f7ff ff4e 	bl	800334c <SPI_WaitFifoStateUntilTimeout>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d007      	beq.n	80034c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b8:	2220      	movs	r2, #32
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e027      	b.n	8003514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	0013      	movs	r3, r2
 80034ce:	2200      	movs	r2, #0
 80034d0:	2180      	movs	r1, #128	@ 0x80
 80034d2:	f7ff fead 	bl	8003230 <SPI_WaitFlagStateUntilTimeout>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d007      	beq.n	80034ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034de:	2220      	movs	r2, #32
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e014      	b.n	8003514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	23c0      	movs	r3, #192	@ 0xc0
 80034ee:	00d9      	lsls	r1, r3, #3
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	0013      	movs	r3, r2
 80034f8:	2200      	movs	r2, #0
 80034fa:	f7ff ff27 	bl	800334c <SPI_WaitFifoStateUntilTimeout>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d007      	beq.n	8003512 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003506:	2220      	movs	r2, #32
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e000      	b.n	8003514 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e044      	b.n	80035b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d107      	bne.n	8003546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2278      	movs	r2, #120	@ 0x78
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0018      	movs	r0, r3
 8003542:	f7fe fa71 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2224      	movs	r2, #36	@ 0x24
 800354a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f99c 	bl	80038a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f828 	bl	80035c4 <UART_SetConfig>
 8003574:	0003      	movs	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e01c      	b.n	80035b8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	490d      	ldr	r1, [pc, #52]	@ (80035c0 <HAL_UART_Init+0xa4>)
 800358a:	400a      	ands	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2108      	movs	r1, #8
 800359a:	438a      	bics	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	430a      	orrs	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fa2b 	bl	8003a0c <UART_CheckIdleState>
 80035b6:	0003      	movs	r3, r0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	fffff7ff 	.word	0xfffff7ff

080035c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035cc:	231e      	movs	r3, #30
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4aa1      	ldr	r2, [pc, #644]	@ (8003878 <UART_SetConfig+0x2b4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a9c      	ldr	r2, [pc, #624]	@ (800387c <UART_SetConfig+0x2b8>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a93      	ldr	r2, [pc, #588]	@ (8003880 <UART_SetConfig+0x2bc>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a8f      	ldr	r2, [pc, #572]	@ (8003884 <UART_SetConfig+0x2c0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d127      	bne.n	800369a <UART_SetConfig+0xd6>
 800364a:	4b8f      	ldr	r3, [pc, #572]	@ (8003888 <UART_SetConfig+0x2c4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	2203      	movs	r2, #3
 8003650:	4013      	ands	r3, r2
 8003652:	2b03      	cmp	r3, #3
 8003654:	d00d      	beq.n	8003672 <UART_SetConfig+0xae>
 8003656:	d81b      	bhi.n	8003690 <UART_SetConfig+0xcc>
 8003658:	2b02      	cmp	r3, #2
 800365a:	d014      	beq.n	8003686 <UART_SetConfig+0xc2>
 800365c:	d818      	bhi.n	8003690 <UART_SetConfig+0xcc>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <UART_SetConfig+0xa4>
 8003662:	2b01      	cmp	r3, #1
 8003664:	d00a      	beq.n	800367c <UART_SetConfig+0xb8>
 8003666:	e013      	b.n	8003690 <UART_SetConfig+0xcc>
 8003668:	231f      	movs	r3, #31
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e049      	b.n	8003706 <UART_SetConfig+0x142>
 8003672:	231f      	movs	r3, #31
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e044      	b.n	8003706 <UART_SetConfig+0x142>
 800367c:	231f      	movs	r3, #31
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2204      	movs	r2, #4
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e03f      	b.n	8003706 <UART_SetConfig+0x142>
 8003686:	231f      	movs	r3, #31
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2208      	movs	r2, #8
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e03a      	b.n	8003706 <UART_SetConfig+0x142>
 8003690:	231f      	movs	r3, #31
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2210      	movs	r2, #16
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e035      	b.n	8003706 <UART_SetConfig+0x142>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7b      	ldr	r2, [pc, #492]	@ (800388c <UART_SetConfig+0x2c8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d104      	bne.n	80036ae <UART_SetConfig+0xea>
 80036a4:	231f      	movs	r3, #31
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e02b      	b.n	8003706 <UART_SetConfig+0x142>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a77      	ldr	r2, [pc, #476]	@ (8003890 <UART_SetConfig+0x2cc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d104      	bne.n	80036c2 <UART_SetConfig+0xfe>
 80036b8:	231f      	movs	r3, #31
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e021      	b.n	8003706 <UART_SetConfig+0x142>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a73      	ldr	r2, [pc, #460]	@ (8003894 <UART_SetConfig+0x2d0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d104      	bne.n	80036d6 <UART_SetConfig+0x112>
 80036cc:	231f      	movs	r3, #31
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e017      	b.n	8003706 <UART_SetConfig+0x142>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6f      	ldr	r2, [pc, #444]	@ (8003898 <UART_SetConfig+0x2d4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d104      	bne.n	80036ea <UART_SetConfig+0x126>
 80036e0:	231f      	movs	r3, #31
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00d      	b.n	8003706 <UART_SetConfig+0x142>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6b      	ldr	r2, [pc, #428]	@ (800389c <UART_SetConfig+0x2d8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d104      	bne.n	80036fe <UART_SetConfig+0x13a>
 80036f4:	231f      	movs	r3, #31
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e003      	b.n	8003706 <UART_SetConfig+0x142>
 80036fe:	231f      	movs	r3, #31
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2210      	movs	r2, #16
 8003704:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	429a      	cmp	r2, r3
 8003710:	d15c      	bne.n	80037cc <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8003712:	231f      	movs	r3, #31
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d015      	beq.n	8003748 <UART_SetConfig+0x184>
 800371c:	dc18      	bgt.n	8003750 <UART_SetConfig+0x18c>
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00d      	beq.n	800373e <UART_SetConfig+0x17a>
 8003722:	dc15      	bgt.n	8003750 <UART_SetConfig+0x18c>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <UART_SetConfig+0x16a>
 8003728:	2b02      	cmp	r3, #2
 800372a:	d005      	beq.n	8003738 <UART_SetConfig+0x174>
 800372c:	e010      	b.n	8003750 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7ff fa83 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8003732:	0003      	movs	r3, r0
 8003734:	61bb      	str	r3, [r7, #24]
        break;
 8003736:	e012      	b.n	800375e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003738:	4b59      	ldr	r3, [pc, #356]	@ (80038a0 <UART_SetConfig+0x2dc>)
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e00f      	b.n	800375e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7ff fa19 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8003742:	0003      	movs	r3, r0
 8003744:	61bb      	str	r3, [r7, #24]
        break;
 8003746:	e00a      	b.n	800375e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	61bb      	str	r3, [r7, #24]
        break;
 800374e:	e006      	b.n	800375e <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003754:	231e      	movs	r3, #30
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
        break;
 800375c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <UART_SetConfig+0x1a2>
 8003764:	e07a      	b.n	800385c <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	18d2      	adds	r2, r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f7fc fccb 	bl	8000114 <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d91c      	bls.n	80037c2 <UART_SetConfig+0x1fe>
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	025b      	lsls	r3, r3, #9
 800378e:	429a      	cmp	r2, r3
 8003790:	d217      	bcs.n	80037c2 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	b29a      	uxth	r2, r3
 8003796:	200e      	movs	r0, #14
 8003798:	183b      	adds	r3, r7, r0
 800379a:	210f      	movs	r1, #15
 800379c:	438a      	bics	r2, r1
 800379e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2207      	movs	r2, #7
 80037a8:	4013      	ands	r3, r2
 80037aa:	b299      	uxth	r1, r3
 80037ac:	183b      	adds	r3, r7, r0
 80037ae:	183a      	adds	r2, r7, r0
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	183a      	adds	r2, r7, r0
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e04c      	b.n	800385c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 80037c2:	231e      	movs	r3, #30
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e047      	b.n	800385c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037cc:	231f      	movs	r3, #31
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d015      	beq.n	8003802 <UART_SetConfig+0x23e>
 80037d6:	dc18      	bgt.n	800380a <UART_SetConfig+0x246>
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d00d      	beq.n	80037f8 <UART_SetConfig+0x234>
 80037dc:	dc15      	bgt.n	800380a <UART_SetConfig+0x246>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <UART_SetConfig+0x224>
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d005      	beq.n	80037f2 <UART_SetConfig+0x22e>
 80037e6:	e010      	b.n	800380a <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7ff fa26 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	e012      	b.n	8003818 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f2:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <UART_SetConfig+0x2dc>)
 80037f4:	61bb      	str	r3, [r7, #24]
        break;
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f8:	f7ff f9bc 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80037fc:	0003      	movs	r3, r0
 80037fe:	61bb      	str	r3, [r7, #24]
        break;
 8003800:	e00a      	b.n	8003818 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e006      	b.n	8003818 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800380e:	231e      	movs	r3, #30
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
        break;
 8003816:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01e      	beq.n	800385c <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085a      	lsrs	r2, r3, #1
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	18d2      	adds	r2, r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7fc fc70 	bl	8000114 <__udivsi3>
 8003834:	0003      	movs	r3, r0
 8003836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	d90a      	bls.n	8003854 <UART_SetConfig+0x290>
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	025b      	lsls	r3, r3, #9
 8003844:	429a      	cmp	r2, r3
 8003846:	d205      	bcs.n	8003854 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	e003      	b.n	800385c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8003854:	231e      	movs	r3, #30
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003868:	231e      	movs	r3, #30
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b008      	add	sp, #32
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	efff69f3 	.word	0xefff69f3
 800387c:	ffffcfff 	.word	0xffffcfff
 8003880:	fffff4ff 	.word	0xfffff4ff
 8003884:	40013800 	.word	0x40013800
 8003888:	40021000 	.word	0x40021000
 800388c:	40004400 	.word	0x40004400
 8003890:	40004800 	.word	0x40004800
 8003894:	40004c00 	.word	0x40004c00
 8003898:	40005000 	.word	0x40005000
 800389c:	40011400 	.word	0x40011400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	2208      	movs	r2, #8
 80038b2:	4013      	ands	r3, r2
 80038b4:	d00b      	beq.n	80038ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a4a      	ldr	r2, [pc, #296]	@ (80039e8 <UART_AdvFeatureConfig+0x144>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a43      	ldr	r2, [pc, #268]	@ (80039ec <UART_AdvFeatureConfig+0x148>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	2202      	movs	r2, #2
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00b      	beq.n	8003912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a3b      	ldr	r2, [pc, #236]	@ (80039f0 <UART_AdvFeatureConfig+0x14c>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	2204      	movs	r2, #4
 8003918:	4013      	ands	r3, r2
 800391a:	d00b      	beq.n	8003934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a34      	ldr	r2, [pc, #208]	@ (80039f4 <UART_AdvFeatureConfig+0x150>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2210      	movs	r2, #16
 800393a:	4013      	ands	r3, r2
 800393c:	d00b      	beq.n	8003956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a2c      	ldr	r2, [pc, #176]	@ (80039f8 <UART_AdvFeatureConfig+0x154>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	2220      	movs	r2, #32
 800395c:	4013      	ands	r3, r2
 800395e:	d00b      	beq.n	8003978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <UART_AdvFeatureConfig+0x158>)
 8003968:	4013      	ands	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	2240      	movs	r2, #64	@ 0x40
 800397e:	4013      	ands	r3, r2
 8003980:	d01d      	beq.n	80039be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <UART_AdvFeatureConfig+0x15c>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	035b      	lsls	r3, r3, #13
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10b      	bne.n	80039be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a15      	ldr	r2, [pc, #84]	@ (8003a04 <UART_AdvFeatureConfig+0x160>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	4013      	ands	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003a08 <UART_AdvFeatureConfig+0x164>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	ffff7fff 	.word	0xffff7fff
 80039ec:	fffdffff 	.word	0xfffdffff
 80039f0:	fffeffff 	.word	0xfffeffff
 80039f4:	fffbffff 	.word	0xfffbffff
 80039f8:	ffffefff 	.word	0xffffefff
 80039fc:	ffffdfff 	.word	0xffffdfff
 8003a00:	ffefffff 	.word	0xffefffff
 8003a04:	ff9fffff 	.word	0xff9fffff
 8003a08:	fff7ffff 	.word	0xfff7ffff

08003a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b092      	sub	sp, #72	@ 0x48
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2284      	movs	r2, #132	@ 0x84
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a1c:	f7fe f8f4 	bl	8001c08 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d12c      	bne.n	8003a8c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a34:	2280      	movs	r2, #128	@ 0x80
 8003a36:	0391      	lsls	r1, r2, #14
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4a46      	ldr	r2, [pc, #280]	@ (8003b54 <UART_CheckIdleState+0x148>)
 8003a3c:	9200      	str	r2, [sp, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f000 f88c 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003a44:	1e03      	subs	r3, r0, #0
 8003a46:	d021      	beq.n	8003a8c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a48:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a52:	2301      	movs	r3, #1
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2180      	movs	r1, #128	@ 0x80
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2278      	movs	r2, #120	@ 0x78
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e05f      	b.n	8003b4c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d146      	bne.n	8003b28 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9c:	2280      	movs	r2, #128	@ 0x80
 8003a9e:	03d1      	lsls	r1, r2, #15
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <UART_CheckIdleState+0x148>)
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f000 f858 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d03b      	beq.n	8003b28 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aba:	2301      	movs	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4921      	ldr	r1, [pc, #132]	@ (8003b58 <UART_CheckIdleState+0x14c>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aec:	2301      	movs	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2280      	movs	r2, #128	@ 0x80
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2278      	movs	r2, #120	@ 0x78
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e011      	b.n	8003b4c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2278      	movs	r2, #120	@ 0x78
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b010      	add	sp, #64	@ 0x40
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	01ffffff 	.word	0x01ffffff
 8003b58:	fffffedf 	.word	0xfffffedf

08003b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	e051      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3301      	adds	r3, #1
 8003b72:	d04e      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fe f848 	bl	8001c08 <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e051      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2204      	movs	r2, #4
 8003b96:	4013      	ands	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b80      	cmp	r3, #128	@ 0x80
 8003b9e:	d038      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b40      	cmp	r3, #64	@ 0x40
 8003ba4:	d035      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d111      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f83c 	bl	8003c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2284      	movs	r2, #132	@ 0x84
 8003bc8:	2108      	movs	r1, #8
 8003bca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2278      	movs	r2, #120	@ 0x78
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e02c      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	401a      	ands	r2, r3
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d112      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f81f 	bl	8003c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2284      	movs	r2, #132	@ 0x84
 8003c02:	2120      	movs	r1, #32
 8003c04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2278      	movs	r2, #120	@ 0x78
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e00f      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	425a      	negs	r2, r3
 8003c22:	4153      	adcs	r3, r2
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	001a      	movs	r2, r3
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d09e      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08e      	sub	sp, #56	@ 0x38
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c44:	f3ef 8310 	mrs	r3, PRIMASK
 8003c48:	617b      	str	r3, [r7, #20]
  return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4926      	ldr	r1, [pc, #152]	@ (8003d00 <UART_EndRxTransfer+0xc4>)
 8003c66:	400a      	ands	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c76:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c80:	2301      	movs	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2101      	movs	r1, #1
 8003c98:	438a      	bics	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d118      	bne.n	8003ce2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cba:	2301      	movs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f383 8810 	msr	PRIMASK, r3
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	438a      	bics	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b00e      	add	sp, #56	@ 0x38
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	fffffedf 	.word	0xfffffedf

08003d04 <memset>:
 8003d04:	0003      	movs	r3, r0
 8003d06:	1882      	adds	r2, r0, r2
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	7019      	strb	r1, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	2600      	movs	r6, #0
 8003d18:	4c0c      	ldr	r4, [pc, #48]	@ (8003d4c <__libc_init_array+0x38>)
 8003d1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d50 <__libc_init_array+0x3c>)
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	2600      	movs	r6, #0
 8003d26:	f000 f819 	bl	8003d5c <_init>
 8003d2a:	4c0a      	ldr	r4, [pc, #40]	@ (8003d54 <__libc_init_array+0x40>)
 8003d2c:	4d0a      	ldr	r5, [pc, #40]	@ (8003d58 <__libc_init_array+0x44>)
 8003d2e:	1b64      	subs	r4, r4, r5
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	00b3      	lsls	r3, r6, #2
 8003d3a:	58eb      	ldr	r3, [r5, r3]
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	00b3      	lsls	r3, r6, #2
 8003d44:	58eb      	ldr	r3, [r5, r3]
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	080053dc 	.word	0x080053dc
 8003d50:	080053dc 	.word	0x080053dc
 8003d54:	080053e0 	.word	0x080053e0
 8003d58:	080053dc 	.word	0x080053dc

08003d5c <_init>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr

08003d68 <_fini>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr
