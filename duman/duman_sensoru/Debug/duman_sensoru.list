
duman_sensoru.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003670  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003730  08003730  00004730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800374c  0800374c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800374c  0800374c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003750  08003750  00004750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003754  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08003760  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003760  00005084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e43  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abb  00000000  00000000  0000ce77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0000e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000662  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011619  00000000  00000000  0000f802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b156  00000000  00000000  00020e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a13e  00000000  00000000  0002bf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000960af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c9c  00000000  00000000  000960f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00097d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003718 	.word	0x08003718

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003718 	.word	0x08003718

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb09 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f847 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8f7 	bl	8000420 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f8b5 	bl	80003a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADPD188BI_Init();
 8000236:	f000 f9cb 	bl	80005d0 <ADPD188BI_Init>
    /* USER CODE BEGIN 3 */

	  //duman sensörü


	  Enter_Stop_Mode();
 800023a:	f000 fa20 	bl	800067e <Enter_Stop_Mode>

	  if (smoke_data_ready)
 800023e:	4b1c      	ldr	r3, [pc, #112]	@ (80002b0 <main+0x90>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <main+0x1a>
	  {
		  smoke_data_ready = 0;
 8000246:	4b1a      	ldr	r3, [pc, #104]	@ (80002b0 <main+0x90>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]

	      uint16_t value = ADPD188BI_Read_Smoke();
 800024c:	1dbc      	adds	r4, r7, #6
 800024e:	f000 fa0d 	bl	800066c <ADPD188BI_Read_Smoke>
 8000252:	0003      	movs	r3, r0
 8000254:	8023      	strh	r3, [r4, #0]

	      HAL_GPIO_WritePin(LED_PORT, LED1_PIN | LED2_PIN | LED3_PIN, GPIO_PIN_RESET);
 8000256:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <main+0x94>)
 8000258:	2200      	movs	r2, #0
 800025a:	2107      	movs	r1, #7
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fe4d 	bl	8000efc <HAL_GPIO_WritePin>

	      if (value > 3000)
 8000262:	1dbb      	adds	r3, r7, #6
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	4a14      	ldr	r2, [pc, #80]	@ (80002b8 <main+0x98>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d906      	bls.n	800027a <main+0x5a>
	         {
	             HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_SET);
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <main+0x94>)
 800026e:	2201      	movs	r2, #1
 8000270:	2104      	movs	r1, #4
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fe42 	bl	8000efc <HAL_GPIO_WritePin>
 8000278:	e7df      	b.n	800023a <main+0x1a>
	         }
	         else if (value > 2000)
 800027a:	1dbb      	adds	r3, r7, #6
 800027c:	881a      	ldrh	r2, [r3, #0]
 800027e:	23fa      	movs	r3, #250	@ 0xfa
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	429a      	cmp	r2, r3
 8000284:	d906      	bls.n	8000294 <main+0x74>
	         {
	             HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET);
 8000286:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <main+0x94>)
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fe35 	bl	8000efc <HAL_GPIO_WritePin>
 8000292:	e7d2      	b.n	800023a <main+0x1a>
	         }
	         else if (value > 1000)
 8000294:	1dbb      	adds	r3, r7, #6
 8000296:	881a      	ldrh	r2, [r3, #0]
 8000298:	23fa      	movs	r3, #250	@ 0xfa
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	429a      	cmp	r2, r3
 800029e:	d9cc      	bls.n	800023a <main+0x1a>
	         {
	             HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_SET);
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <main+0x94>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	2101      	movs	r1, #1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fe28 	bl	8000efc <HAL_GPIO_WritePin>
	  Enter_Stop_Mode();
 80002ac:	e7c5      	b.n	800023a <main+0x1a>
 80002ae:	46c0      	nop			@ (mov r8, r8)
 80002b0:	2000007c 	.word	0x2000007c
 80002b4:	50000400 	.word	0x50000400
 80002b8:	00000bb8 	.word	0x00000bb8

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b09b      	sub	sp, #108	@ 0x6c
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2434      	movs	r4, #52	@ 0x34
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2334      	movs	r3, #52	@ 0x34
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f003 f9f7 	bl	80036c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	2320      	movs	r3, #32
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2314      	movs	r3, #20
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f003 f9ef 	bl	80036c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	003b      	movs	r3, r7
 80002e4:	0018      	movs	r0, r3
 80002e6:	2320      	movs	r3, #32
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f003 f9e8 	bl	80036c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f0:	4b29      	ldr	r3, [pc, #164]	@ (8000398 <SystemClock_Config+0xdc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a29      	ldr	r2, [pc, #164]	@ (800039c <SystemClock_Config+0xe0>)
 80002f6:	401a      	ands	r2, r3
 80002f8:	4b27      	ldr	r3, [pc, #156]	@ (8000398 <SystemClock_Config+0xdc>)
 80002fa:	2180      	movs	r1, #128	@ 0x80
 80002fc:	0109      	lsls	r1, r1, #4
 80002fe:	430a      	orrs	r2, r1
 8000300:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000302:	0021      	movs	r1, r4
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	0252      	lsls	r2, r2, #9
 8000310:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2280      	movs	r2, #128	@ 0x80
 800031c:	0252      	lsls	r2, r2, #9
 800031e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	22c0      	movs	r2, #192	@ 0xc0
 8000324:	0312      	lsls	r2, r2, #12
 8000326:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2280      	movs	r2, #128	@ 0x80
 800032c:	03d2      	lsls	r2, r2, #15
 800032e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	187b      	adds	r3, r7, r1
 8000332:	0018      	movs	r0, r3
 8000334:	f002 fb30 	bl	8002998 <HAL_RCC_OscConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800033c:	f000 f9ae 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	2120      	movs	r1, #32
 8000342:	187b      	adds	r3, r7, r1
 8000344:	220f      	movs	r2, #15
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2203      	movs	r2, #3
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2101      	movs	r1, #1
 8000364:	0018      	movs	r0, r3
 8000366:	f002 fe93 	bl	8003090 <HAL_RCC_ClockConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800036e:	f000 f995 	bl	800069c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000372:	003b      	movs	r3, r7
 8000374:	2208      	movs	r2, #8
 8000376:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	f003 f853 	bl	800342c <HAL_RCCEx_PeriphCLKConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800038a:	f000 f987 	bl	800069c <Error_Handler>
  }
}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b01b      	add	sp, #108	@ 0x6c
 8000394:	bd90      	pop	{r4, r7, pc}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	40007000 	.word	0x40007000
 800039c:	ffffe7ff 	.word	0xffffe7ff

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <MX_I2C1_Init+0x7c>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b0:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fdd1 	bl	8000f84 <HAL_I2C_Init>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 f959 	bl	800069c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 f9de 	bl	80027b0 <HAL_I2CEx_ConfigAnalogFilter>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f950 	bl	800069c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003fe:	2100      	movs	r1, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f002 fa21 	bl	8002848 <HAL_I2CEx_ConfigDigitalFilter>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 f947 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	40005400 	.word	0x40005400
 800041c:	00707cbb 	.word	0x00707cbb

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	@ 0x24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	240c      	movs	r4, #12
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2314      	movs	r3, #20
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 f945 	bl	80036c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000436:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <MX_GPIO_Init+0xcc>)
 8000438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800043a:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <MX_GPIO_Init+0xcc>)
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	430a      	orrs	r2, r1
 8000440:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <MX_GPIO_Init+0xcc>)
 8000444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000446:	2280      	movs	r2, #128	@ 0x80
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <MX_GPIO_Init+0xcc>)
 8000450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <MX_GPIO_Init+0xcc>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	62da      	str	r2, [r3, #44]	@ 0x2c
 800045a:	4b24      	ldr	r3, [pc, #144]	@ (80004ec <MX_GPIO_Init+0xcc>)
 800045c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <MX_GPIO_Init+0xcc>)
 8000468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800046a:	4b20      	ldr	r3, [pc, #128]	@ (80004ec <MX_GPIO_Init+0xcc>)
 800046c:	2102      	movs	r1, #2
 800046e:	430a      	orrs	r2, r1
 8000470:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000472:	4b1e      	ldr	r3, [pc, #120]	@ (80004ec <MX_GPIO_Init+0xcc>)
 8000474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000476:	2202      	movs	r2, #2
 8000478:	4013      	ands	r3, r2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <MX_GPIO_Init+0xd0>)
 8000480:	2200      	movs	r2, #0
 8000482:	2107      	movs	r1, #7
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fd39 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2201      	movs	r2, #1
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2288      	movs	r2, #136	@ 0x88
 8000494:	0352      	lsls	r2, r2, #13
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	193a      	adds	r2, r7, r4
 80004a0:	23a0      	movs	r3, #160	@ 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fbaa 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80004ac:	0021      	movs	r1, r4
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2207      	movs	r2, #7
 80004b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2201      	movs	r2, #1
 80004b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	4a09      	ldr	r2, [pc, #36]	@ (80004f0 <MX_GPIO_Init+0xd0>)
 80004ca:	0019      	movs	r1, r3
 80004cc:	0010      	movs	r0, r2
 80004ce:	f000 fb97 	bl	8000c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2005      	movs	r0, #5
 80004d8:	f000 fb0c 	bl	8000af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004dc:	2005      	movs	r0, #5
 80004de:	f000 fb1e 	bl	8000b1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b009      	add	sp, #36	@ 0x24
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	40021000 	.word	0x40021000
 80004f0:	50000400 	.word	0x50000400

080004f4 <ADPD188BI_WriteReg>:

/* USER CODE BEGIN 4 */
void ADPD188BI_WriteReg(uint16_t reg, uint16_t val)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	0002      	movs	r2, r0
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	801a      	strh	r2, [r3, #0]
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	1c0a      	adds	r2, r1, #0
 8000504:	801a      	strh	r2, [r3, #0]
    uint8_t data[4];
    data[0] = reg >> 8;
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	0a1b      	lsrs	r3, r3, #8
 800050c:	b29b      	uxth	r3, r3
 800050e:	b2da      	uxtb	r2, r3
 8000510:	210c      	movs	r1, #12
 8000512:	187b      	adds	r3, r7, r1
 8000514:	701a      	strb	r2, [r3, #0]
    data[1] = reg & 0xFF;
 8000516:	1dbb      	adds	r3, r7, #6
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	187b      	adds	r3, r7, r1
 800051e:	705a      	strb	r2, [r3, #1]
    data[2] = val >> 8;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	0a1b      	lsrs	r3, r3, #8
 8000526:	b29b      	uxth	r3, r3
 8000528:	b2da      	uxtb	r2, r3
 800052a:	187b      	adds	r3, r7, r1
 800052c:	709a      	strb	r2, [r3, #2]
    data[3] = val & 0xFF;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	187b      	adds	r3, r7, r1
 8000536:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&hi2c1, ADPD188BI_ADDR, data, 4, HAL_MAX_DELAY);
 8000538:	187a      	adds	r2, r7, r1
 800053a:	4806      	ldr	r0, [pc, #24]	@ (8000554 <ADPD188BI_WriteReg+0x60>)
 800053c:	2301      	movs	r3, #1
 800053e:	425b      	negs	r3, r3
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2304      	movs	r3, #4
 8000544:	21c8      	movs	r1, #200	@ 0xc8
 8000546:	f000 fdc3 	bl	80010d0 <HAL_I2C_Master_Transmit>
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b004      	add	sp, #16
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	20000028 	.word	0x20000028

08000558 <ADPD188BI_ReadReg>:

uint16_t ADPD188BI_ReadReg(uint16_t reg)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b087      	sub	sp, #28
 800055c:	af02      	add	r7, sp, #8
 800055e:	0002      	movs	r2, r0
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	801a      	strh	r2, [r3, #0]
    uint8_t addr[2] = {reg >> 8, reg & 0xFF};
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	b29b      	uxth	r3, r3
 800056c:	b2da      	uxtb	r2, r3
 800056e:	210c      	movs	r1, #12
 8000570:	187b      	adds	r3, r7, r1
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	187b      	adds	r3, r7, r1
 800057c:	705a      	strb	r2, [r3, #1]
    uint8_t val[2] = {0};
 800057e:	2408      	movs	r4, #8
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, ADPD188BI_ADDR, addr, 2, HAL_MAX_DELAY);
 8000586:	187a      	adds	r2, r7, r1
 8000588:	4810      	ldr	r0, [pc, #64]	@ (80005cc <ADPD188BI_ReadReg+0x74>)
 800058a:	2301      	movs	r3, #1
 800058c:	425b      	negs	r3, r3
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2302      	movs	r3, #2
 8000592:	21c8      	movs	r1, #200	@ 0xc8
 8000594:	f000 fd9c 	bl	80010d0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, ADPD188BI_ADDR, val, 2, HAL_MAX_DELAY);
 8000598:	193a      	adds	r2, r7, r4
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <ADPD188BI_ReadReg+0x74>)
 800059c:	2301      	movs	r3, #1
 800059e:	425b      	negs	r3, r3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	21c8      	movs	r1, #200	@ 0xc8
 80005a6:	f000 febd 	bl	8001324 <HAL_I2C_Master_Receive>
    return (val[0] << 8) | val[1];
 80005aa:	0021      	movs	r1, r4
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b21b      	sxth	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b005      	add	sp, #20
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	20000028 	.word	0x20000028

080005d0 <ADPD188BI_Init>:

void ADPD188BI_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    // 1. Reset
    ADPD188BI_WriteReg(0x0000, 0x0002);
 80005d4:	2102      	movs	r1, #2
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff8c 	bl	80004f4 <ADPD188BI_WriteReg>
    HAL_Delay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f000 f99d 	bl	800091c <HAL_Delay>

    // 2. Clear interrupt
    ADPD188BI_WriteReg(0x0001, 0x8000);
 80005e2:	2380      	movs	r3, #128	@ 0x80
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	0019      	movs	r1, r3
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ff83 	bl	80004f4 <ADPD188BI_WriteReg>

    // 3. LED Konfigürasyonu: internal IR LED (LED1)
    ADPD188BI_WriteReg(0x010F, 0x0200); // LED_SELECT = LED1
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	009a      	lsls	r2, r3, #2
 80005f2:	2310      	movs	r3, #16
 80005f4:	33ff      	adds	r3, #255	@ 0xff
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff7b 	bl	80004f4 <ADPD188BI_WriteReg>
    ADPD188BI_WriteReg(0x0110, 0x0020); // LED1 current = orta seviye
 80005fe:	2388      	movs	r3, #136	@ 0x88
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	2120      	movs	r1, #32
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff75 	bl	80004f4 <ADPD188BI_WriteReg>

    // 4. Input konfigürasyonu: sadece IR kullan
    ADPD188BI_WriteReg(0x0111, 0x0001); // Input: photodiode 1
 800060a:	2312      	movs	r3, #18
 800060c:	33ff      	adds	r3, #255	@ 0xff
 800060e:	2101      	movs	r1, #1
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ff6f 	bl	80004f4 <ADPD188BI_WriteReg>

    // 5. Slot A Konfigürasyonu (IR kullan)
    ADPD188BI_WriteReg(0x0112, 0x0001); // Enable Slot A
 8000616:	2389      	movs	r3, #137	@ 0x89
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	2101      	movs	r1, #1
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ff69 	bl	80004f4 <ADPD188BI_WriteReg>
    ADPD188BI_WriteReg(0x0113, 0x0001); // Channel1 = IR
 8000622:	2314      	movs	r3, #20
 8000624:	33ff      	adds	r3, #255	@ 0xff
 8000626:	2101      	movs	r1, #1
 8000628:	0018      	movs	r0, r3
 800062a:	f7ff ff63 	bl	80004f4 <ADPD188BI_WriteReg>

    // 6. Decimation factor (örnekleme azaltma)
    ADPD188BI_WriteReg(0x0103, 0x0010);
 800062e:	2304      	movs	r3, #4
 8000630:	33ff      	adds	r3, #255	@ 0xff
 8000632:	2110      	movs	r1, #16
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5d 	bl	80004f4 <ADPD188BI_WriteReg>

    // 7. Sampling rate
    ADPD188BI_WriteReg(0x0104, 0x0040); // 50Hz
 800063a:	2382      	movs	r3, #130	@ 0x82
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2140      	movs	r1, #64	@ 0x40
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff ff57 	bl	80004f4 <ADPD188BI_WriteReg>

    // 8. FIFO konfigürasyonu
    ADPD188BI_WriteReg(0x0009, 0x0001); // FIFO config: enable
 8000646:	2101      	movs	r1, #1
 8000648:	2009      	movs	r0, #9
 800064a:	f7ff ff53 	bl	80004f4 <ADPD188BI_WriteReg>
    ADPD188BI_WriteReg(0x000A, 0x0001); // Threshold: 1 sample
 800064e:	2101      	movs	r1, #1
 8000650:	200a      	movs	r0, #10
 8000652:	f7ff ff4f 	bl	80004f4 <ADPD188BI_WriteReg>

    // 9. Interrupt enable
    ADPD188BI_WriteReg(0x0001, 0x0002); // Data Ready interrupt enable
 8000656:	2102      	movs	r1, #2
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff4b 	bl	80004f4 <ADPD188BI_WriteReg>

    // 10. Modu başlat
    ADPD188BI_WriteReg(0x0006, 0x0001); // Mode: Go
 800065e:	2101      	movs	r1, #1
 8000660:	2006      	movs	r0, #6
 8000662:	f7ff ff47 	bl	80004f4 <ADPD188BI_WriteReg>
}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <ADPD188BI_Read_Smoke>:


uint16_t ADPD188BI_Read_Smoke(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    return ADPD188BI_ReadReg(0x0064); //fifo
 8000670:	2064      	movs	r0, #100	@ 0x64
 8000672:	f7ff ff71 	bl	8000558 <ADPD188BI_ReadReg>
 8000676:	0003      	movs	r3, r0
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  HAL_SuspendTick();
 8000682:	f000 f96f 	bl	8000964 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000686:	2101      	movs	r1, #1
 8000688:	2001      	movs	r0, #1
 800068a:	f002 f929 	bl	80028e0 <HAL_PWR_EnterSTOPMode>
  HAL_ResumeTick();
 800068e:	f000 f977 	bl	8000980 <HAL_ResumeTick>
  SystemClock_Config();
 8000692:	f7ff fe13 	bl	80002bc <SystemClock_Config>
}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	e7fd      	b.n	80006a4 <Error_Handler+0x8>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <HAL_MspInit+0x24>)
 80006ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_MspInit+0x24>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	430a      	orrs	r2, r1
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <HAL_MspInit+0x24>)
 80006ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <HAL_MspInit+0x24>)
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0549      	lsls	r1, r1, #21
 80006c2:	430a      	orrs	r2, r1
 80006c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	@ 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	240c      	movs	r4, #12
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 ffec 	bl	80036c0 <memset>
  if(hi2c->Instance==I2C1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <HAL_I2C_MspInit+0x8c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d130      	bne.n	8000754 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <HAL_I2C_MspInit+0x90>)
 80006f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <HAL_I2C_MspInit+0x90>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <HAL_I2C_MspInit+0x90>)
 8000700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000702:	2202      	movs	r2, #2
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800070a:	0021      	movs	r1, r4
 800070c:	187b      	adds	r3, r7, r1
 800070e:	22c0      	movs	r2, #192	@ 0xc0
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2212      	movs	r2, #18
 8000716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2203      	movs	r2, #3
 8000722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2201      	movs	r2, #1
 8000728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	187b      	adds	r3, r7, r1
 800072c:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <HAL_I2C_MspInit+0x94>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f000 fa65 	bl	8000c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_I2C_MspInit+0x90>)
 8000738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_I2C_MspInit+0x90>)
 800073c:	2180      	movs	r1, #128	@ 0x80
 800073e:	0389      	lsls	r1, r1, #14
 8000740:	430a      	orrs	r2, r1
 8000742:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2017      	movs	r0, #23
 800074a:	f000 f9d3 	bl	8000af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800074e:	2017      	movs	r0, #23
 8000750:	f000 f9e5 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b009      	add	sp, #36	@ 0x24
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	40005400 	.word	0x40005400
 8000760:	40021000 	.word	0x40021000
 8000764:	50000400 	.word	0x50000400

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8a8 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fbca 	bl	8000f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <I2C1_IRQHandler+0x2c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	23e0      	movs	r3, #224	@ 0xe0
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	4013      	ands	r3, r2
 80007bc:	d004      	beq.n	80007c8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <I2C1_IRQHandler+0x2c>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fed1 	bl	8001568 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80007c6:	e003      	b.n	80007d0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <I2C1_IRQHandler+0x2c>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 feb2 	bl	8001534 <HAL_I2C_EV_IRQHandler>
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	20000028 	.word	0x20000028

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f7ff fff6 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	@ (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f002 ff5b 	bl	80036d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081a:	f7ff fd01 	bl	8000220 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
   ldr   r0, =_estack
 8000820:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800082c:	08003754 	.word	0x08003754
  ldr r2, =_sbss
 8000830:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000834:	20000084 	.word	0x20000084

08000838 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_COMP_IRQHandler>
	...

0800083c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_Init+0x3c>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <HAL_Init+0x3c>)
 800084e:	2140      	movs	r1, #64	@ 0x40
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f811 	bl	800087c <HAL_InitTick>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d003      	beq.n	8000866 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e001      	b.n	800086a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000866:	f7ff ff1f 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <HAL_InitTick+0x5c>)
 8000886:	681c      	ldr	r4, [r3, #0]
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <HAL_InitTick+0x60>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0019      	movs	r1, r3
 800088e:	23fa      	movs	r3, #250	@ 0xfa
 8000890:	0098      	lsls	r0, r3, #2
 8000892:	f7ff fc39 	bl	8000108 <__udivsi3>
 8000896:	0003      	movs	r3, r0
 8000898:	0019      	movs	r1, r3
 800089a:	0020      	movs	r0, r4
 800089c:	f7ff fc34 	bl	8000108 <__udivsi3>
 80008a0:	0003      	movs	r3, r0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f94b 	bl	8000b3e <HAL_SYSTICK_Config>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e00f      	b.n	80008d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d80b      	bhi.n	80008ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	2301      	movs	r3, #1
 80008ba:	425b      	negs	r3, r3
 80008bc:	2200      	movs	r2, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f918 	bl	8000af4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_InitTick+0x64>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b003      	add	sp, #12
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	001a      	movs	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	18d2      	adds	r2, r2, r3
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_IncTick+0x20>)
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	20000008 	.word	0x20000008
 8000904:	20000080 	.word	0x20000080

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	@ (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	20000080 	.word	0x20000080

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	0003      	movs	r3, r0
 800092a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001a      	movs	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	189b      	adds	r3, r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	0002      	movs	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <HAL_SuspendTick+0x18>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <HAL_SuspendTick+0x18>)
 800096e:	2102      	movs	r1, #2
 8000970:	438a      	bics	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <HAL_ResumeTick+0x18>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <HAL_ResumeTick+0x18>)
 800098a:	2102      	movs	r1, #2
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	e000e010 	.word	0xe000e010

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ae:	d809      	bhi.n	80009c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	231f      	movs	r3, #31
 80009b8:	401a      	ands	r2, r3
 80009ba:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <__NVIC_EnableIRQ+0x30>)
 80009bc:	2101      	movs	r1, #1
 80009be:	4091      	lsls	r1, r2
 80009c0:	000a      	movs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
  }
}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80009e4:	d828      	bhi.n	8000a38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e6:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa4 <__NVIC_SetPriority+0xd4>)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	33c0      	adds	r3, #192	@ 0xc0
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	589b      	ldr	r3, [r3, r2]
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	0011      	movs	r1, r2
 80009fc:	2203      	movs	r2, #3
 80009fe:	400a      	ands	r2, r1
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	21ff      	movs	r1, #255	@ 0xff
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	019b      	lsls	r3, r3, #6
 8000a12:	22ff      	movs	r2, #255	@ 0xff
 8000a14:	401a      	ands	r2, r3
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4003      	ands	r3, r0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a24:	481f      	ldr	r0, [pc, #124]	@ (8000aa4 <__NVIC_SetPriority+0xd4>)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	33c0      	adds	r3, #192	@ 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a36:	e031      	b.n	8000a9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <__NVIC_SetPriority+0xd8>)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	0019      	movs	r1, r3
 8000a40:	230f      	movs	r3, #15
 8000a42:	400b      	ands	r3, r1
 8000a44:	3b08      	subs	r3, #8
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3306      	adds	r3, #6
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	3304      	adds	r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1dfa      	adds	r2, r7, #7
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	0011      	movs	r1, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	00d2      	lsls	r2, r2, #3
 8000a5e:	21ff      	movs	r1, #255	@ 0xff
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	22ff      	movs	r2, #255	@ 0xff
 8000a70:	401a      	ands	r2, r3
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	2303      	movs	r3, #3
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <__NVIC_SetPriority+0xd8>)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	001c      	movs	r4, r3
 8000a88:	230f      	movs	r3, #15
 8000a8a:	4023      	ands	r3, r4
 8000a8c:	3b08      	subs	r3, #8
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	430a      	orrs	r2, r1
 8000a92:	3306      	adds	r3, #6
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	18c3      	adds	r3, r0, r3
 8000a98:	3304      	adds	r3, #4
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b003      	add	sp, #12
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	045b      	lsls	r3, r3, #17
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d301      	bcc.n	8000ac4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e010      	b.n	8000ae6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <SysTick_Config+0x44>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000acc:	2301      	movs	r3, #1
 8000ace:	425b      	negs	r3, r3
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff ff7c 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <SysTick_Config+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <SysTick_Config+0x44>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	210f      	movs	r1, #15
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	1c02      	adds	r2, r0, #0
 8000b04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ff5d 	bl	80009d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b004      	add	sp, #16
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	0002      	movs	r2, r0
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff ff33 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ffaf 	bl	8000aac <SysTick_Config>
 8000b4e:	0003      	movs	r3, r0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b60:	210f      	movs	r1, #15
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2225      	movs	r2, #37	@ 0x25
 8000b6c:	5c9b      	ldrb	r3, [r3, r2]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d006      	beq.n	8000b82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2204      	movs	r2, #4
 8000b78:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e02a      	b.n	8000bd8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	221c      	movs	r2, #28
 8000ba8:	401a      	ands	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2225      	movs	r2, #37	@ 0x25
 8000bba:	2101      	movs	r1, #1
 8000bbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2224      	movs	r2, #36	@ 0x24
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	4798      	blx	r3
    }
  }
  return status;
 8000bd8:	230f      	movs	r3, #15
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	781b      	ldrb	r3, [r3, #0]
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2225      	movs	r2, #37	@ 0x25
 8000bf2:	5c9b      	ldrb	r3, [r3, r2]
 8000bf4:	b2db      	uxtb	r3, r3
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c16:	e155      	b.n	8000ec4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <HAL_GPIO_Init+0x30>
 8000c2e:	e146      	b.n	8000ebe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	409a      	lsls	r2, r3
 8000c56:	0013      	movs	r3, r2
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	2201      	movs	r2, #1
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d017      	beq.n	8000ce6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2203      	movs	r2, #3
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	58d3      	ldr	r3, [r2, r3]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2207      	movs	r2, #7
 8000d04:	4013      	ands	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2107      	movs	r1, #7
 8000d1e:	400b      	ands	r3, r1
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	6939      	ldr	r1, [r7, #16]
 8000d38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	23c0      	movs	r3, #192	@ 0xc0
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	4013      	ands	r3, r2
 8000d78:	d100      	bne.n	8000d7c <HAL_GPIO_Init+0x17c>
 8000d7a:	e0a0      	b.n	8000ebe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b57      	ldr	r3, [pc, #348]	@ (8000edc <HAL_GPIO_Init+0x2dc>)
 8000d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d80:	4b56      	ldr	r3, [pc, #344]	@ (8000edc <HAL_GPIO_Init+0x2dc>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d88:	4a55      	ldr	r2, [pc, #340]	@ (8000ee0 <HAL_GPIO_Init+0x2e0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	589b      	ldr	r3, [r3, r2]
 8000d94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2203      	movs	r2, #3
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	43da      	mvns	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	23a0      	movs	r3, #160	@ 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d01f      	beq.n	8000df6 <HAL_GPIO_Init+0x1f6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4a      	ldr	r2, [pc, #296]	@ (8000ee4 <HAL_GPIO_Init+0x2e4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0x1f2>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	@ (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a48      	ldr	r2, [pc, #288]	@ (8000eec <HAL_GPIO_Init+0x2ec>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d00d      	beq.n	8000dea <HAL_GPIO_Init+0x1ea>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a47      	ldr	r2, [pc, #284]	@ (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x1e6>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a46      	ldr	r2, [pc, #280]	@ (8000ef4 <HAL_GPIO_Init+0x2f4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_GPIO_Init+0x1e2>
 8000dde:	2305      	movs	r3, #5
 8000de0:	e00a      	b.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000de2:	2306      	movs	r3, #6
 8000de4:	e008      	b.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000de6:	2304      	movs	r3, #4
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e004      	b.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000df6:	2300      	movs	r3, #0
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4093      	lsls	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e08:	4935      	ldr	r1, [pc, #212]	@ (8000ee0 <HAL_GPIO_Init+0x2e0>)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e16:	4b38      	ldr	r3, [pc, #224]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	035b      	lsls	r3, r3, #13
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	039b      	lsls	r3, r3, #14
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	029b      	lsls	r3, r3, #10
 8000e82:	4013      	ands	r3, r2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	1e13      	subs	r3, r2, #0
 8000ece:	d000      	beq.n	8000ed2 <HAL_GPIO_Init+0x2d2>
 8000ed0:	e6a2      	b.n	8000c18 <HAL_GPIO_Init+0x18>
  }
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b006      	add	sp, #24
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	50000400 	.word	0x50000400
 8000ee8:	50000800 	.word	0x50000800
 8000eec:	50000c00 	.word	0x50000c00
 8000ef0:	50001000 	.word	0x50001000
 8000ef4:	50001c00 	.word	0x50001c00
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	0008      	movs	r0, r1
 8000f06:	0011      	movs	r1, r2
 8000f08:	1cbb      	adds	r3, r7, #2
 8000f0a:	1c02      	adds	r2, r0, #0
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	1c7b      	adds	r3, r7, #1
 8000f10:	1c0a      	adds	r2, r1, #0
 8000f12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f14:	1c7b      	adds	r3, r7, #1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1c:	1cbb      	adds	r3, r7, #2
 8000f1e:	881a      	ldrh	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f24:	e003      	b.n	8000f2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f26:	1cbb      	adds	r3, r7, #2
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	0002      	movs	r2, r0
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	1dba      	adds	r2, r7, #6
 8000f4a:	8812      	ldrh	r2, [r2, #0]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d008      	beq.n	8000f62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f52:	1dba      	adds	r2, r7, #6
 8000f54:	8812      	ldrh	r2, [r2, #0]
 8000f56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 f807 	bl	8000f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e08f      	b.n	80010b6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2241      	movs	r2, #65	@ 0x41
 8000f9a:	5c9b      	ldrb	r3, [r3, r2]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2240      	movs	r2, #64	@ 0x40
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fb8f 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2241      	movs	r2, #65	@ 0x41
 8000fb6:	2124      	movs	r1, #36	@ 0x24
 8000fb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	493b      	ldr	r1, [pc, #236]	@ (80010c0 <HAL_I2C_Init+0x13c>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4938      	ldr	r1, [pc, #224]	@ (80010c4 <HAL_I2C_Init+0x140>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2180      	movs	r1, #128	@ 0x80
 8000ffa:	0209      	lsls	r1, r1, #8
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	e007      	b.n	8001012 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2184      	movs	r1, #132	@ 0x84
 800100c:	0209      	lsls	r1, r1, #8
 800100e:	430a      	orrs	r2, r1
 8001010:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d109      	bne.n	800102e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	0109      	lsls	r1, r1, #4
 8001028:	430a      	orrs	r2, r1
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	e007      	b.n	800103e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4923      	ldr	r1, [pc, #140]	@ (80010c8 <HAL_I2C_Init+0x144>)
 800103a:	400a      	ands	r2, r1
 800103c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4920      	ldr	r1, [pc, #128]	@ (80010cc <HAL_I2C_Init+0x148>)
 800104a:	430a      	orrs	r2, r1
 800104c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <HAL_I2C_Init+0x140>)
 800105a:	400a      	ands	r2, r1
 800105c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691a      	ldr	r2, [r3, #16]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	431a      	orrs	r2, r3
 8001068:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69d9      	ldr	r1, [r3, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2101      	movs	r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2241      	movs	r2, #65	@ 0x41
 80010a2:	2120      	movs	r1, #32
 80010a4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2242      	movs	r2, #66	@ 0x42
 80010b0:	2100      	movs	r1, #0
 80010b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	f0ffffff 	.word	0xf0ffffff
 80010c4:	ffff7fff 	.word	0xffff7fff
 80010c8:	fffff7ff 	.word	0xfffff7ff
 80010cc:	02008000 	.word	0x02008000

080010d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	0008      	movs	r0, r1
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	0019      	movs	r1, r3
 80010de:	230a      	movs	r3, #10
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	1c02      	adds	r2, r0, #0
 80010e4:	801a      	strh	r2, [r3, #0]
 80010e6:	2308      	movs	r3, #8
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	1c0a      	adds	r2, r1, #0
 80010ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2241      	movs	r2, #65	@ 0x41
 80010f2:	5c9b      	ldrb	r3, [r3, r2]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b20      	cmp	r3, #32
 80010f8:	d000      	beq.n	80010fc <HAL_I2C_Master_Transmit+0x2c>
 80010fa:	e10a      	b.n	8001312 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2240      	movs	r2, #64	@ 0x40
 8001100:	5c9b      	ldrb	r3, [r3, r2]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_I2C_Master_Transmit+0x3a>
 8001106:	2302      	movs	r3, #2
 8001108:	e104      	b.n	8001314 <HAL_I2C_Master_Transmit+0x244>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2240      	movs	r2, #64	@ 0x40
 800110e:	2101      	movs	r1, #1
 8001110:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001112:	f7ff fbf9 	bl	8000908 <HAL_GetTick>
 8001116:	0003      	movs	r3, r0
 8001118:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	0219      	lsls	r1, r3, #8
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2319      	movs	r3, #25
 8001126:	2201      	movs	r2, #1
 8001128:	f001 f82c 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0ef      	b.n	8001314 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2241      	movs	r2, #65	@ 0x41
 8001138:	2121      	movs	r1, #33	@ 0x21
 800113a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2242      	movs	r2, #66	@ 0x42
 8001140:	2110      	movs	r1, #16
 8001142:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2208      	movs	r2, #8
 8001154:	18ba      	adds	r2, r7, r2
 8001156:	8812      	ldrh	r2, [r2, #0]
 8001158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001164:	b29b      	uxth	r3, r3
 8001166:	2bff      	cmp	r3, #255	@ 0xff
 8001168:	d906      	bls.n	8001178 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	22ff      	movs	r2, #255	@ 0xff
 800116e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	045b      	lsls	r3, r3, #17
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e007      	b.n	8001188 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800117c:	b29a      	uxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	049b      	lsls	r3, r3, #18
 8001186:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	d027      	beq.n	80011e0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b8:	3b01      	subs	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	697c      	ldr	r4, [r7, #20]
 80011cc:	230a      	movs	r3, #10
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	8819      	ldrh	r1, [r3, #0]
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	4b51      	ldr	r3, [pc, #324]	@ (800131c <HAL_I2C_Master_Transmit+0x24c>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	0023      	movs	r3, r4
 80011da:	f001 fa4b 	bl	8002674 <I2C_TransferConfig>
 80011de:	e06f      	b.n	80012c0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	697c      	ldr	r4, [r7, #20]
 80011e8:	230a      	movs	r3, #10
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	8819      	ldrh	r1, [r3, #0]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	4b4a      	ldr	r3, [pc, #296]	@ (800131c <HAL_I2C_Master_Transmit+0x24c>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	0023      	movs	r3, r4
 80011f6:	f001 fa3d 	bl	8002674 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80011fa:	e061      	b.n	80012c0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	0018      	movs	r0, r3
 8001204:	f001 f816 	bl	8002234 <I2C_WaitOnTXISFlagUntilTimeout>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e081      	b.n	8001314 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800122a:	b29b      	uxth	r3, r3
 800122c:	3b01      	subs	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001238:	3b01      	subs	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001244:	b29b      	uxth	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03a      	beq.n	80012c0 <HAL_I2C_Master_Transmit+0x1f0>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800124e:	2b00      	cmp	r3, #0
 8001250:	d136      	bne.n	80012c0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	0013      	movs	r3, r2
 800125c:	2200      	movs	r2, #0
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	f000 ff90 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e053      	b.n	8001314 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001270:	b29b      	uxth	r3, r3
 8001272:	2bff      	cmp	r3, #255	@ 0xff
 8001274:	d911      	bls.n	800129a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	22ff      	movs	r2, #255	@ 0xff
 800127a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001280:	b2da      	uxtb	r2, r3
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	045c      	lsls	r4, r3, #17
 8001286:	230a      	movs	r3, #10
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	8819      	ldrh	r1, [r3, #0]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	0023      	movs	r3, r4
 8001294:	f001 f9ee 	bl	8002674 <I2C_TransferConfig>
 8001298:	e012      	b.n	80012c0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	2380      	movs	r3, #128	@ 0x80
 80012ac:	049c      	lsls	r4, r3, #18
 80012ae:	230a      	movs	r3, #10
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	8819      	ldrh	r1, [r3, #0]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	0023      	movs	r3, r4
 80012bc:	f001 f9da 	bl	8002674 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d198      	bne.n	80011fc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 fff5 	bl	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e01a      	b.n	8001314 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2220      	movs	r2, #32
 80012e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	490b      	ldr	r1, [pc, #44]	@ (8001320 <HAL_I2C_Master_Transmit+0x250>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2241      	movs	r2, #65	@ 0x41
 80012fa:	2120      	movs	r1, #32
 80012fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2242      	movs	r2, #66	@ 0x42
 8001302:	2100      	movs	r1, #0
 8001304:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2240      	movs	r2, #64	@ 0x40
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001312:	2302      	movs	r3, #2
  }
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	b007      	add	sp, #28
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	80002000 	.word	0x80002000
 8001320:	fe00e800 	.word	0xfe00e800

08001324 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	0008      	movs	r0, r1
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	0019      	movs	r1, r3
 8001332:	230a      	movs	r3, #10
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	1c02      	adds	r2, r0, #0
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	2308      	movs	r3, #8
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	1c0a      	adds	r2, r1, #0
 8001340:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2241      	movs	r2, #65	@ 0x41
 8001346:	5c9b      	ldrb	r3, [r3, r2]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d000      	beq.n	8001350 <HAL_I2C_Master_Receive+0x2c>
 800134e:	e0e8      	b.n	8001522 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2240      	movs	r2, #64	@ 0x40
 8001354:	5c9b      	ldrb	r3, [r3, r2]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_I2C_Master_Receive+0x3a>
 800135a:	2302      	movs	r3, #2
 800135c:	e0e2      	b.n	8001524 <HAL_I2C_Master_Receive+0x200>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2240      	movs	r2, #64	@ 0x40
 8001362:	2101      	movs	r1, #1
 8001364:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001366:	f7ff facf 	bl	8000908 <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	0219      	lsls	r1, r3, #8
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2319      	movs	r3, #25
 800137a:	2201      	movs	r2, #1
 800137c:	f000 ff02 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0cd      	b.n	8001524 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2241      	movs	r2, #65	@ 0x41
 800138c:	2122      	movs	r1, #34	@ 0x22
 800138e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2242      	movs	r2, #66	@ 0x42
 8001394:	2110      	movs	r1, #16
 8001396:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2208      	movs	r2, #8
 80013a8:	18ba      	adds	r2, r7, r2
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2bff      	cmp	r3, #255	@ 0xff
 80013bc:	d911      	bls.n	80013e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2201      	movs	r2, #1
 80013c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	045c      	lsls	r4, r3, #17
 80013ce:	230a      	movs	r3, #10
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	8819      	ldrh	r1, [r3, #0]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	4b55      	ldr	r3, [pc, #340]	@ (800152c <HAL_I2C_Master_Receive+0x208>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	0023      	movs	r3, r4
 80013dc:	f001 f94a 	bl	8002674 <I2C_TransferConfig>
 80013e0:	e076      	b.n	80014d0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	049c      	lsls	r4, r3, #18
 80013f6:	230a      	movs	r3, #10
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	8819      	ldrh	r1, [r3, #0]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	4b4b      	ldr	r3, [pc, #300]	@ (800152c <HAL_I2C_Master_Receive+0x208>)
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	0023      	movs	r3, r4
 8001404:	f001 f936 	bl	8002674 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001408:	e062      	b.n	80014d0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	0018      	movs	r0, r3
 8001412:	f000 ff99 	bl	8002348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001416:	1e03      	subs	r3, r0, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e082      	b.n	8001524 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143a:	3b01      	subs	r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001446:	b29b      	uxth	r3, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	b29a      	uxth	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001454:	b29b      	uxth	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d03a      	beq.n	80014d0 <HAL_I2C_Master_Receive+0x1ac>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145e:	2b00      	cmp	r3, #0
 8001460:	d136      	bne.n	80014d0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	0013      	movs	r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	f000 fe88 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e053      	b.n	8001524 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001480:	b29b      	uxth	r3, r3
 8001482:	2bff      	cmp	r3, #255	@ 0xff
 8001484:	d911      	bls.n	80014aa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	22ff      	movs	r2, #255	@ 0xff
 800148a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001490:	b2da      	uxtb	r2, r3
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	045c      	lsls	r4, r3, #17
 8001496:	230a      	movs	r3, #10
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	8819      	ldrh	r1, [r3, #0]
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	0023      	movs	r3, r4
 80014a4:	f001 f8e6 	bl	8002674 <I2C_TransferConfig>
 80014a8:	e012      	b.n	80014d0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	049c      	lsls	r4, r3, #18
 80014be:	230a      	movs	r3, #10
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	8819      	ldrh	r1, [r3, #0]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	0023      	movs	r3, r4
 80014cc:	f001 f8d2 	bl	8002674 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d197      	bne.n	800140a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 feed 	bl	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e01a      	b.n	8001524 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2220      	movs	r2, #32
 80014f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	490b      	ldr	r1, [pc, #44]	@ (8001530 <HAL_I2C_Master_Receive+0x20c>)
 8001502:	400a      	ands	r2, r1
 8001504:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2241      	movs	r2, #65	@ 0x41
 800150a:	2120      	movs	r1, #32
 800150c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2242      	movs	r2, #66	@ 0x42
 8001512:	2100      	movs	r1, #0
 8001514:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2240      	movs	r2, #64	@ 0x40
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001522:	2302      	movs	r3, #2
  }
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b007      	add	sp, #28
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	80002400 	.word	0x80002400
 8001530:	fe00e800 	.word	0xfe00e800

08001534 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
  }
}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	001a      	movs	r2, r3
 8001586:	2301      	movs	r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d010      	beq.n	80015ae <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	09db      	lsrs	r3, r3, #7
 8001590:	001a      	movs	r2, r3
 8001592:	2301      	movs	r3, #1
 8001594:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001596:	d00a      	beq.n	80015ae <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	2201      	movs	r2, #1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2280      	movs	r2, #128	@ 0x80
 80015aa:	0052      	lsls	r2, r2, #1
 80015ac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	0a9b      	lsrs	r3, r3, #10
 80015b2:	001a      	movs	r2, r3
 80015b4:	2301      	movs	r3, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	d010      	beq.n	80015dc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	09db      	lsrs	r3, r3, #7
 80015be:	001a      	movs	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80015c4:	d00a      	beq.n	80015dc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	2208      	movs	r2, #8
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	0a5b      	lsrs	r3, r3, #9
 80015e0:	001a      	movs	r2, r3
 80015e2:	2301      	movs	r3, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d010      	beq.n	800160a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	001a      	movs	r2, r3
 80015ee:	2301      	movs	r3, #1
 80015f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80015f2:	d00a      	beq.n	800160a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	2202      	movs	r2, #2
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	220b      	movs	r2, #11
 8001614:	4013      	ands	r3, r2
 8001616:	d005      	beq.n	8001624 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0011      	movs	r1, r2
 800161e:	0018      	movs	r0, r3
 8001620:	f000 fc44 	bl	8001eac <I2C_ITError>
  }
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b006      	add	sp, #24
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	0008      	movs	r0, r1
 8001656:	0011      	movs	r1, r2
 8001658:	1cfb      	adds	r3, r7, #3
 800165a:	1c02      	adds	r2, r0, #0
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	003b      	movs	r3, r7
 8001660:	1c0a      	adds	r2, r1, #0
 8001662:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001664:	46c0      	nop			@ (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}

0800169c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2240      	movs	r2, #64	@ 0x40
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <I2C_Slave_ISR_IT+0x24>
 80016bc:	2302      	movs	r3, #2
 80016be:	e0fb      	b.n	80018b8 <I2C_Slave_ISR_IT+0x21c>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	2101      	movs	r1, #1
 80016c6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	001a      	movs	r2, r3
 80016ce:	2301      	movs	r3, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d00c      	beq.n	80016ee <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	001a      	movs	r2, r3
 80016da:	2301      	movs	r3, #1
 80016dc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016de:	d006      	beq.n	80016ee <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 f9f6 	bl	8001ad8 <I2C_ITSlaveCplt>
 80016ec:	e0df      	b.n	80018ae <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	001a      	movs	r2, r3
 80016f4:	2301      	movs	r3, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	d054      	beq.n	80017a4 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	001a      	movs	r2, r3
 8001700:	2301      	movs	r3, #1
 8001702:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001704:	d04e      	beq.n	80017a4 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d12d      	bne.n	800176c <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2241      	movs	r2, #65	@ 0x41
 8001714:	5c9b      	ldrb	r3, [r3, r2]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b28      	cmp	r3, #40	@ 0x28
 800171a:	d10b      	bne.n	8001734 <I2C_Slave_ISR_IT+0x98>
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	049b      	lsls	r3, r3, #18
 8001722:	429a      	cmp	r2, r3
 8001724:	d106      	bne.n	8001734 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f000 fb63 	bl	8001df8 <I2C_ITListenCplt>
 8001732:	e036      	b.n	80017a2 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2241      	movs	r2, #65	@ 0x41
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b29      	cmp	r3, #41	@ 0x29
 800173e:	d110      	bne.n	8001762 <I2C_Slave_ISR_IT+0xc6>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4a5f      	ldr	r2, [pc, #380]	@ (80018c0 <I2C_Slave_ISR_IT+0x224>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00c      	beq.n	8001762 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2210      	movs	r2, #16
 800174e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	0018      	movs	r0, r3
 8001754:	f000 fcd5 	bl	8002102 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 f956 	bl	8001a0c <I2C_ITSlaveSeqCplt>
 8001760:	e01f      	b.n	80017a2 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2210      	movs	r2, #16
 8001768:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800176a:	e09d      	b.n	80018a8 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2210      	movs	r2, #16
 8001772:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	2204      	movs	r2, #4
 800177a:	431a      	orrs	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <I2C_Slave_ISR_IT+0xf6>
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	045b      	lsls	r3, r3, #17
 800178c:	429a      	cmp	r2, r3
 800178e:	d000      	beq.n	8001792 <I2C_Slave_ISR_IT+0xf6>
 8001790:	e08a      	b.n	80018a8 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0011      	movs	r1, r2
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fb86 	bl	8001eac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80017a0:	e082      	b.n	80018a8 <I2C_Slave_ISR_IT+0x20c>
 80017a2:	e081      	b.n	80018a8 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	001a      	movs	r2, r3
 80017aa:	2301      	movs	r3, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	d031      	beq.n	8001814 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	001a      	movs	r2, r3
 80017b6:	2301      	movs	r3, #1
 80017b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80017ba:	d02b      	beq.n	8001814 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d018      	beq.n	80017f8 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d154      	bne.n	80018ac <I2C_Slave_ISR_IT+0x210>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <I2C_Slave_ISR_IT+0x224>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d050      	beq.n	80018ac <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	0018      	movs	r0, r3
 800180e:	f000 f8fd 	bl	8001a0c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001812:	e04b      	b.n	80018ac <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	001a      	movs	r2, r3
 800181a:	2301      	movs	r3, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d00c      	beq.n	800183a <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	001a      	movs	r2, r3
 8001826:	2301      	movs	r3, #1
 8001828:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800182a:	d006      	beq.n	800183a <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f000 f846 	bl	80018c4 <I2C_ITAddrCplt>
 8001838:	e039      	b.n	80018ae <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	001a      	movs	r2, r3
 8001840:	2301      	movs	r3, #1
 8001842:	4013      	ands	r3, r2
 8001844:	d033      	beq.n	80018ae <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	001a      	movs	r2, r3
 800184c:	2301      	movs	r3, #1
 800184e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001850:	d02d      	beq.n	80018ae <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d018      	beq.n	800188e <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800188c:	e00f      	b.n	80018ae <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	045b      	lsls	r3, r3, #17
 8001894:	429a      	cmp	r2, r3
 8001896:	d002      	beq.n	800189e <I2C_Slave_ISR_IT+0x202>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f8b3 	bl	8001a0c <I2C_ITSlaveSeqCplt>
 80018a6:	e002      	b.n	80018ae <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	e000      	b.n	80018ae <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 80018ac:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2240      	movs	r2, #64	@ 0x40
 80018b2:	2100      	movs	r1, #0
 80018b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b006      	add	sp, #24
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	ffff0000 	.word	0xffff0000

080018c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2241      	movs	r2, #65	@ 0x41
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	001a      	movs	r2, r3
 80018d8:	2328      	movs	r3, #40	@ 0x28
 80018da:	4013      	ands	r3, r2
 80018dc:	2b28      	cmp	r3, #40	@ 0x28
 80018de:	d000      	beq.n	80018e2 <I2C_ITAddrCplt+0x1e>
 80018e0:	e088      	b.n	80019f4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	250f      	movs	r5, #15
 80018ee:	197b      	adds	r3, r7, r5
 80018f0:	2101      	movs	r1, #1
 80018f2:	400a      	ands	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	b29a      	uxth	r2, r3
 8001900:	200c      	movs	r0, #12
 8001902:	183b      	adds	r3, r7, r0
 8001904:	21fe      	movs	r1, #254	@ 0xfe
 8001906:	400a      	ands	r2, r1
 8001908:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	b29a      	uxth	r2, r3
 8001912:	240a      	movs	r4, #10
 8001914:	193b      	adds	r3, r7, r4
 8001916:	0592      	lsls	r2, r2, #22
 8001918:	0d92      	lsrs	r2, r2, #22
 800191a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	b29a      	uxth	r2, r3
 8001924:	2308      	movs	r3, #8
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	21fe      	movs	r1, #254	@ 0xfe
 800192a:	400a      	ands	r2, r1
 800192c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d148      	bne.n	80019c8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001936:	0021      	movs	r1, r4
 8001938:	187b      	adds	r3, r7, r1
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	09db      	lsrs	r3, r3, #7
 800193e:	b29a      	uxth	r2, r3
 8001940:	183b      	adds	r3, r7, r0
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	4053      	eors	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	001a      	movs	r2, r3
 800194a:	2306      	movs	r3, #6
 800194c:	4013      	ands	r3, r2
 800194e:	d120      	bne.n	8001992 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001950:	183b      	adds	r3, r7, r0
 8001952:	187a      	adds	r2, r7, r1
 8001954:	8812      	ldrh	r2, [r2, #0]
 8001956:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001966:	2b02      	cmp	r3, #2
 8001968:	d14c      	bne.n	8001a04 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2208      	movs	r2, #8
 8001976:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001980:	183b      	adds	r3, r7, r0
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	197b      	adds	r3, r7, r5
 8001986:	7819      	ldrb	r1, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff fe5e 	bl	800164c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001990:	e038      	b.n	8001a04 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001992:	240c      	movs	r4, #12
 8001994:	193b      	adds	r3, r7, r4
 8001996:	2208      	movs	r2, #8
 8001998:	18ba      	adds	r2, r7, r2
 800199a:	8812      	ldrh	r2, [r2, #0]
 800199c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	021a      	lsls	r2, r3, #8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0011      	movs	r1, r2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fe9e 	bl	80026e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2240      	movs	r2, #64	@ 0x40
 80019b0:	2100      	movs	r1, #0
 80019b2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff fe43 	bl	800164c <HAL_I2C_AddrCallback>
}
 80019c6:	e01d      	b.n	8001a04 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	021a      	lsls	r2, r3, #8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 fe89 	bl	80026e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2240      	movs	r2, #64	@ 0x40
 80019da:	2100      	movs	r1, #0
 80019dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019de:	230c      	movs	r3, #12
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	7819      	ldrb	r1, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fe2d 	bl	800164c <HAL_I2C_AddrCallback>
}
 80019f2:	e007      	b.n	8001a04 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2208      	movs	r2, #8
 80019fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2240      	movs	r2, #64	@ 0x40
 8001a00:	2100      	movs	r1, #0
 8001a02:	5499      	strb	r1, [r3, r2]
}
 8001a04:	46c0      	nop			@ (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b004      	add	sp, #16
 8001a0a:	bdb0      	pop	{r4, r5, r7, pc}

08001a0c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2242      	movs	r2, #66	@ 0x42
 8001a20:	2100      	movs	r1, #0
 8001a22:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	0b9b      	lsrs	r3, r3, #14
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d008      	beq.n	8001a42 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4925      	ldr	r1, [pc, #148]	@ (8001ad0 <I2C_ITSlaveSeqCplt+0xc4>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e00d      	b.n	8001a5e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0bdb      	lsrs	r3, r3, #15
 8001a46:	001a      	movs	r2, r3
 8001a48:	2301      	movs	r3, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	491e      	ldr	r1, [pc, #120]	@ (8001ad4 <I2C_ITSlaveSeqCplt+0xc8>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2241      	movs	r2, #65	@ 0x41
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b29      	cmp	r3, #41	@ 0x29
 8001a68:	d114      	bne.n	8001a94 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2241      	movs	r2, #65	@ 0x41
 8001a6e:	2128      	movs	r1, #40	@ 0x28
 8001a70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2221      	movs	r2, #33	@ 0x21
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 fe33 	bl	80026e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2240      	movs	r2, #64	@ 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff fdcd 	bl	800162c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001a92:	e019      	b.n	8001ac8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2241      	movs	r2, #65	@ 0x41
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a9e:	d113      	bne.n	8001ac8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2241      	movs	r2, #65	@ 0x41
 8001aa4:	2128      	movs	r1, #40	@ 0x28
 8001aa6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2222      	movs	r2, #34	@ 0x22
 8001aac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 fe18 	bl	80026e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff fdba 	bl	800163c <HAL_I2C_SlaveRxCpltCallback>
}
 8001ac8:	46c0      	nop			@ (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	ffffbfff 	.word	0xffffbfff
 8001ad4:	ffff7fff 	.word	0xffff7fff

08001ad8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001af4:	200b      	movs	r0, #11
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	2141      	movs	r1, #65	@ 0x41
 8001afc:	5c52      	ldrb	r2, [r2, r1]
 8001afe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2220      	movs	r2, #32
 8001b06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b21      	cmp	r3, #33	@ 0x21
 8001b0e:	d003      	beq.n	8001b18 <I2C_ITSlaveCplt+0x40>
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b29      	cmp	r3, #41	@ 0x29
 8001b16:	d109      	bne.n	8001b2c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b18:	4ab0      	ldr	r2, [pc, #704]	@ (8001ddc <I2C_ITSlaveCplt+0x304>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0011      	movs	r1, r2
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 fde2 	bl	80026e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2221      	movs	r2, #33	@ 0x21
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2a:	e020      	b.n	8001b6e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b2c:	220b      	movs	r2, #11
 8001b2e:	18bb      	adds	r3, r7, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b22      	cmp	r3, #34	@ 0x22
 8001b34:	d003      	beq.n	8001b3e <I2C_ITSlaveCplt+0x66>
 8001b36:	18bb      	adds	r3, r7, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b3c:	d109      	bne.n	8001b52 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b3e:	4aa8      	ldr	r2, [pc, #672]	@ (8001de0 <I2C_ITSlaveCplt+0x308>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 fdcf 	bl	80026e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2222      	movs	r2, #34	@ 0x22
 8001b4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b50:	e00d      	b.n	8001b6e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001b52:	230b      	movs	r3, #11
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b28      	cmp	r3, #40	@ 0x28
 8001b5a:	d108      	bne.n	8001b6e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001b5c:	4aa1      	ldr	r2, [pc, #644]	@ (8001de4 <I2C_ITSlaveCplt+0x30c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0011      	movs	r1, r2
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 fdc0 	bl	80026e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2180      	movs	r1, #128	@ 0x80
 8001b7a:	0209      	lsls	r1, r1, #8
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4997      	ldr	r1, [pc, #604]	@ (8001de8 <I2C_ITSlaveCplt+0x310>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 fab5 	bl	8002102 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	0b9b      	lsrs	r3, r3, #14
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	498f      	ldr	r1, [pc, #572]	@ (8001dec <I2C_ITSlaveCplt+0x314>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bca:	e018      	b.n	8001bfe <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	0bdb      	lsrs	r3, r3, #15
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d012      	beq.n	8001bfe <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4983      	ldr	r1, [pc, #524]	@ (8001df0 <I2C_ITSlaveCplt+0x318>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	001a      	movs	r2, r3
 8001c04:	2301      	movs	r3, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d020      	beq.n	8001c4c <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4393      	bics	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	001a      	movs	r2, r3
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d051      	beq.n	8001d12 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	001a      	movs	r2, r3
 8001c74:	2301      	movs	r3, #1
 8001c76:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c78:	d04b      	beq.n	8001d12 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d12d      	bne.n	8001ce0 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2241      	movs	r2, #65	@ 0x41
 8001c88:	5c9b      	ldrb	r3, [r3, r2]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b28      	cmp	r3, #40	@ 0x28
 8001c8e:	d10b      	bne.n	8001ca8 <I2C_ITSlaveCplt+0x1d0>
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	049b      	lsls	r3, r3, #18
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d106      	bne.n	8001ca8 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f8a9 	bl	8001df8 <I2C_ITListenCplt>
 8001ca6:	e034      	b.n	8001d12 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2241      	movs	r2, #65	@ 0x41
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b29      	cmp	r3, #41	@ 0x29
 8001cb2:	d110      	bne.n	8001cd6 <I2C_ITSlaveCplt+0x1fe>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8001df4 <I2C_ITSlaveCplt+0x31c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00c      	beq.n	8001cd6 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 fa1b 	bl	8002102 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff fe9c 	bl	8001a0c <I2C_ITSlaveSeqCplt>
 8001cd4:	e01d      	b.n	8001d12 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2210      	movs	r2, #16
 8001cdc:	61da      	str	r2, [r3, #28]
 8001cde:	e018      	b.n	8001d12 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	2204      	movs	r2, #4
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <I2C_ITSlaveCplt+0x22c>
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	045b      	lsls	r3, r3, #17
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f8cd 	bl	8001eac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2242      	movs	r2, #66	@ 0x42
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0011      	movs	r1, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 f8bb 	bl	8001eac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2241      	movs	r2, #65	@ 0x41
 8001d3a:	5c9b      	ldrb	r3, [r3, r2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b28      	cmp	r3, #40	@ 0x28
 8001d40:	d147      	bne.n	8001dd2 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0011      	movs	r1, r2
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f855 	bl	8001df8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d4e:	e040      	b.n	8001dd2 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <I2C_ITSlaveCplt+0x31c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d016      	beq.n	8001d88 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff fe55 	bl	8001a0c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a23      	ldr	r2, [pc, #140]	@ (8001df4 <I2C_ITSlaveCplt+0x31c>)
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2241      	movs	r2, #65	@ 0x41
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2240      	movs	r2, #64	@ 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff fc73 	bl	800166c <HAL_I2C_ListenCpltCallback>
}
 8001d86:	e024      	b.n	8001dd2 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2241      	movs	r2, #65	@ 0x41
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b22      	cmp	r3, #34	@ 0x22
 8001d92:	d10f      	bne.n	8001db4 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2241      	movs	r2, #65	@ 0x41
 8001d98:	2120      	movs	r1, #32
 8001d9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2240      	movs	r2, #64	@ 0x40
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fc45 	bl	800163c <HAL_I2C_SlaveRxCpltCallback>
}
 8001db2:	e00e      	b.n	8001dd2 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2241      	movs	r2, #65	@ 0x41
 8001db8:	2120      	movs	r1, #32
 8001dba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2240      	movs	r2, #64	@ 0x40
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fc2d 	bl	800162c <HAL_I2C_SlaveTxCpltCallback>
}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b006      	add	sp, #24
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	00008001 	.word	0x00008001
 8001de0:	00008002 	.word	0x00008002
 8001de4:	00008003 	.word	0x00008003
 8001de8:	fe00e800 	.word	0xfe00e800
 8001dec:	ffffbfff 	.word	0xffffbfff
 8001df0:	ffff7fff 	.word	0xffff7fff
 8001df4:	ffff0000 	.word	0xffff0000

08001df8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <I2C_ITListenCplt+0xac>)
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2241      	movs	r2, #65	@ 0x41
 8001e12:	2120      	movs	r1, #32
 8001e14:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2242      	movs	r2, #66	@ 0x42
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	2204      	movs	r2, #4
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <I2C_ITListenCplt+0xb0>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 fc33 	bl	80026e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2210      	movs	r2, #16
 8001e88:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2240      	movs	r2, #64	@ 0x40
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fbe9 	bl	800166c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	ffff0000 	.word	0xffff0000
 8001ea8:	00008003 	.word	0x00008003

08001eac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	183b      	adds	r3, r7, r0
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	2141      	movs	r1, #65	@ 0x41
 8001ebe:	5c52      	ldrb	r2, [r2, r1]
 8001ec0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2242      	movs	r2, #66	@ 0x42
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a72      	ldr	r2, [pc, #456]	@ (8002098 <I2C_ITError+0x1ec>)
 8001ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b28      	cmp	r3, #40	@ 0x28
 8001ee8:	d007      	beq.n	8001efa <I2C_ITError+0x4e>
 8001eea:	183b      	adds	r3, r7, r0
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b29      	cmp	r3, #41	@ 0x29
 8001ef0:	d003      	beq.n	8001efa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001ef2:	183b      	adds	r3, r7, r0
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ef8:	d10c      	bne.n	8001f14 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2103      	movs	r1, #3
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 fbf2 	bl	80026e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2241      	movs	r2, #65	@ 0x41
 8001f08:	2128      	movs	r1, #40	@ 0x28
 8001f0a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a63      	ldr	r2, [pc, #396]	@ (800209c <I2C_ITError+0x1f0>)
 8001f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f12:	e032      	b.n	8001f7a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f14:	4a62      	ldr	r2, [pc, #392]	@ (80020a0 <I2C_ITError+0x1f4>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0011      	movs	r1, r2
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fbe4 	bl	80026e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f8ed 	bl	8002102 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2241      	movs	r2, #65	@ 0x41
 8001f2c:	5c9b      	ldrb	r3, [r3, r2]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b60      	cmp	r3, #96	@ 0x60
 8001f32:	d01f      	beq.n	8001f74 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2241      	movs	r2, #65	@ 0x41
 8001f38:	2120      	movs	r1, #32
 8001f3a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2220      	movs	r2, #32
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d114      	bne.n	8001f74 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2210      	movs	r2, #16
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d109      	bne.n	8001f6c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	2204      	movs	r2, #4
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2220      	movs	r2, #32
 8001f72:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03b      	beq.n	8002000 <I2C_ITError+0x154>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b11      	cmp	r3, #17
 8001f8c:	d002      	beq.n	8001f94 <I2C_ITError+0xe8>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b21      	cmp	r3, #33	@ 0x21
 8001f92:	d135      	bne.n	8002000 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	01db      	lsls	r3, r3, #7
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d107      	bne.n	8001fb8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	493c      	ldr	r1, [pc, #240]	@ (80020a4 <I2C_ITError+0x1f8>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe fe12 	bl	8000be6 <HAL_DMA_GetState>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d016      	beq.n	8001ff6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	4a36      	ldr	r2, [pc, #216]	@ (80020a8 <I2C_ITError+0x1fc>)
 8001fce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2240      	movs	r2, #64	@ 0x40
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe fdbb 	bl	8000b58 <HAL_DMA_Abort_IT>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d051      	beq.n	800208a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ff4:	e049      	b.n	800208a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f859 	bl	80020b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ffe:	e044      	b.n	800208a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d03b      	beq.n	8002080 <I2C_ITError+0x1d4>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b12      	cmp	r3, #18
 800200c:	d002      	beq.n	8002014 <I2C_ITError+0x168>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b22      	cmp	r3, #34	@ 0x22
 8002012:	d135      	bne.n	8002080 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	401a      	ands	r2, r3
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	429a      	cmp	r2, r3
 8002026:	d107      	bne.n	8002038 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	491e      	ldr	r1, [pc, #120]	@ (80020ac <I2C_ITError+0x200>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fdd2 	bl	8000be6 <HAL_DMA_GetState>
 8002042:	0003      	movs	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d016      	beq.n	8002076 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	4a16      	ldr	r2, [pc, #88]	@ (80020a8 <I2C_ITError+0x1fc>)
 800204e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2240      	movs	r2, #64	@ 0x40
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe fd7b 	bl	8000b58 <HAL_DMA_Abort_IT>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d013      	beq.n	800208e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002070:	0018      	movs	r0, r3
 8002072:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002074:	e00b      	b.n	800208e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f819 	bl	80020b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800207e:	e006      	b.n	800208e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f814 	bl	80020b0 <I2C_TreatErrorCallback>
  }
}
 8002088:	e002      	b.n	8002090 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	e000      	b.n	8002090 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800208e:	46c0      	nop			@ (mov r8, r8)
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}
 8002098:	ffff0000 	.word	0xffff0000
 800209c:	0800169d 	.word	0x0800169d
 80020a0:	00008003 	.word	0x00008003
 80020a4:	ffffbfff 	.word	0xffffbfff
 80020a8:	08002147 	.word	0x08002147
 80020ac:	ffff7fff 	.word	0xffff7fff

080020b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2241      	movs	r2, #65	@ 0x41
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b60      	cmp	r3, #96	@ 0x60
 80020c2:	d10f      	bne.n	80020e4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2241      	movs	r2, #65	@ 0x41
 80020c8:	2120      	movs	r1, #32
 80020ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2240      	movs	r2, #64	@ 0x40
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fad5 	bl	800168c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020e2:	e00a      	b.n	80020fa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2240      	movs	r2, #64	@ 0x40
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fac1 	bl	800167c <HAL_I2C_ErrorCallback>
}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}

08002102 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d103      	bne.n	8002120 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	619a      	str	r2, [r3, #24]
  }
}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}

08002146 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002160:	2200      	movs	r2, #0
 8002162:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	2200      	movs	r2, #0
 8002172:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff ff9a 	bl	80020b0 <I2C_TreatErrorCallback>
}
 800217c:	46c0      	nop			@ (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002194:	e03a      	b.n	800220c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 f971 	bl	8002484 <I2C_IsErrorOccurred>
 80021a2:	1e03      	subs	r3, r0, #0
 80021a4:	d001      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e040      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	d02d      	beq.n	800220c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b0:	f7fe fbaa 	bl	8000908 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d302      	bcc.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d122      	bne.n	800220c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	425a      	negs	r2, r3
 80021d6:	4153      	adcs	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	001a      	movs	r2, r3
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d113      	bne.n	800220c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e8:	2220      	movs	r2, #32
 80021ea:	431a      	orrs	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2241      	movs	r2, #65	@ 0x41
 80021f4:	2120      	movs	r1, #32
 80021f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2242      	movs	r2, #66	@ 0x42
 80021fc:	2100      	movs	r1, #0
 80021fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	@ 0x40
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e00f      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4013      	ands	r3, r2
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	425a      	negs	r2, r3
 800221c:	4153      	adcs	r3, r2
 800221e:	b2db      	uxtb	r3, r3
 8002220:	001a      	movs	r2, r3
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d0b5      	beq.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002240:	e032      	b.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f91b 	bl	8002484 <I2C_IsErrorOccurred>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d001      	beq.n	8002256 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e030      	b.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	d025      	beq.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225c:	f7fe fb54 	bl	8000908 <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d302      	bcc.n	8002272 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11a      	bne.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d013      	beq.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	2220      	movs	r2, #32
 8002286:	431a      	orrs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2241      	movs	r2, #65	@ 0x41
 8002290:	2120      	movs	r1, #32
 8002292:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2242      	movs	r2, #66	@ 0x42
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e007      	b.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d1c5      	bne.n	8002242 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b004      	add	sp, #16
 80022be:	bd80      	pop	{r7, pc}

080022c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022cc:	e02f      	b.n	800232e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f8d5 	bl	8002484 <I2C_IsErrorOccurred>
 80022da:	1e03      	subs	r3, r0, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e02d      	b.n	800233e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe fb11 	bl	8000908 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11a      	bne.n	800232e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2220      	movs	r2, #32
 8002300:	4013      	ands	r3, r2
 8002302:	2b20      	cmp	r3, #32
 8002304:	d013      	beq.n	800232e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	2220      	movs	r2, #32
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2241      	movs	r2, #65	@ 0x41
 8002316:	2120      	movs	r1, #32
 8002318:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2242      	movs	r2, #66	@ 0x42
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2240      	movs	r2, #64	@ 0x40
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2220      	movs	r2, #32
 8002336:	4013      	ands	r3, r2
 8002338:	2b20      	cmp	r3, #32
 800233a:	d1c8      	bne.n	80022ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2317      	movs	r3, #23
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800235c:	e07b      	b.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f88d 	bl	8002484 <I2C_IsErrorOccurred>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d003      	beq.n	8002376 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800236e:	2317      	movs	r3, #23
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2220      	movs	r2, #32
 800237e:	4013      	ands	r3, r2
 8002380:	2b20      	cmp	r3, #32
 8002382:	d140      	bne.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002384:	2117      	movs	r1, #23
 8002386:	187b      	adds	r3, r7, r1
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d13b      	bne.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	2b04      	cmp	r3, #4
 800239a:	d106      	bne.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2210      	movs	r2, #16
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d123      	bne.n	8002400 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2204      	movs	r2, #4
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2220      	movs	r2, #32
 80023cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4929      	ldr	r1, [pc, #164]	@ (8002480 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80023da:	400a      	ands	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2241      	movs	r2, #65	@ 0x41
 80023e2:	2120      	movs	r1, #32
 80023e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2242      	movs	r2, #66	@ 0x42
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80023f6:	2317      	movs	r3, #23
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e002      	b.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002406:	f7fe fa7f 	bl	8000908 <HAL_GetTick>
 800240a:	0002      	movs	r2, r0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11c      	bne.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800241c:	2017      	movs	r0, #23
 800241e:	183b      	adds	r3, r7, r0
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d117      	bne.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2204      	movs	r2, #4
 800242e:	4013      	ands	r3, r2
 8002430:	2b04      	cmp	r3, #4
 8002432:	d010      	beq.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	2220      	movs	r2, #32
 800243a:	431a      	orrs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2241      	movs	r2, #65	@ 0x41
 8002444:	2120      	movs	r1, #32
 8002446:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2240      	movs	r2, #64	@ 0x40
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002450:	183b      	adds	r3, r7, r0
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2204      	movs	r2, #4
 800245e:	4013      	ands	r3, r2
 8002460:	2b04      	cmp	r3, #4
 8002462:	d005      	beq.n	8002470 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002464:	2317      	movs	r3, #23
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d100      	bne.n	8002470 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800246e:	e776      	b.n	800235e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002470:	2317      	movs	r3, #23
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b006      	add	sp, #24
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	fe00e800 	.word	0xfe00e800

08002484 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	@ 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002490:	2327      	movs	r3, #39	@ 0x27
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2210      	movs	r2, #16
 80024ac:	4013      	ands	r3, r2
 80024ae:	d100      	bne.n	80024b2 <I2C_IsErrorOccurred+0x2e>
 80024b0:	e079      	b.n	80025a6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2210      	movs	r2, #16
 80024b8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ba:	e057      	b.n	800256c <I2C_IsErrorOccurred+0xe8>
 80024bc:	2227      	movs	r2, #39	@ 0x27
 80024be:	18bb      	adds	r3, r7, r2
 80024c0:	18ba      	adds	r2, r7, r2
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3301      	adds	r3, #1
 80024ca:	d04f      	beq.n	800256c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7fe fa1c 	bl	8000908 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <I2C_IsErrorOccurred+0x5e>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d144      	bne.n	800256c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	2380      	movs	r3, #128	@ 0x80
 80024ea:	01db      	lsls	r3, r3, #7
 80024ec:	4013      	ands	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024f0:	2013      	movs	r0, #19
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	2142      	movs	r1, #66	@ 0x42
 80024f8:	5c52      	ldrb	r2, [r2, r1]
 80024fa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	401a      	ands	r2, r3
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	429a      	cmp	r2, r3
 800250e:	d126      	bne.n	800255e <I2C_IsErrorOccurred+0xda>
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	01db      	lsls	r3, r3, #7
 8002516:	429a      	cmp	r2, r3
 8002518:	d021      	beq.n	800255e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800251a:	183b      	adds	r3, r7, r0
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b20      	cmp	r3, #32
 8002520:	d01d      	beq.n	800255e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	01c9      	lsls	r1, r1, #7
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002534:	f7fe f9e8 	bl	8000908 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800253c:	e00f      	b.n	800255e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800253e:	f7fe f9e3 	bl	8000908 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b19      	cmp	r3, #25
 800254a:	d908      	bls.n	800255e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2220      	movs	r2, #32
 8002550:	4313      	orrs	r3, r2
 8002552:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002554:	2327      	movs	r3, #39	@ 0x27
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]

              break;
 800255c:	e006      	b.n	800256c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2220      	movs	r2, #32
 8002566:	4013      	ands	r3, r2
 8002568:	2b20      	cmp	r3, #32
 800256a:	d1e8      	bne.n	800253e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2220      	movs	r2, #32
 8002574:	4013      	ands	r3, r2
 8002576:	2b20      	cmp	r3, #32
 8002578:	d004      	beq.n	8002584 <I2C_IsErrorOccurred+0x100>
 800257a:	2327      	movs	r3, #39	@ 0x27
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d09b      	beq.n	80024bc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002584:	2327      	movs	r3, #39	@ 0x27
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	2204      	movs	r2, #4
 800259a:	4313      	orrs	r3, r2
 800259c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800259e:	2327      	movs	r3, #39	@ 0x27
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	d00c      	beq.n	80025d2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4313      	orrs	r3, r2
 80025be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	0052      	lsls	r2, r2, #1
 80025c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ca:	2327      	movs	r3, #39	@ 0x27
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4013      	ands	r3, r2
 80025da:	d00c      	beq.n	80025f6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	2208      	movs	r2, #8
 80025e0:	4313      	orrs	r3, r2
 80025e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	00d2      	lsls	r2, r2, #3
 80025ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ee:	2327      	movs	r3, #39	@ 0x27
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d00c      	beq.n	800261a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2202      	movs	r2, #2
 8002604:	4313      	orrs	r3, r2
 8002606:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002612:	2327      	movs	r3, #39	@ 0x27
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800261a:	2327      	movs	r3, #39	@ 0x27
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01d      	beq.n	8002660 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	0018      	movs	r0, r3
 8002628:	f7ff fd6b 	bl	8002102 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	490e      	ldr	r1, [pc, #56]	@ (8002670 <I2C_IsErrorOccurred+0x1ec>)
 8002638:	400a      	ands	r2, r1
 800263a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2241      	movs	r2, #65	@ 0x41
 800264c:	2120      	movs	r1, #32
 800264e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2242      	movs	r2, #66	@ 0x42
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002660:	2327      	movs	r3, #39	@ 0x27
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	781b      	ldrb	r3, [r3, #0]
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b00a      	add	sp, #40	@ 0x28
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	0008      	movs	r0, r1
 800267e:	0011      	movs	r1, r2
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	240a      	movs	r4, #10
 8002684:	193b      	adds	r3, r7, r4
 8002686:	1c02      	adds	r2, r0, #0
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	2009      	movs	r0, #9
 800268c:	183b      	adds	r3, r7, r0
 800268e:	1c0a      	adds	r2, r1, #0
 8002690:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002692:	193b      	adds	r3, r7, r4
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	059b      	lsls	r3, r3, #22
 8002698:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800269a:	183b      	adds	r3, r7, r0
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	0419      	lsls	r1, r3, #16
 80026a0:	23ff      	movs	r3, #255	@ 0xff
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ae:	4313      	orrs	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026be:	0d51      	lsrs	r1, r2, #21
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	00d2      	lsls	r2, r2, #3
 80026c4:	400a      	ands	r2, r1
 80026c6:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <I2C_TransferConfig+0x70>)
 80026c8:	430a      	orrs	r2, r1
 80026ca:	43d2      	mvns	r2, r2
 80026cc:	401a      	ands	r2, r3
 80026ce:	0011      	movs	r1, r2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b007      	add	sp, #28
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	03ff63ff 	.word	0x03ff63ff

080026e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	000a      	movs	r2, r1
 80026f2:	1cbb      	adds	r3, r7, #2
 80026f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d010      	beq.n	8002726 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2242      	movs	r2, #66	@ 0x42
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2241      	movs	r2, #65	@ 0x41
 8002710:	5c9b      	ldrb	r3, [r3, r2]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	001a      	movs	r2, r3
 8002716:	2328      	movs	r3, #40	@ 0x28
 8002718:	4013      	ands	r3, r2
 800271a:	2b28      	cmp	r3, #40	@ 0x28
 800271c:	d003      	beq.n	8002726 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22b0      	movs	r2, #176	@ 0xb0
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002726:	1cbb      	adds	r3, r7, #2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d010      	beq.n	8002752 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2244      	movs	r2, #68	@ 0x44
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2241      	movs	r2, #65	@ 0x41
 800273c:	5c9b      	ldrb	r3, [r3, r2]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	001a      	movs	r2, r3
 8002742:	2328      	movs	r3, #40	@ 0x28
 8002744:	4013      	ands	r3, r2
 8002746:	2b28      	cmp	r3, #40	@ 0x28
 8002748:	d003      	beq.n	8002752 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	22b0      	movs	r2, #176	@ 0xb0
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002752:	1cbb      	adds	r3, r7, #2
 8002754:	2200      	movs	r2, #0
 8002756:	5e9b      	ldrsh	r3, [r3, r2]
 8002758:	2b00      	cmp	r3, #0
 800275a:	da03      	bge.n	8002764 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	22b8      	movs	r2, #184	@ 0xb8
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002764:	1cbb      	adds	r3, r7, #2
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	2b10      	cmp	r3, #16
 800276a:	d103      	bne.n	8002774 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2290      	movs	r2, #144	@ 0x90
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002774:	1cbb      	adds	r3, r7, #2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d103      	bne.n	8002784 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002784:	1cbb      	adds	r3, r7, #2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	2b40      	cmp	r3, #64	@ 0x40
 800278a:	d103      	bne.n	8002794 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43d9      	mvns	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	400a      	ands	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2241      	movs	r2, #65	@ 0x41
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d138      	bne.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2240      	movs	r2, #64	@ 0x40
 80027ca:	5c9b      	ldrb	r3, [r3, r2]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e032      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2240      	movs	r2, #64	@ 0x40
 80027d8:	2101      	movs	r1, #1
 80027da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2241      	movs	r2, #65	@ 0x41
 80027e0:	2124      	movs	r1, #36	@ 0x24
 80027e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4911      	ldr	r1, [pc, #68]	@ (8002844 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002800:	400a      	ands	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2241      	movs	r2, #65	@ 0x41
 8002828:	2120      	movs	r1, #32
 800282a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	ffffefff 	.word	0xffffefff

08002848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	@ 0x41
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	d139      	bne.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2240      	movs	r2, #64	@ 0x40
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002868:	2302      	movs	r3, #2
 800286a:	e033      	b.n	80028d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	2101      	movs	r1, #1
 8002872:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2241      	movs	r2, #65	@ 0x41
 8002878:	2124      	movs	r1, #36	@ 0x24
 800287a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	438a      	bics	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a11      	ldr	r2, [pc, #68]	@ (80028dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2241      	movs	r2, #65	@ 0x41
 80028c2:	2120      	movs	r1, #32
 80028c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2240      	movs	r2, #64	@ 0x40
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	fffff0ff 	.word	0xfffff0ff

080028e0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	000a      	movs	r2, r1
 80028ea:	1cfb      	adds	r3, r7, #3
 80028ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80028f2:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80028fe:	4b23      	ldr	r3, [pc, #140]	@ (800298c <HAL_PWR_EnterSTOPMode+0xac>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_PWR_EnterSTOPMode+0x40>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002914:	4b1c      	ldr	r3, [pc, #112]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 800291a:	491d      	ldr	r1, [pc, #116]	@ (8002990 <HAL_PWR_EnterSTOPMode+0xb0>)
 800291c:	400a      	ands	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2203      	movs	r2, #3
 800292a:	4393      	bics	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002936:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800293c:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <HAL_PWR_EnterSTOPMode+0xb4>)
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002942:	2104      	movs	r1, #4
 8002944:	430a      	orrs	r2, r1
 8002946:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002948:	1cfb      	adds	r3, r7, #3
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002950:	bf30      	wfi
 8002952:	e002      	b.n	800295a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002954:	bf40      	sev
    __WFE();
 8002956:	bf20      	wfe
    __WFE();
 8002958:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <HAL_PWR_EnterSTOPMode+0xb4>)
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002960:	2104      	movs	r1, #4
 8002962:	438a      	bics	r2, r1
 8002964:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_PWR_EnterSTOPMode+0xa0>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002972:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	0089      	lsls	r1, r1, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
  }
}
 8002980:	46c0      	nop			@ (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b006      	add	sp, #24
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40007000 	.word	0x40007000
 800298c:	40010000 	.word	0x40010000
 8002990:	fffffdff 	.word	0xfffffdff
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f000 fb6c 	bl	8003084 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ac:	4bc8      	ldr	r3, [pc, #800]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	220c      	movs	r2, #12
 80029b2:	4013      	ands	r3, r2
 80029b4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b6:	4bc6      	ldr	r3, [pc, #792]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	025b      	lsls	r3, r3, #9
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d100      	bne.n	80029ce <HAL_RCC_OscConfig+0x36>
 80029cc:	e07d      	b.n	8002aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d007      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x68>
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	025b      	lsls	r3, r3, #9
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4bba      	ldr	r3, [pc, #744]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	029b      	lsls	r3, r3, #10
 80029ec:	4013      	ands	r3, r2
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5a>
 80029f0:	e06a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x130>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d166      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f000 fb42 	bl	8003084 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x84>
 8002a0c:	4bb0      	ldr	r3, [pc, #704]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4baf      	ldr	r3, [pc, #700]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	0249      	lsls	r1, r1, #9
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e027      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	23a0      	movs	r3, #160	@ 0xa0
 8002a22:	02db      	lsls	r3, r3, #11
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10e      	bne.n	8002a46 <HAL_RCC_OscConfig+0xae>
 8002a28:	4ba9      	ldr	r3, [pc, #676]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4ba8      	ldr	r3, [pc, #672]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a2e:	2180      	movs	r1, #128	@ 0x80
 8002a30:	02c9      	lsls	r1, r1, #11
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4ba6      	ldr	r3, [pc, #664]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4ba5      	ldr	r3, [pc, #660]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0249      	lsls	r1, r1, #9
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e012      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a46:	4ba2      	ldr	r3, [pc, #648]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4ba1      	ldr	r3, [pc, #644]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	49a1      	ldr	r1, [pc, #644]	@ (8002cd4 <HAL_RCC_OscConfig+0x33c>)
 8002a4e:	400a      	ands	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	4b9f      	ldr	r3, [pc, #636]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	025b      	lsls	r3, r3, #9
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4b9b      	ldr	r3, [pc, #620]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b9a      	ldr	r3, [pc, #616]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a66:	499c      	ldr	r1, [pc, #624]	@ (8002cd8 <HAL_RCC_OscConfig+0x340>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d014      	beq.n	8002a9e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fd ff48 	bl	8000908 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7e:	f7fd ff43 	bl	8000908 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	@ 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e2f9      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a90:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0xe6>
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fd ff33 	bl	8000908 <HAL_GetTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fd ff2e 	bl	8000908 <HAL_GetTick>
 8002aac:	0002      	movs	r2, r0
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e2e4      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aba:	4b85      	ldr	r3, [pc, #532]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x110>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x13e>
 8002ad4:	e099      	b.n	8002c0a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	2220      	movs	r2, #32
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ae4:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b79      	ldr	r3, [pc, #484]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002aea:	2120      	movs	r1, #32
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	2220      	movs	r2, #32
 8002af4:	4393      	bics	r3, r2
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d13e      	bne.n	8002b82 <HAL_RCC_OscConfig+0x1ea>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d13b      	bne.n	8002b82 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b0a:	4b71      	ldr	r3, [pc, #452]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	4013      	ands	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_RCC_OscConfig+0x186>
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e2b2      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x344>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	4b68      	ldr	r3, [pc, #416]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b34:	4b66      	ldr	r3, [pc, #408]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2209      	movs	r2, #9
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 fbeb 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 8002b4a:	0001      	movs	r1, r0
 8002b4c:	4b60      	ldr	r3, [pc, #384]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	220f      	movs	r2, #15
 8002b54:	4013      	ands	r3, r2
 8002b56:	4a62      	ldr	r2, [pc, #392]	@ (8002ce0 <HAL_RCC_OscConfig+0x348>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	000a      	movs	r2, r1
 8002b5c:	40da      	lsrs	r2, r3
 8002b5e:	4b61      	ldr	r3, [pc, #388]	@ (8002ce4 <HAL_RCC_OscConfig+0x34c>)
 8002b60:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b62:	4b61      	ldr	r3, [pc, #388]	@ (8002ce8 <HAL_RCC_OscConfig+0x350>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2513      	movs	r5, #19
 8002b68:	197c      	adds	r4, r7, r5
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd fe86 	bl	800087c <HAL_InitTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b74:	197b      	adds	r3, r7, r5
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d046      	beq.n	8002c0a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002b7c:	197b      	adds	r3, r7, r5
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	e280      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d027      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b88:	4b51      	ldr	r3, [pc, #324]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2209      	movs	r2, #9
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fd feb5 	bl	8000908 <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fd feb0 	bl	8000908 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e266      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb6:	4b46      	ldr	r3, [pc, #280]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0f1      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a45      	ldr	r2, [pc, #276]	@ (8002cdc <HAL_RCC_OscConfig+0x344>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	021a      	lsls	r2, r3, #8
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e018      	b.n	8002c0a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fd fe90 	bl	8000908 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fd fe8b 	bl	8000908 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e241      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c00:	4b33      	ldr	r3, [pc, #204]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	d1f1      	bne.n	8002bee <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	4013      	ands	r3, r2
 8002c12:	d100      	bne.n	8002c16 <HAL_RCC_OscConfig+0x27e>
 8002c14:	e0a1      	b.n	8002d5a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d140      	bne.n	8002c9e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x29c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e227      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c34:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a2c      	ldr	r2, [pc, #176]	@ (8002cec <HAL_RCC_OscConfig+0x354>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c48:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	0a19      	lsrs	r1, r3, #8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	061a      	lsls	r2, r3, #24
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	0b5b      	lsrs	r3, r3, #13
 8002c62:	3301      	adds	r3, #1
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	0212      	lsls	r2, r2, #8
 8002c68:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c6a:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	210f      	movs	r1, #15
 8002c72:	400b      	ands	r3, r1
 8002c74:	491a      	ldr	r1, [pc, #104]	@ (8002ce0 <HAL_RCC_OscConfig+0x348>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_RCC_OscConfig+0x34c>)
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_RCC_OscConfig+0x350>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2513      	movs	r5, #19
 8002c84:	197c      	adds	r4, r7, r5
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fd fdf8 	bl	800087c <HAL_InitTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d060      	beq.n	8002d5a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002c98:	197b      	adds	r3, r7, r5
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	e1f2      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d03f      	beq.n	8002d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <HAL_RCC_OscConfig+0x338>)
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	0049      	lsls	r1, r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fd fe28 	bl	8000908 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cbc:	e018      	b.n	8002cf0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cbe:	f7fd fe23 	bl	8000908 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d911      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1d9      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	fffeffff 	.word	0xfffeffff
 8002cd8:	fffbffff 	.word	0xfffbffff
 8002cdc:	ffffe0ff 	.word	0xffffe0ff
 8002ce0:	08003730 	.word	0x08003730
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000004 	.word	0x20000004
 8002cec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cf0:	4bc9      	ldr	r3, [pc, #804]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d0e0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfc:	4bc6      	ldr	r3, [pc, #792]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4ac6      	ldr	r2, [pc, #792]	@ (800301c <HAL_RCC_OscConfig+0x684>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	4bc3      	ldr	r3, [pc, #780]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d10:	4bc1      	ldr	r3, [pc, #772]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	0a19      	lsrs	r1, r3, #8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	061a      	lsls	r2, r3, #24
 8002d1e:	4bbe      	ldr	r3, [pc, #760]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e019      	b.n	8002d5a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d26:	4bbc      	ldr	r3, [pc, #752]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4bbb      	ldr	r3, [pc, #748]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d2c:	49bc      	ldr	r1, [pc, #752]	@ (8003020 <HAL_RCC_OscConfig+0x688>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fd fde9 	bl	8000908 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3c:	f7fd fde4 	bl	8000908 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e19a      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d4e:	4bb2      	ldr	r3, [pc, #712]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	4013      	ands	r3, r2
 8002d62:	d036      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d019      	beq.n	8002da0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6c:	4baa      	ldr	r3, [pc, #680]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d70:	4ba9      	ldr	r3, [pc, #676]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d72:	2101      	movs	r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fd fdc6 	bl	8000908 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fd fdc1 	bl	8000908 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e177      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d94:	4ba0      	ldr	r3, [pc, #640]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d0f1      	beq.n	8002d82 <HAL_RCC_OscConfig+0x3ea>
 8002d9e:	e018      	b.n	8002dd2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b9d      	ldr	r3, [pc, #628]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002da4:	4b9c      	ldr	r3, [pc, #624]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	438a      	bics	r2, r1
 8002daa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fd fdac 	bl	8000908 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fd fda7 	bl	8000908 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e15d      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dc8:	4b93      	ldr	r3, [pc, #588]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	2202      	movs	r2, #2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d1f1      	bne.n	8002db6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_RCC_OscConfig+0x446>
 8002ddc:	e0ae      	b.n	8002f3c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2023      	movs	r0, #35	@ 0x23
 8002de0:	183b      	adds	r3, r7, r0
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b8c      	ldr	r3, [pc, #560]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	055b      	lsls	r3, r3, #21
 8002dee:	4013      	ands	r3, r2
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b89      	ldr	r3, [pc, #548]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df6:	4b88      	ldr	r3, [pc, #544]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002df8:	2180      	movs	r1, #128	@ 0x80
 8002dfa:	0549      	lsls	r1, r1, #21
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002e00:	183b      	adds	r3, r7, r0
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b87      	ldr	r3, [pc, #540]	@ (8003024 <HAL_RCC_OscConfig+0x68c>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d11a      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b84      	ldr	r3, [pc, #528]	@ (8003024 <HAL_RCC_OscConfig+0x68c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b83      	ldr	r3, [pc, #524]	@ (8003024 <HAL_RCC_OscConfig+0x68c>)
 8002e18:	2180      	movs	r1, #128	@ 0x80
 8002e1a:	0049      	lsls	r1, r1, #1
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e20:	f7fd fd72 	bl	8000908 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7fd fd6d 	bl	8000908 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	@ 0x64
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e123      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b79      	ldr	r3, [pc, #484]	@ (8003024 <HAL_RCC_OscConfig+0x68c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4cc>
 8002e54:	4b70      	ldr	r3, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e5a:	2180      	movs	r1, #128	@ 0x80
 8002e5c:	0049      	lsls	r1, r1, #1
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e62:	e031      	b.n	8002ec8 <HAL_RCC_OscConfig+0x530>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4ee>
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e72:	496b      	ldr	r1, [pc, #428]	@ (8003020 <HAL_RCC_OscConfig+0x688>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e78:	4b67      	ldr	r3, [pc, #412]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e7c:	4b66      	ldr	r3, [pc, #408]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e7e:	496a      	ldr	r1, [pc, #424]	@ (8003028 <HAL_RCC_OscConfig+0x690>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e84:	e020      	b.n	8002ec8 <HAL_RCC_OscConfig+0x530>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	23a0      	movs	r3, #160	@ 0xa0
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10e      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x518>
 8002e92:	4b61      	ldr	r3, [pc, #388]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e96:	4b60      	ldr	r3, [pc, #384]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	00c9      	lsls	r1, r1, #3
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002ea2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002ea6:	2180      	movs	r1, #128	@ 0x80
 8002ea8:	0049      	lsls	r1, r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	651a      	str	r2, [r3, #80]	@ 0x50
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x530>
 8002eb0:	4b59      	ldr	r3, [pc, #356]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002eb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eb4:	4b58      	ldr	r3, [pc, #352]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002eb6:	495a      	ldr	r1, [pc, #360]	@ (8003020 <HAL_RCC_OscConfig+0x688>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ebc:	4b56      	ldr	r3, [pc, #344]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002ebe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ec0:	4b55      	ldr	r3, [pc, #340]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002ec2:	4959      	ldr	r1, [pc, #356]	@ (8003028 <HAL_RCC_OscConfig+0x690>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fd fd1a 	bl	8000908 <HAL_GetTick>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed8:	e009      	b.n	8002eee <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fd fd15 	bl	8000908 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	4a51      	ldr	r2, [pc, #324]	@ (800302c <HAL_RCC_OscConfig+0x694>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0ca      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eee:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d0ef      	beq.n	8002eda <HAL_RCC_OscConfig+0x542>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fd fd04 	bl	8000908 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f04:	e009      	b.n	8002f1a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fd fcff 	bl	8000908 <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	4a46      	ldr	r2, [pc, #280]	@ (800302c <HAL_RCC_OscConfig+0x694>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0b4      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f26:	2323      	movs	r3, #35	@ 0x23
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f36:	493e      	ldr	r1, [pc, #248]	@ (8003030 <HAL_RCC_OscConfig+0x698>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d100      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5ae>
 8002f44:	e09d      	b.n	8003082 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d100      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5b6>
 8002f4c:	e076      	b.n	800303c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d145      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f5c:	4935      	ldr	r1, [pc, #212]	@ (8003034 <HAL_RCC_OscConfig+0x69c>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fcd1 	bl	8000908 <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fd fccc 	bl	8000908 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e082      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f7e:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	049b      	lsls	r3, r3, #18
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	4b23      	ldr	r3, [pc, #140]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <HAL_RCC_OscConfig+0x6a0>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b1a      	ldr	r3, [pc, #104]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002fb0:	2180      	movs	r1, #128	@ 0x80
 8002fb2:	0449      	lsls	r1, r1, #17
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fd fca6 	bl	8000908 <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fd fca1 	bl	8000908 <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e057      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fd4:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	049b      	lsls	r3, r3, #18
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x62a>
 8002fe0:	e04f      	b.n	8003082 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 8002fe8:	4912      	ldr	r1, [pc, #72]	@ (8003034 <HAL_RCC_OscConfig+0x69c>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fd fc8b 	bl	8000908 <HAL_GetTick>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fd fc86 	bl	8000908 <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e03c      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800300a:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <HAL_RCC_OscConfig+0x680>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	049b      	lsls	r3, r3, #18
 8003012:	4013      	ands	r3, r2
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x660>
 8003016:	e034      	b.n	8003082 <HAL_RCC_OscConfig+0x6ea>
 8003018:	40021000 	.word	0x40021000
 800301c:	ffff1fff 	.word	0xffff1fff
 8003020:	fffffeff 	.word	0xfffffeff
 8003024:	40007000 	.word	0x40007000
 8003028:	fffffbff 	.word	0xfffffbff
 800302c:	00001388 	.word	0x00001388
 8003030:	efffffff 	.word	0xefffffff
 8003034:	feffffff 	.word	0xfeffffff
 8003038:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e01d      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b10      	ldr	r3, [pc, #64]	@ (800308c <HAL_RCC_OscConfig+0x6f4>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	025b      	lsls	r3, r3, #9
 8003054:	401a      	ands	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	429a      	cmp	r2, r3
 800305c:	d10f      	bne.n	800307e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	23f0      	movs	r3, #240	@ 0xf0
 8003062:	039b      	lsls	r3, r3, #14
 8003064:	401a      	ands	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d107      	bne.n	800307e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	23c0      	movs	r3, #192	@ 0xc0
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	401a      	ands	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b00a      	add	sp, #40	@ 0x28
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e128      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b96      	ldr	r3, [pc, #600]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d91e      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b93      	ldr	r3, [pc, #588]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b90      	ldr	r3, [pc, #576]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030c4:	f7fd fc20 	bl	8000908 <HAL_GetTick>
 80030c8:	0003      	movs	r3, r0
 80030ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030cc:	e009      	b.n	80030e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f7fd fc1b 	bl	8000908 <HAL_GetTick>
 80030d2:	0002      	movs	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	4a8a      	ldr	r2, [pc, #552]	@ (8003304 <HAL_RCC_ClockConfig+0x274>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e109      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b87      	ldr	r3, [pc, #540]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1ee      	bne.n	80030ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2202      	movs	r2, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fa:	4b83      	ldr	r3, [pc, #524]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	22f0      	movs	r2, #240	@ 0xf0
 8003100:	4393      	bics	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b7f      	ldr	r3, [pc, #508]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 800310a:	430a      	orrs	r2, r1
 800310c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d100      	bne.n	800311a <HAL_RCC_ClockConfig+0x8a>
 8003118:	e089      	b.n	800322e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003122:	4b79      	ldr	r3, [pc, #484]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	4013      	ands	r3, r2
 800312c:	d120      	bne.n	8003170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0e1      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800313a:	4b73      	ldr	r3, [pc, #460]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	049b      	lsls	r3, r3, #18
 8003142:	4013      	ands	r3, r2
 8003144:	d114      	bne.n	8003170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0d5      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d106      	bne.n	8003160 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003152:	4b6d      	ldr	r3, [pc, #436]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	d109      	bne.n	8003170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0ca      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003160:	4b69      	ldr	r3, [pc, #420]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4013      	ands	r3, r2
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0c2      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003170:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2203      	movs	r2, #3
 8003176:	4393      	bics	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4b62      	ldr	r3, [pc, #392]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7fd fbc0 	bl	8000908 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d111      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003194:	e009      	b.n	80031aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003196:	f7fd fbb7 	bl	8000908 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <HAL_RCC_ClockConfig+0x274>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0a5      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031aa:	4b57      	ldr	r3, [pc, #348]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	220c      	movs	r2, #12
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d1ef      	bne.n	8003196 <HAL_RCC_ClockConfig+0x106>
 80031b6:	e03a      	b.n	800322e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c0:	e009      	b.n	80031d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c2:	f7fd fba1 	bl	8000908 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003304 <HAL_RCC_ClockConfig+0x274>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e08f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	220c      	movs	r2, #12
 80031dc:	4013      	ands	r3, r2
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d1ef      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x132>
 80031e2:	e024      	b.n	800322e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d11b      	bne.n	8003224 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ec:	e009      	b.n	8003202 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ee:	f7fd fb8b 	bl	8000908 <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	4a42      	ldr	r2, [pc, #264]	@ (8003304 <HAL_RCC_ClockConfig+0x274>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e079      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003202:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	220c      	movs	r2, #12
 8003208:	4013      	ands	r3, r2
 800320a:	2b04      	cmp	r3, #4
 800320c:	d1ef      	bne.n	80031ee <HAL_RCC_ClockConfig+0x15e>
 800320e:	e00e      	b.n	800322e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fd fb7a 	bl	8000908 <HAL_GetTick>
 8003214:	0002      	movs	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	4a3a      	ldr	r2, [pc, #232]	@ (8003304 <HAL_RCC_ClockConfig+0x274>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e068      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003224:	4b38      	ldr	r3, [pc, #224]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	220c      	movs	r2, #12
 800322a:	4013      	ands	r3, r2
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322e:	4b34      	ldr	r3, [pc, #208]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	4013      	ands	r3, r2
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d21e      	bcs.n	800327a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323c:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	4393      	bics	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	4b2e      	ldr	r3, [pc, #184]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800324e:	f7fd fb5b 	bl	8000908 <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	e009      	b.n	800326c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fd fb56 	bl	8000908 <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	4a28      	ldr	r2, [pc, #160]	@ (8003304 <HAL_RCC_ClockConfig+0x274>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e044      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326c:	4b24      	ldr	r3, [pc, #144]	@ (8003300 <HAL_RCC_ClockConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	4013      	ands	r3, r2
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d1ee      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2204      	movs	r2, #4
 8003280:	4013      	ands	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a20      	ldr	r2, [pc, #128]	@ (800330c <HAL_RCC_ClockConfig+0x27c>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	4013      	ands	r3, r2
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032a2:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_RCC_ClockConfig+0x280>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00da      	lsls	r2, r3, #3
 80032b2:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b8:	f000 f832 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032bc:	0001      	movs	r1, r0
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_RCC_ClockConfig+0x278>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	220f      	movs	r2, #15
 80032c6:	4013      	ands	r3, r2
 80032c8:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <HAL_RCC_ClockConfig+0x284>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	000a      	movs	r2, r1
 80032ce:	40da      	lsrs	r2, r3
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <HAL_RCC_ClockConfig+0x288>)
 80032d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_RCC_ClockConfig+0x28c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	250b      	movs	r5, #11
 80032da:	197c      	adds	r4, r7, r5
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd facd 	bl	800087c <HAL_InitTick>
 80032e2:	0003      	movs	r3, r0
 80032e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032e6:	197b      	adds	r3, r7, r5
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032ee:	197b      	adds	r3, r7, r5
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bdb0      	pop	{r4, r5, r7, pc}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	40022000 	.word	0x40022000
 8003304:	00001388 	.word	0x00001388
 8003308:	40021000 	.word	0x40021000
 800330c:	fffff8ff 	.word	0xfffff8ff
 8003310:	ffffc7ff 	.word	0xffffc7ff
 8003314:	08003730 	.word	0x08003730
 8003318:	20000000 	.word	0x20000000
 800331c:	20000004 	.word	0x20000004

08003320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003326:	4b3c      	ldr	r3, [pc, #240]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	220c      	movs	r2, #12
 8003330:	4013      	ands	r3, r2
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d013      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x3e>
 8003336:	d85c      	bhi.n	80033f2 <HAL_RCC_GetSysClockFreq+0xd2>
 8003338:	2b04      	cmp	r3, #4
 800333a:	d002      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x22>
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00b      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x38>
 8003340:	e057      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003342:	4b35      	ldr	r3, [pc, #212]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2210      	movs	r2, #16
 8003348:	4013      	ands	r3, r2
 800334a:	d002      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800334c:	4b33      	ldr	r3, [pc, #204]	@ (800341c <HAL_RCC_GetSysClockFreq+0xfc>)
 800334e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003350:	e05d      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003352:	4b33      	ldr	r3, [pc, #204]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x100>)
 8003354:	613b      	str	r3, [r7, #16]
      break;
 8003356:	e05a      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003358:	4b32      	ldr	r3, [pc, #200]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x104>)
 800335a:	613b      	str	r3, [r7, #16]
      break;
 800335c:	e057      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0c9b      	lsrs	r3, r3, #18
 8003362:	220f      	movs	r2, #15
 8003364:	4013      	ands	r3, r2
 8003366:	4a30      	ldr	r2, [pc, #192]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0d9b      	lsrs	r3, r3, #22
 8003370:	2203      	movs	r2, #3
 8003372:	4013      	ands	r3, r2
 8003374:	3301      	adds	r3, #1
 8003376:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xf8>)
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	025b      	lsls	r3, r3, #9
 8003380:	4013      	ands	r3, r2
 8003382:	d00f      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	000a      	movs	r2, r1
 8003388:	0152      	lsls	r2, r2, #5
 800338a:	1a52      	subs	r2, r2, r1
 800338c:	0193      	lsls	r3, r2, #6
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	185b      	adds	r3, r3, r1
 8003394:	025b      	lsls	r3, r3, #9
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f7fc feb5 	bl	8000108 <__udivsi3>
 800339e:	0003      	movs	r3, r0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e023      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2210      	movs	r2, #16
 80033aa:	4013      	ands	r3, r2
 80033ac:	d00f      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	000a      	movs	r2, r1
 80033b2:	0152      	lsls	r2, r2, #5
 80033b4:	1a52      	subs	r2, r2, r1
 80033b6:	0193      	lsls	r3, r2, #6
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	185b      	adds	r3, r3, r1
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00e      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	000a      	movs	r2, r1
 80033d2:	0152      	lsls	r2, r2, #5
 80033d4:	1a52      	subs	r2, r2, r1
 80033d6:	0193      	lsls	r3, r2, #6
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	185b      	adds	r3, r3, r1
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fc fe90 	bl	8000108 <__udivsi3>
 80033e8:	0003      	movs	r3, r0
 80033ea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	613b      	str	r3, [r7, #16]
      break;
 80033f0:	e00d      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	2207      	movs	r2, #7
 80033fa:	4013      	ands	r3, r2
 80033fc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	2280      	movs	r2, #128	@ 0x80
 8003404:	0212      	lsls	r2, r2, #8
 8003406:	409a      	lsls	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
      break;
 800340c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800340e:	693b      	ldr	r3, [r7, #16]
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b006      	add	sp, #24
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	003d0900 	.word	0x003d0900
 8003420:	00f42400 	.word	0x00f42400
 8003424:	007a1200 	.word	0x007a1200
 8003428:	08003740 	.word	0x08003740

0800342c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003434:	2017      	movs	r0, #23
 8003436:	183b      	adds	r3, r7, r0
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2220      	movs	r2, #32
 8003442:	4013      	ands	r3, r2
 8003444:	d100      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003446:	e0c7      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003448:	4b93      	ldr	r3, [pc, #588]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800344a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	055b      	lsls	r3, r3, #21
 8003450:	4013      	ands	r3, r2
 8003452:	d109      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	4b90      	ldr	r3, [pc, #576]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003458:	4b8f      	ldr	r3, [pc, #572]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800345a:	2180      	movs	r1, #128	@ 0x80
 800345c:	0549      	lsls	r1, r1, #21
 800345e:	430a      	orrs	r2, r1
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003462:	183b      	adds	r3, r7, r0
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b8c      	ldr	r3, [pc, #560]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2380      	movs	r3, #128	@ 0x80
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4013      	ands	r3, r2
 8003472:	d11a      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003474:	4b89      	ldr	r3, [pc, #548]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b88      	ldr	r3, [pc, #544]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800347a:	2180      	movs	r1, #128	@ 0x80
 800347c:	0049      	lsls	r1, r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fd fa41 	bl	8000908 <HAL_GetTick>
 8003486:	0003      	movs	r3, r0
 8003488:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	e008      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7fd fa3c 	bl	8000908 <HAL_GetTick>
 8003490:	0002      	movs	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0f8      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b7f      	ldr	r3, [pc, #508]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	2380      	movs	r3, #128	@ 0x80
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4013      	ands	r3, r2
 80034a8:	d0f0      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80034aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	23c0      	movs	r3, #192	@ 0xc0
 80034b0:	039b      	lsls	r3, r3, #14
 80034b2:	4013      	ands	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	23c0      	movs	r3, #192	@ 0xc0
 80034bc:	039b      	lsls	r3, r3, #14
 80034be:	4013      	ands	r3, r2
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d013      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	23c0      	movs	r3, #192	@ 0xc0
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	401a      	ands	r2, r3
 80034d0:	23c0      	movs	r3, #192	@ 0xc0
 80034d2:	029b      	lsls	r3, r3, #10
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	401a      	ands	r2, r3
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	029b      	lsls	r3, r3, #10
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0d0      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80034ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034f2:	23c0      	movs	r3, #192	@ 0xc0
 80034f4:	029b      	lsls	r3, r3, #10
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	23c0      	movs	r3, #192	@ 0xc0
 8003506:	029b      	lsls	r3, r3, #10
 8003508:	4013      	ands	r3, r2
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d033      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2220      	movs	r2, #32
 8003516:	4013      	ands	r3, r2
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800351a:	4b5f      	ldr	r3, [pc, #380]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	4a60      	ldr	r2, [pc, #384]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003524:	4b5c      	ldr	r3, [pc, #368]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003526:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003528:	4b5b      	ldr	r3, [pc, #364]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800352a:	2180      	movs	r1, #128	@ 0x80
 800352c:	0309      	lsls	r1, r1, #12
 800352e:	430a      	orrs	r2, r1
 8003530:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003532:	4b59      	ldr	r3, [pc, #356]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003536:	4b58      	ldr	r3, [pc, #352]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003538:	495a      	ldr	r1, [pc, #360]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800353a:	400a      	ands	r2, r1
 800353c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800353e:	4b56      	ldr	r3, [pc, #344]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4013      	ands	r3, r2
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fd f9db 	bl	8000908 <HAL_GetTick>
 8003552:	0003      	movs	r3, r0
 8003554:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003556:	e009      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fd f9d6 	bl	8000908 <HAL_GetTick>
 800355c:	0002      	movs	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	4a51      	ldr	r2, [pc, #324]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e091      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800356c:	4b4a      	ldr	r3, [pc, #296]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800356e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d0ef      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2220      	movs	r2, #32
 800357e:	4013      	ands	r3, r2
 8003580:	d01f      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	23c0      	movs	r3, #192	@ 0xc0
 8003588:	029b      	lsls	r3, r3, #10
 800358a:	401a      	ands	r2, r3
 800358c:	23c0      	movs	r3, #192	@ 0xc0
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	429a      	cmp	r2, r3
 8003592:	d10c      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003594:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a44      	ldr	r2, [pc, #272]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	23c0      	movs	r3, #192	@ 0xc0
 80035a4:	039b      	lsls	r3, r3, #14
 80035a6:	401a      	ands	r2, r3
 80035a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	23c0      	movs	r3, #192	@ 0xc0
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	401a      	ands	r2, r3
 80035bc:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035be:	430a      	orrs	r2, r1
 80035c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b32      	ldr	r3, [pc, #200]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d0:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035d2:	4937      	ldr	r1, [pc, #220]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	2203      	movs	r2, #3
 80035e8:	4393      	bics	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	4b29      	ldr	r3, [pc, #164]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035f2:	430a      	orrs	r2, r1
 80035f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d009      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003600:	4b25      	ldr	r3, [pc, #148]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	220c      	movs	r2, #12
 8003606:	4393      	bics	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003610:	430a      	orrs	r2, r1
 8003612:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2204      	movs	r2, #4
 800361a:	4013      	ands	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800361e:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	4a24      	ldr	r2, [pc, #144]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003624:	4013      	ands	r3, r2
 8003626:	0019      	movs	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800362e:	430a      	orrs	r2, r1
 8003630:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2208      	movs	r2, #8
 8003638:	4013      	ands	r3, r2
 800363a:	d009      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363c:	4b16      	ldr	r3, [pc, #88]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800364c:	430a      	orrs	r2, r1
 800364e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4013      	ands	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800365c:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003660:	4a0f      	ldr	r2, [pc, #60]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800366c:	430a      	orrs	r2, r1
 800366e:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2280      	movs	r2, #128	@ 0x80
 8003676:	4013      	ands	r3, r2
 8003678:	d009      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800367a:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	4a0f      	ldr	r2, [pc, #60]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800368a:	430a      	orrs	r2, r1
 800368c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b006      	add	sp, #24
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	40007000 	.word	0x40007000
 80036a0:	fffcffff 	.word	0xfffcffff
 80036a4:	fff7ffff 	.word	0xfff7ffff
 80036a8:	00001388 	.word	0x00001388
 80036ac:	ffcfffff 	.word	0xffcfffff
 80036b0:	efffffff 	.word	0xefffffff
 80036b4:	fffff3ff 	.word	0xfffff3ff
 80036b8:	ffffcfff 	.word	0xffffcfff
 80036bc:	fff3ffff 	.word	0xfff3ffff

080036c0 <memset>:
 80036c0:	0003      	movs	r3, r0
 80036c2:	1882      	adds	r2, r0, r2
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d100      	bne.n	80036ca <memset+0xa>
 80036c8:	4770      	bx	lr
 80036ca:	7019      	strb	r1, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	e7f9      	b.n	80036c4 <memset+0x4>

080036d0 <__libc_init_array>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	2600      	movs	r6, #0
 80036d4:	4c0c      	ldr	r4, [pc, #48]	@ (8003708 <__libc_init_array+0x38>)
 80036d6:	4d0d      	ldr	r5, [pc, #52]	@ (800370c <__libc_init_array+0x3c>)
 80036d8:	1b64      	subs	r4, r4, r5
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	42a6      	cmp	r6, r4
 80036de:	d109      	bne.n	80036f4 <__libc_init_array+0x24>
 80036e0:	2600      	movs	r6, #0
 80036e2:	f000 f819 	bl	8003718 <_init>
 80036e6:	4c0a      	ldr	r4, [pc, #40]	@ (8003710 <__libc_init_array+0x40>)
 80036e8:	4d0a      	ldr	r5, [pc, #40]	@ (8003714 <__libc_init_array+0x44>)
 80036ea:	1b64      	subs	r4, r4, r5
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	42a6      	cmp	r6, r4
 80036f0:	d105      	bne.n	80036fe <__libc_init_array+0x2e>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	00b3      	lsls	r3, r6, #2
 80036f6:	58eb      	ldr	r3, [r5, r3]
 80036f8:	4798      	blx	r3
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7ee      	b.n	80036dc <__libc_init_array+0xc>
 80036fe:	00b3      	lsls	r3, r6, #2
 8003700:	58eb      	ldr	r3, [r5, r3]
 8003702:	4798      	blx	r3
 8003704:	3601      	adds	r6, #1
 8003706:	e7f2      	b.n	80036ee <__libc_init_array+0x1e>
 8003708:	0800374c 	.word	0x0800374c
 800370c:	0800374c 	.word	0x0800374c
 8003710:	08003750 	.word	0x08003750
 8003714:	0800374c 	.word	0x0800374c

08003718 <_init>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr

08003724 <_fini>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr
